// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_nonsimd_u8_vec_layout() {
    assert_eq!(size_of::<Vec2S<u8>>(), size_of::<u8>() * 2);
    assert_eq!(size_of::<Vec3S<u8>>(), size_of::<u8>() * 3);
    assert_eq!(size_of::<Vec4S<u8>>(), size_of::<u8>() * 4);

    assert_eq!(align_of::<Vec2S<u8>>(), align_of::<u8>());
    assert_eq!(align_of::<Vec3S<u8>>(), align_of::<u8>());
    assert_eq!(align_of::<Vec4S<u8>>(), align_of::<u8>());
}

#[test]
fn test_simd_u8_vec_constructors() {
    assert_eq!(Vec2::from_array([1u8, 2u8]).as_array(), [1u8, 2u8]);
    assert_eq!(
        Vec3::from_array([1u8, 2u8, 3u8]).as_array(),
        [1u8, 2u8, 3u8]
    );
    assert_eq!(
        Vec4::from_array([1u8, 2u8, 3u8, 4u8]).as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );

    assert_eq!(Vec2::splat(1u8).as_array(), [1u8; 2]);
    assert_eq!(Vec3::splat(1u8).as_array(), [1u8; 3]);
    assert_eq!(Vec4::splat(1u8).as_array(), [1u8; 4]);

    assert_eq!(Vec2::from_fn(|i| [1u8, 2u8][i]).as_array(), [1u8, 2u8]);
    assert_eq!(
        Vec3::from_fn(|i| [1u8, 2u8, 3u8][i]).as_array(),
        [1u8, 2u8, 3u8]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1u8, 2u8, 3u8, 4u8][i]).as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );

    assert_eq!(Vec2::const_from_array([1u8, 2u8]).as_array(), [1u8, 2u8]);
    assert_eq!(
        Vec3::const_from_array([1u8, 2u8, 3u8]).as_array(),
        [1u8, 2u8, 3u8]
    );
    assert_eq!(
        Vec4::const_from_array([1u8, 2u8, 3u8, 4u8]).as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );

    assert_eq!(vec2!(1u8, 2u8).as_array(), [1u8, 2u8]);
    assert_eq!(vec2!(vec2!(1u8, 2u8)).as_array(), [1u8, 2u8]);
    assert_eq!(vec3!(1u8, 2u8, 3u8).as_array(), [1u8, 2u8, 3u8]);
    assert_eq!(vec3!(1u8, vec2!(2u8, 3u8)).as_array(), [1u8, 2u8, 3u8]);
    assert_eq!(vec4!(1u8, 2u8, 3u8, 4u8).as_array(), [1u8, 2u8, 3u8, 4u8]);
    assert_eq!(
        vec4!(1u8, vec2!(2u8, 3u8), 4u8).as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );
    assert_eq!(
        vec4!(
            1u8,
            vec2!(2u8, 3u8),
            Vector::<1, u8, Simd>::from_array([4u8])
        )
        .as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );
}

#[test]
fn test_nonsimd_u8_vec_constructors() {
    assert_eq!(Vec2S::from_array([1u8, 2u8]).as_array(), [1u8, 2u8]);
    assert_eq!(
        Vec3S::from_array([1u8, 2u8, 3u8]).as_array(),
        [1u8, 2u8, 3u8]
    );
    assert_eq!(
        Vec4S::from_array([1u8, 2u8, 3u8, 4u8]).as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );

    assert_eq!(Vec2S::splat(1u8).as_array(), [1u8; 2]);
    assert_eq!(Vec3S::splat(1u8).as_array(), [1u8; 3]);
    assert_eq!(Vec4S::splat(1u8).as_array(), [1u8; 4]);

    assert_eq!(Vec2S::from_fn(|i| [1u8, 2u8][i]).as_array(), [1u8, 2u8]);
    assert_eq!(
        Vec3S::from_fn(|i| [1u8, 2u8, 3u8][i]).as_array(),
        [1u8, 2u8, 3u8]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1u8, 2u8, 3u8, 4u8][i]).as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );

    assert_eq!(Vec2S::const_from_array([1u8, 2u8]).as_array(), [1u8, 2u8]);
    assert_eq!(
        Vec3S::const_from_array([1u8, 2u8, 3u8]).as_array(),
        [1u8, 2u8, 3u8]
    );
    assert_eq!(
        Vec4S::const_from_array([1u8, 2u8, 3u8, 4u8]).as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );

    assert_eq!(vec2s!(1u8, 2u8).as_array(), [1u8, 2u8]);
    assert_eq!(vec2s!(vec2s!(1u8, 2u8)).as_array(), [1u8, 2u8]);
    assert_eq!(vec3s!(1u8, 2u8, 3u8).as_array(), [1u8, 2u8, 3u8]);
    assert_eq!(vec3s!(1u8, vec2s!(2u8, 3u8)).as_array(), [1u8, 2u8, 3u8]);
    assert_eq!(vec4s!(1u8, 2u8, 3u8, 4u8).as_array(), [1u8, 2u8, 3u8, 4u8]);
    assert_eq!(
        vec4s!(1u8, vec2s!(2u8, 3u8), 4u8).as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );
    assert_eq!(
        vec4s!(
            1u8,
            vec2s!(2u8, 3u8),
            Vector::<1, u8, NonSimd>::from_array([4u8])
        )
        .as_array(),
        [1u8, 2u8, 3u8, 4u8]
    );
}
