// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<u16>>() == size_of::<[u16; 2]>());

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(0u16, 1u16).align(), vec2!(0u16, 1u16));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(0u16, 1u16).pack(), vec2p!(0u16, 1u16));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(Vec2::from_array([0u16, 1u16]).as_array(), [0u16, 1u16]);
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(0u16), vec2!(0u16, 0u16));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(0u16, 1u16).index(0), 0u16);
    assert_eq!(vec2!(0u16, 1u16).index(1), 1u16);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(0u16, 1u16).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(0u16, 1u16).get(0), Some(0u16));
    assert_eq!(vec2!(0u16, 1u16).get(1), Some(1u16));

    assert_eq!(vec2!(0u16, 1u16).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(0u16, 1u16).get_unchecked(0), 0u16);
        assert_eq!(vec2!(0u16, 1u16).get_unchecked(1), 1u16);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(0u16, 1u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec2!(50u16, 1u16));
    }
    {
        let mut vec = vec2!(0u16, 1u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec2!(0u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(0u16, 1u16);
    vec.set(2, 0u16);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(0u16, 1u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec2!(50u16, 1u16));
    }
    {
        let mut vec = vec2!(0u16, 1u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec2!(0u16, 50u16));
    }

    assert_eq!(
        vec2!(0u16, 1u16).try_set(2, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(0u16, 1u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec2!(50u16, 1u16));
        }
        {
            let mut vec = vec2!(0u16, 1u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec2!(0u16, 50u16));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(0u16, 1u16).yx(), vec2!(1u16, 0u16));
    assert_eq!(vec2!(0u16, 1u16).yxy(), vec3!(1u16, 0u16, 1u16));
    assert_eq!(vec2!(0u16, 1u16).yxyy(), vec4!(1u16, 0u16, 1u16, 1u16));
}

#[test]
fn test_vec2_fold() {
    assert_eq!(
        vec2!(0u16, 1u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16
    );
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(vec2!(0u16, 1u16).reduce(|acc, x| acc + x), 0u16 + 1u16);
}

#[test]
fn test_vec2p_align() {
    assert_eq!(vec2p!(0u16, 1u16).align(), vec2!(0u16, 1u16));
}

#[test]
fn test_vec2p_pack() {
    assert_eq!(vec2p!(0u16, 1u16).pack(), vec2p!(0u16, 1u16));
}

#[test]
fn test_vec2p_from_array_as_array() {
    assert_eq!(Vec2P::from_array([0u16, 1u16]).as_array(), [0u16, 1u16]);
}

#[test]
fn test_vec2p_splat() {
    assert_eq!(Vec2P::splat(0u16), vec2p!(0u16, 0u16));
}

#[test]
fn test_vec2p_index() {
    assert_eq!(vec2p!(0u16, 1u16).index(0), 0u16);
    assert_eq!(vec2p!(0u16, 1u16).index(1), 1u16);
}

#[test]
#[should_panic]
fn test_vec2p_index_panic() {
    vec2p!(0u16, 1u16).index(2);
}

#[test]
fn test_vec2p_get() {
    assert_eq!(vec2p!(0u16, 1u16).get(0), Some(0u16));
    assert_eq!(vec2p!(0u16, 1u16).get(1), Some(1u16));

    assert_eq!(vec2p!(0u16, 1u16).get(2), None);
}

#[test]
fn test_vec2p_get_unchecked() {
    unsafe {
        assert_eq!(vec2p!(0u16, 1u16).get_unchecked(0), 0u16);
        assert_eq!(vec2p!(0u16, 1u16).get_unchecked(1), 1u16);
    }
}

#[test]
fn test_vec2p_set() {
    {
        let mut vec = vec2p!(0u16, 1u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec2p!(50u16, 1u16));
    }
    {
        let mut vec = vec2p!(0u16, 1u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec2p!(0u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec2p_set_panic() {
    let mut vec = vec2p!(0u16, 1u16);
    vec.set(2, 0u16);
}

#[test]
fn test_vec2p_try_set() {
    {
        let mut vec = vec2p!(0u16, 1u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec2p!(50u16, 1u16));
    }
    {
        let mut vec = vec2p!(0u16, 1u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec2p!(0u16, 50u16));
    }

    assert_eq!(
        vec2p!(0u16, 1u16).try_set(2, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2p!(0u16, 1u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec2p!(50u16, 1u16));
        }
        {
            let mut vec = vec2p!(0u16, 1u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec2p!(0u16, 50u16));
        }
    }
}

#[test]
fn test_vec2p_swizzle() {
    assert_eq!(vec2p!(0u16, 1u16).yx(), vec2p!(1u16, 0u16));
    assert_eq!(vec2p!(0u16, 1u16).yxy(), vec3p!(1u16, 0u16, 1u16));
    assert_eq!(vec2p!(0u16, 1u16).yxyy(), vec4p!(1u16, 0u16, 1u16, 1u16));
}

#[test]
fn test_vec2p_fold() {
    assert_eq!(
        vec2p!(0u16, 1u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16
    );
}

#[test]
fn test_vec2p_reduce() {
    assert_eq!(vec2p!(0u16, 1u16).reduce(|acc, x| acc + x), 0u16 + 1u16);
}

const _: () = assert!(size_of::<Vec3P<u16>>() == size_of::<[u16; 3]>());

#[test]
fn test_vec3_align() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).align(), vec3!(0u16, 1u16, 2u16));
}

#[test]
fn test_vec3_pack() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).pack(), vec3p!(0u16, 1u16, 2u16));
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([0u16, 1u16, 2u16]).as_array(),
        [0u16, 1u16, 2u16]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(0u16), vec3!(0u16, 0u16, 0u16));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).index(0), 0u16);
    assert_eq!(vec3!(0u16, 1u16, 2u16).index(1), 1u16);
    assert_eq!(vec3!(0u16, 1u16, 2u16).index(2), 2u16);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(0u16, 1u16, 2u16).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).get(0), Some(0u16));
    assert_eq!(vec3!(0u16, 1u16, 2u16).get(1), Some(1u16));
    assert_eq!(vec3!(0u16, 1u16, 2u16).get(2), Some(2u16));

    assert_eq!(vec3!(0u16, 1u16, 2u16).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(0u16, 1u16, 2u16).get_unchecked(0), 0u16);
        assert_eq!(vec3!(0u16, 1u16, 2u16).get_unchecked(1), 1u16);
        assert_eq!(vec3!(0u16, 1u16, 2u16).get_unchecked(2), 2u16);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec3!(50u16, 1u16, 2u16));
    }
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec3!(0u16, 50u16, 2u16));
    }
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.set(2, 50u16);

        assert_eq!(vec, vec3!(0u16, 1u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(0u16, 1u16, 2u16);
    vec.set(3, 0u16);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec3!(50u16, 1u16, 2u16));
    }
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec3!(0u16, 50u16, 2u16));
    }
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.try_set(2, 50u16).unwrap();

        assert_eq!(vec, vec3!(0u16, 1u16, 50u16));
    }

    assert_eq!(
        vec3!(0u16, 1u16, 2u16).try_set(3, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(0u16, 1u16, 2u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec3!(50u16, 1u16, 2u16));
        }
        {
            let mut vec = vec3!(0u16, 1u16, 2u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec3!(0u16, 50u16, 2u16));
        }
        {
            let mut vec = vec3!(0u16, 1u16, 2u16);
            vec.set_unchecked(2, 50u16);

            assert_eq!(vec, vec3!(0u16, 1u16, 50u16));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).zx(), vec2!(2u16, 0u16));
    assert_eq!(vec3!(0u16, 1u16, 2u16).zxy(), vec3!(2u16, 0u16, 1u16));
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).zxyz(),
        vec4!(2u16, 0u16, 1u16, 2u16)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16 + 2u16
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).reduce(|acc, x| acc + x),
        0u16 + 1u16 + 2u16
    );
}

#[test]
fn test_vec3p_align() {
    assert_eq!(vec3p!(0u16, 1u16, 2u16).align(), vec3!(0u16, 1u16, 2u16));
}

#[test]
fn test_vec3p_pack() {
    assert_eq!(vec3p!(0u16, 1u16, 2u16).pack(), vec3p!(0u16, 1u16, 2u16));
}

#[test]
fn test_vec3p_from_array_as_array() {
    assert_eq!(
        Vec3P::from_array([0u16, 1u16, 2u16]).as_array(),
        [0u16, 1u16, 2u16]
    );
}

#[test]
fn test_vec3p_splat() {
    assert_eq!(Vec3P::splat(0u16), vec3p!(0u16, 0u16, 0u16));
}

#[test]
fn test_vec3p_index() {
    assert_eq!(vec3p!(0u16, 1u16, 2u16).index(0), 0u16);
    assert_eq!(vec3p!(0u16, 1u16, 2u16).index(1), 1u16);
    assert_eq!(vec3p!(0u16, 1u16, 2u16).index(2), 2u16);
}

#[test]
#[should_panic]
fn test_vec3p_index_panic() {
    vec3p!(0u16, 1u16, 2u16).index(3);
}

#[test]
fn test_vec3p_get() {
    assert_eq!(vec3p!(0u16, 1u16, 2u16).get(0), Some(0u16));
    assert_eq!(vec3p!(0u16, 1u16, 2u16).get(1), Some(1u16));
    assert_eq!(vec3p!(0u16, 1u16, 2u16).get(2), Some(2u16));

    assert_eq!(vec3p!(0u16, 1u16, 2u16).get(3), None);
}

#[test]
fn test_vec3p_get_unchecked() {
    unsafe {
        assert_eq!(vec3p!(0u16, 1u16, 2u16).get_unchecked(0), 0u16);
        assert_eq!(vec3p!(0u16, 1u16, 2u16).get_unchecked(1), 1u16);
        assert_eq!(vec3p!(0u16, 1u16, 2u16).get_unchecked(2), 2u16);
    }
}

#[test]
fn test_vec3p_set() {
    {
        let mut vec = vec3p!(0u16, 1u16, 2u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec3p!(50u16, 1u16, 2u16));
    }
    {
        let mut vec = vec3p!(0u16, 1u16, 2u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec3p!(0u16, 50u16, 2u16));
    }
    {
        let mut vec = vec3p!(0u16, 1u16, 2u16);
        vec.set(2, 50u16);

        assert_eq!(vec, vec3p!(0u16, 1u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec3p_set_panic() {
    let mut vec = vec3p!(0u16, 1u16, 2u16);
    vec.set(3, 0u16);
}

#[test]
fn test_vec3p_try_set() {
    {
        let mut vec = vec3p!(0u16, 1u16, 2u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec3p!(50u16, 1u16, 2u16));
    }
    {
        let mut vec = vec3p!(0u16, 1u16, 2u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec3p!(0u16, 50u16, 2u16));
    }
    {
        let mut vec = vec3p!(0u16, 1u16, 2u16);
        vec.try_set(2, 50u16).unwrap();

        assert_eq!(vec, vec3p!(0u16, 1u16, 50u16));
    }

    assert_eq!(
        vec3p!(0u16, 1u16, 2u16).try_set(3, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3p!(0u16, 1u16, 2u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec3p!(50u16, 1u16, 2u16));
        }
        {
            let mut vec = vec3p!(0u16, 1u16, 2u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec3p!(0u16, 50u16, 2u16));
        }
        {
            let mut vec = vec3p!(0u16, 1u16, 2u16);
            vec.set_unchecked(2, 50u16);

            assert_eq!(vec, vec3p!(0u16, 1u16, 50u16));
        }
    }
}

#[test]
fn test_vec3p_swizzle() {
    assert_eq!(vec3p!(0u16, 1u16, 2u16).zx(), vec2p!(2u16, 0u16));
    assert_eq!(vec3p!(0u16, 1u16, 2u16).zxy(), vec3p!(2u16, 0u16, 1u16));
    assert_eq!(
        vec3p!(0u16, 1u16, 2u16).zxyz(),
        vec4p!(2u16, 0u16, 1u16, 2u16)
    );
}

#[test]
fn test_vec3p_fold() {
    assert_eq!(
        vec3p!(0u16, 1u16, 2u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16 + 2u16
    );
}

#[test]
fn test_vec3p_reduce() {
    assert_eq!(
        vec3p!(0u16, 1u16, 2u16).reduce(|acc, x| acc + x),
        0u16 + 1u16 + 2u16
    );
}

const _: () = assert!(size_of::<Vec4P<u16>>() == size_of::<[u16; 4]>());

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).align(),
        vec4!(0u16, 1u16, 2u16, 3u16)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).pack(),
        vec4p!(0u16, 1u16, 2u16, 3u16)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0u16, 1u16, 2u16, 3u16]).as_array(),
        [0u16, 1u16, 2u16, 3u16]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0u16), vec4!(0u16, 0u16, 0u16, 0u16));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).index(0), 0u16);
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).index(1), 1u16);
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).index(2), 2u16);
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).index(3), 3u16);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0u16, 1u16, 2u16, 3u16).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(0), Some(0u16));
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(1), Some(1u16));
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(2), Some(2u16));
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(3), Some(3u16));

    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get_unchecked(0), 0u16);
        assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get_unchecked(1), 1u16);
        assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get_unchecked(2), 2u16);
        assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get_unchecked(3), 3u16);
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec4!(50u16, 1u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec4!(0u16, 50u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.set(2, 50u16);

        assert_eq!(vec, vec4!(0u16, 1u16, 50u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.set(3, 50u16);

        assert_eq!(vec, vec4!(0u16, 1u16, 2u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
    vec.set(4, 0u16);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec4!(50u16, 1u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec4!(0u16, 50u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(2, 50u16).unwrap();

        assert_eq!(vec, vec4!(0u16, 1u16, 50u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(3, 50u16).unwrap();

        assert_eq!(vec, vec4!(0u16, 1u16, 2u16, 50u16));
    }

    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).try_set(4, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec4!(50u16, 1u16, 2u16, 3u16));
        }
        {
            let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec4!(0u16, 50u16, 2u16, 3u16));
        }
        {
            let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(2, 50u16);

            assert_eq!(vec, vec4!(0u16, 1u16, 50u16, 3u16));
        }
        {
            let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(3, 50u16);

            assert_eq!(vec, vec4!(0u16, 1u16, 2u16, 50u16));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).zw(), vec2!(2u16, 3u16));
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).zwy(), vec3!(2u16, 3u16, 1u16));
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).zwyz(),
        vec4!(2u16, 3u16, 1u16, 2u16)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16 + 2u16 + 3u16
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).reduce(|acc, x| acc + x),
        0u16 + 1u16 + 2u16 + 3u16
    );
}

#[test]
fn test_vec4p_align() {
    assert_eq!(
        vec4p!(0u16, 1u16, 2u16, 3u16).align(),
        vec4!(0u16, 1u16, 2u16, 3u16)
    );
}

#[test]
fn test_vec4p_pack() {
    assert_eq!(
        vec4p!(0u16, 1u16, 2u16, 3u16).pack(),
        vec4p!(0u16, 1u16, 2u16, 3u16)
    );
}

#[test]
fn test_vec4p_from_array_as_array() {
    assert_eq!(
        Vec4P::from_array([0u16, 1u16, 2u16, 3u16]).as_array(),
        [0u16, 1u16, 2u16, 3u16]
    );
}

#[test]
fn test_vec4p_splat() {
    assert_eq!(Vec4P::splat(0u16), vec4p!(0u16, 0u16, 0u16, 0u16));
}

#[test]
fn test_vec4p_index() {
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).index(0), 0u16);
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).index(1), 1u16);
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).index(2), 2u16);
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).index(3), 3u16);
}

#[test]
#[should_panic]
fn test_vec4p_index_panic() {
    vec4p!(0u16, 1u16, 2u16, 3u16).index(4);
}

#[test]
fn test_vec4p_get() {
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get(0), Some(0u16));
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get(1), Some(1u16));
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get(2), Some(2u16));
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get(3), Some(3u16));

    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get(4), None);
}

#[test]
fn test_vec4p_get_unchecked() {
    unsafe {
        assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get_unchecked(0), 0u16);
        assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get_unchecked(1), 1u16);
        assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get_unchecked(2), 2u16);
        assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).get_unchecked(3), 3u16);
    }
}

#[test]
fn test_vec4p_set() {
    {
        let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec4p!(50u16, 1u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec4p!(0u16, 50u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
        vec.set(2, 50u16);

        assert_eq!(vec, vec4p!(0u16, 1u16, 50u16, 3u16));
    }
    {
        let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
        vec.set(3, 50u16);

        assert_eq!(vec, vec4p!(0u16, 1u16, 2u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec4p_set_panic() {
    let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
    vec.set(4, 0u16);
}

#[test]
fn test_vec4p_try_set() {
    {
        let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec4p!(50u16, 1u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec4p!(0u16, 50u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(2, 50u16).unwrap();

        assert_eq!(vec, vec4p!(0u16, 1u16, 50u16, 3u16));
    }
    {
        let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(3, 50u16).unwrap();

        assert_eq!(vec, vec4p!(0u16, 1u16, 2u16, 50u16));
    }

    assert_eq!(
        vec4p!(0u16, 1u16, 2u16, 3u16).try_set(4, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec4p!(50u16, 1u16, 2u16, 3u16));
        }
        {
            let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec4p!(0u16, 50u16, 2u16, 3u16));
        }
        {
            let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(2, 50u16);

            assert_eq!(vec, vec4p!(0u16, 1u16, 50u16, 3u16));
        }
        {
            let mut vec = vec4p!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(3, 50u16);

            assert_eq!(vec, vec4p!(0u16, 1u16, 2u16, 50u16));
        }
    }
}

#[test]
fn test_vec4p_swizzle() {
    assert_eq!(vec4p!(0u16, 1u16, 2u16, 3u16).zw(), vec2p!(2u16, 3u16));
    assert_eq!(
        vec4p!(0u16, 1u16, 2u16, 3u16).zwy(),
        vec3p!(2u16, 3u16, 1u16)
    );
    assert_eq!(
        vec4p!(0u16, 1u16, 2u16, 3u16).zwyz(),
        vec4p!(2u16, 3u16, 1u16, 2u16)
    );
}

#[test]
fn test_vec4p_fold() {
    assert_eq!(
        vec4p!(0u16, 1u16, 2u16, 3u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16 + 2u16 + 3u16
    );
}

#[test]
fn test_vec4p_reduce() {
    assert_eq!(
        vec4p!(0u16, 1u16, 2u16, 3u16).reduce(|acc, x| acc + x),
        0u16 + 1u16 + 2u16 + 3u16
    );
}
