// This file was automatically generated by ggmath's codegen tool.
// Do not modify this file directly!

use ggmath::*;

use crate::assert_panic;

#[test]
fn test_simd_primitive_fns() {
    assert_eq!(Vec2::from_array([1u16, 2u16]).as_array(), [1u16, 2u16]);
    assert_eq!(
        Vec3::from_array([1u16, 2u16, 3u16]).as_array(),
        [1u16, 2u16, 3u16]
    );
    assert_eq!(
        Vec4::from_array([1u16, 2u16, 3u16, 4u16]).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(Vec2::from_fn(|i| [1u16, 2u16][i]).as_array(), [1u16, 2u16]);
    assert_eq!(
        Vec3::from_fn(|i| [1u16, 2u16, 3u16][i]).as_array(),
        [1u16, 2u16, 3u16]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1u16, 2u16, 3u16, 4u16][i]).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(
        Vec2::const_from_array([1u16, 2u16]).as_array(),
        [1u16, 2u16]
    );
    assert_eq!(
        Vec3::const_from_array([1u16, 2u16, 3u16]).as_array(),
        [1u16, 2u16, 3u16]
    );
    assert_eq!(
        Vec4::const_from_array([1u16, 2u16, 3u16, 4u16]).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(vec2!(1u16, 2u16).as_array(), [1u16, 2u16]);
    assert_eq!(vec2!(vec2!(1u16, 2u16)).as_array(), [1u16, 2u16]);
    assert_eq!(vec3!(1u16, 2u16, 3u16).as_array(), [1u16, 2u16, 3u16]);
    assert_eq!(
        vec3!(1u16, vec2!(2u16, 3u16)).as_array(),
        [1u16, 2u16, 3u16]
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );
    assert_eq!(
        vec4!(1u16, vec2!(2u16, 3u16), 4u16).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(vec2!(1u16).as_array(), [1u16; 2]);
    assert_eq!(vec3!(1u16).as_array(), [1u16; 3]);
    assert_eq!(vec4!(1u16).as_array(), [1u16; 4]);

    assert_eq!(vec2!(1u16, 2u16).as_array_ref(), &[1u16, 2u16]);
    assert_eq!(vec3!(1u16, 2u16, 3u16).as_array_ref(), &[1u16, 2u16, 3u16]);
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).as_array_ref(),
        &[1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(vec2!(1u16, 2u16).as_mut_array(), &mut [1u16, 2u16]);
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).as_mut_array(),
        &mut [1u16, 2u16, 3u16]
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).as_mut_array(),
        &mut [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(vec2!(1u16, 2u16).as_simd(), vec2!(1u16, 2u16));
    assert_eq!(vec3!(1u16, 2u16, 3u16).as_simd(), vec3!(1u16, 2u16, 3u16));
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).as_simd(),
        vec4!(1u16, 2u16, 3u16, 4u16)
    );

    assert_eq!(vec2!(1u16, 2u16).as_nonsimd(), vec2s!(1u16, 2u16));
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).as_nonsimd(),
        vec3s!(1u16, 2u16, 3u16)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).as_nonsimd(),
        vec4s!(1u16, 2u16, 3u16, 4u16)
    );

    assert_eq!(vec2!(1u16, 2u16).len(), 2);
    assert_eq!(vec3!(1u16, 2u16, 3u16).len(), 3);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).len(), 4);

    assert_eq!(vec2!(1u16, 2u16).is_simd(), true);
    assert_eq!(vec3!(1u16, 2u16, 3u16).is_simd(), true);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).is_simd(), true);

    assert_eq!(vec2!(1u16, 2u16).get(0), Some(1u16));
    assert_eq!(vec2!(1u16, 2u16).get(1), Some(2u16));
    assert_eq!(vec2!(1u16, 2u16).get(2), None);
    assert_eq!(vec2!(1u16, 2u16).get(3), None);

    assert_eq!(vec3!(1u16, 2u16, 3u16).get(0), Some(1u16));
    assert_eq!(vec3!(1u16, 2u16, 3u16).get(1), Some(2u16));
    assert_eq!(vec3!(1u16, 2u16, 3u16).get(2), Some(3u16));
    assert_eq!(vec3!(1u16, 2u16, 3u16).get(3), None);
    assert_eq!(vec3!(1u16, 2u16, 3u16).get(4), None);

    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get(0), Some(1u16));
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get(1), Some(2u16));
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get(2), Some(3u16));
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get(3), Some(4u16));
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get(4), None);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get(5), None);

    assert_eq!(vec2!(1u16, 2u16).get_mut(0), Some(&mut 1u16));
    assert_eq!(vec2!(1u16, 2u16).get_mut(1), Some(&mut 2u16));
    assert_eq!(vec2!(1u16, 2u16).get_mut(2), None);
    assert_eq!(vec2!(1u16, 2u16).get_mut(3), None);

    assert_eq!(vec3!(1u16, 2u16, 3u16).get_mut(0), Some(&mut 1u16));
    assert_eq!(vec3!(1u16, 2u16, 3u16).get_mut(1), Some(&mut 2u16));
    assert_eq!(vec3!(1u16, 2u16, 3u16).get_mut(2), Some(&mut 3u16));
    assert_eq!(vec3!(1u16, 2u16, 3u16).get_mut(3), None);
    assert_eq!(vec3!(1u16, 2u16, 3u16).get_mut(4), None);

    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_mut(0), Some(&mut 1u16));
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_mut(1), Some(&mut 2u16));
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_mut(2), Some(&mut 3u16));
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_mut(3), Some(&mut 4u16));
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_mut(4), None);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_mut(5), None);

    unsafe {
        assert_eq!(vec2!(1u16, 2u16).get_unchecked(0), 1u16);
        assert_eq!(vec2!(1u16, 2u16).get_unchecked(1), 2u16);

        assert_eq!(vec3!(1u16, 2u16, 3u16).get_unchecked(0), 1u16);
        assert_eq!(vec3!(1u16, 2u16, 3u16).get_unchecked(1), 2u16);
        assert_eq!(vec3!(1u16, 2u16, 3u16).get_unchecked(2), 3u16);

        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_unchecked(0), 1u16);
        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_unchecked(1), 2u16);
        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_unchecked(2), 3u16);
        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).get_unchecked(3), 4u16);

        assert_eq!(vec2!(1u16, 2u16).get_unchecked_mut(0), &mut 1u16);
        assert_eq!(vec2!(1u16, 2u16).get_unchecked_mut(1), &mut 2u16);

        assert_eq!(vec3!(1u16, 2u16, 3u16).get_unchecked_mut(0), &mut 1u16);
        assert_eq!(vec3!(1u16, 2u16, 3u16).get_unchecked_mut(1), &mut 2u16);
        assert_eq!(vec3!(1u16, 2u16, 3u16).get_unchecked_mut(2), &mut 3u16);

        assert_eq!(
            vec4!(1u16, 2u16, 3u16, 4u16).get_unchecked_mut(0),
            &mut 1u16
        );
        assert_eq!(
            vec4!(1u16, 2u16, 3u16, 4u16).get_unchecked_mut(1),
            &mut 2u16
        );
        assert_eq!(
            vec4!(1u16, 2u16, 3u16, 4u16).get_unchecked_mut(2),
            &mut 3u16
        );
        assert_eq!(
            vec4!(1u16, 2u16, 3u16, 4u16).get_unchecked_mut(3),
            &mut 4u16
        );
    }

    assert_eq!(
        vec2!(1u16, 2u16).iter().collect::<Vec<u16>>(),
        vec![1u16, 2u16]
    );
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).iter().collect::<Vec<u16>>(),
        vec![1u16, 2u16, 3u16]
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).iter().collect::<Vec<u16>>(),
        vec![1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(
        vec2!(1u16, 2u16).iter_mut().collect::<Vec<&mut u16>>(),
        vec![&mut 1u16, &mut 2u16]
    );
    assert_eq!(
        vec3!(1u16, 2u16, 3u16)
            .iter_mut()
            .collect::<Vec<&mut u16>>(),
        vec![&mut 1u16, &mut 2u16, &mut 3u16]
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16)
            .iter_mut()
            .collect::<Vec<&mut u16>>(),
        vec![&mut 1u16, &mut 2u16, &mut 3u16, &mut 4u16]
    );

    assert_eq!(vec2!(1u16, 2u16).map(|x| x == 2u16), vec2!(false, true));
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).map(|x| x == 2u16),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).map(|x| x == 2u16),
        vec4!(false, true, false, false)
    );

    assert_eq!(vec2!(1u16, 2u16).reverse(), vec2!(2u16, 1u16));
    assert_eq!(vec3!(1u16, 2u16, 3u16).reverse(), vec3!(3u16, 2u16, 1u16));
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).reverse(),
        vec4!(4u16, 3u16, 2u16, 1u16)
    );

    assert_eq!(
        vec2!(1u16, 2u16).get_const_vec2::<0, 1>(),
        vec2!(1u16, 2u16)
    );
    assert_eq!(
        vec2!(1u16, 2u16).get_const_vec2::<1, 0>(),
        vec2!(2u16, 1u16)
    );
    assert_eq!(
        vec2!(1u16, 2u16).get_const_vec2::<1, 1>(),
        vec2!(2u16, 2u16)
    );

    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec2::<0, 1>(),
        vec2!(1u16, 2u16)
    );
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec2::<0, 2>(),
        vec2!(1u16, 3u16)
    );
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec2::<2, 1>(),
        vec2!(3u16, 2u16)
    );

    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec2::<0, 1>(),
        vec2!(1u16, 2u16)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec2::<1, 3>(),
        vec2!(2u16, 4u16)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec2::<3, 1>(),
        vec2!(4u16, 2u16)
    );

    assert_eq!(
        vec2!(1u16, 2u16).get_const_vec3::<0, 1, 1>(),
        vec3!(1u16, 2u16, 2u16)
    );
    assert_eq!(
        vec2!(1u16, 2u16).get_const_vec3::<1, 0, 1>(),
        vec3!(2u16, 1u16, 2u16)
    );

    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec3::<0, 1, 2>(),
        vec3!(1u16, 2u16, 3u16)
    );
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec3::<1, 0, 2>(),
        vec3!(2u16, 1u16, 3u16)
    );
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec3::<2, 1, 0>(),
        vec3!(3u16, 2u16, 1u16)
    );

    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec3::<0, 1, 2>(),
        vec3!(1u16, 2u16, 3u16)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec3::<1, 0, 2>(),
        vec3!(2u16, 1u16, 3u16)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec3::<2, 1, 0>(),
        vec3!(3u16, 2u16, 1u16)
    );

    assert_eq!(
        vec2!(1u16, 2u16).get_const_vec4::<0, 1, 1, 0>(),
        vec4!(1u16, 2u16, 2u16, 1u16)
    );
    assert_eq!(
        vec2!(1u16, 2u16).get_const_vec4::<1, 0, 1, 0>(),
        vec4!(2u16, 1u16, 2u16, 1u16)
    );
    assert_eq!(
        vec2!(1u16, 2u16).get_const_vec4::<1, 1, 0, 0>(),
        vec4!(2u16, 2u16, 1u16, 1u16)
    );

    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec4::<0, 1, 2, 0>(),
        vec4!(1u16, 2u16, 3u16, 1u16)
    );
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec4::<1, 0, 2, 0>(),
        vec4!(2u16, 1u16, 3u16, 1u16)
    );
    assert_eq!(
        vec3!(1u16, 2u16, 3u16).get_const_vec4::<2, 1, 0, 0>(),
        vec4!(3u16, 2u16, 1u16, 1u16)
    );

    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec4::<0, 1, 2, 3>(),
        vec4!(1u16, 2u16, 3u16, 4u16)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec4::<1, 0, 2, 3>(),
        vec4!(2u16, 1u16, 3u16, 4u16)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec4::<2, 1, 0, 3>(),
        vec4!(3u16, 2u16, 1u16, 4u16)
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16).get_const_vec4::<3, 1, 2, 0>(),
        vec4!(4u16, 2u16, 3u16, 1u16)
    );

    assert_eq!(vec2!(1u16, 2u16)[0], 1u16);
    assert_eq!(vec2!(1u16, 2u16)[1], 2u16);

    assert_eq!(vec3!(1u16, 2u16, 3u16)[0], 1u16);
    assert_eq!(vec3!(1u16, 2u16, 3u16)[1], 2u16);
    assert_eq!(vec3!(1u16, 2u16, 3u16)[2], 3u16);

    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16)[0], 1u16);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16)[1], 2u16);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16)[2], 3u16);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16)[3], 4u16);

    assert_panic!(vec2!(1u16, 2u16)[2]);
    assert_panic!(vec3!(1u16, 2u16, 3u16)[3]);
    assert_panic!(vec4!(1u16, 2u16, 3u16, 4u16)[4]);

    assert_eq!(&mut vec2!(1u16, 2u16)[0], &mut 1u16);
    assert_eq!(&mut vec2!(1u16, 2u16)[1], &mut 2u16);

    assert_eq!(&mut vec3!(1u16, 2u16, 3u16)[0], &mut 1u16);
    assert_eq!(&mut vec3!(1u16, 2u16, 3u16)[1], &mut 2u16);
    assert_eq!(&mut vec3!(1u16, 2u16, 3u16)[2], &mut 3u16);

    assert_eq!(&mut vec4!(1u16, 2u16, 3u16, 4u16)[0], &mut 1u16);
    assert_eq!(&mut vec4!(1u16, 2u16, 3u16, 4u16)[1], &mut 2u16);
    assert_eq!(&mut vec4!(1u16, 2u16, 3u16, 4u16)[2], &mut 3u16);
    assert_eq!(&mut vec4!(1u16, 2u16, 3u16, 4u16)[3], &mut 4u16);

    assert_panic!(&mut vec2!(1u16, 2u16)[2]);
    assert_panic!(&mut vec3!(1u16, 2u16, 3u16)[3]);
    assert_panic!(&mut vec4!(1u16, 2u16, 3u16, 4u16)[4]);

    assert_eq!(vec2!(1u16, 2u16) == vec2!(1u16, 2u16), true);
    assert_eq!(vec2!(1u16, 2u16) == vec2!(2u16, 1u16), false);
    assert_eq!(vec2!(1u16, 2u16) == vec2!(2u16, 2u16), false);

    assert_eq!(vec3!(1u16, 2u16, 3u16) == vec3!(1u16, 2u16, 3u16), true);
    assert_eq!(vec3!(1u16, 2u16, 3u16) == vec3!(4u16, 3u16, 2u16), false);
    assert_eq!(vec3!(1u16, 2u16, 3u16) == vec3!(2u16, 2u16, 3u16), false);

    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16) == vec4!(1u16, 2u16, 3u16, 4u16),
        true
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16) == vec4!(4u16, 3u16, 2u16, 1u16),
        false
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16) == vec4!(2u16, 2u16, 2u16, 4u16),
        false
    );

    assert_eq!(vec2!(1u16, 2u16) != vec2!(1u16, 2u16), false);
    assert_eq!(vec2!(1u16, 2u16) != vec2!(2u16, 1u16), true);
    assert_eq!(vec2!(1u16, 2u16) != vec2!(2u16, 2u16), true);

    assert_eq!(vec3!(1u16, 2u16, 3u16) != vec3!(1u16, 2u16, 3u16), false);
    assert_eq!(vec3!(1u16, 2u16, 3u16) != vec3!(4u16, 3u16, 2u16), true);
    assert_eq!(vec3!(1u16, 2u16, 3u16) != vec3!(2u16, 2u16, 3u16), true);

    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16) != vec4!(1u16, 2u16, 3u16, 4u16),
        false
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16) != vec4!(4u16, 3u16, 2u16, 1u16),
        true
    );
    assert_eq!(
        vec4!(1u16, 2u16, 3u16, 4u16) != vec4!(2u16, 2u16, 2u16, 4u16),
        true
    );

    assert_eq!(vec2!(1u16, 2u16).to_string(), "(1, 2)");
    assert_eq!(vec3!(1u16, 2u16, 3u16).to_string(), "(1, 2, 3)");
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2!(1u16, 2u16)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3!(1u16, 2u16, 3u16)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4!(1u16, 2u16, 3u16, 4u16)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2!(1u16, 2u16).x, 1u16);
    assert_eq!(vec2!(1u16, 2u16).y, 2u16);

    assert_eq!(vec3!(1u16, 2u16, 3u16).x, 1u16);
    assert_eq!(vec3!(1u16, 2u16, 3u16).y, 2u16);
    assert_eq!(vec3!(1u16, 2u16, 3u16).z, 3u16);

    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).x, 1u16);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).y, 2u16);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).z, 3u16);
    assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).w, 4u16);

    assert_eq!(&mut vec2!(1u16, 2u16).x, &mut 1u16);
    assert_eq!(&mut vec2!(1u16, 2u16).y, &mut 2u16);

    assert_eq!(&mut vec3!(1u16, 2u16, 3u16).x, &mut 1u16);
    assert_eq!(&mut vec3!(1u16, 2u16, 3u16).y, &mut 2u16);
    assert_eq!(&mut vec3!(1u16, 2u16, 3u16).z, &mut 3u16);

    assert_eq!(&mut vec4!(1u16, 2u16, 3u16, 4u16).x, &mut 1u16);
    assert_eq!(&mut vec4!(1u16, 2u16, 3u16, 4u16).y, &mut 2u16);
    assert_eq!(&mut vec4!(1u16, 2u16, 3u16, 4u16).z, &mut 3u16);
    assert_eq!(&mut vec4!(1u16, 2u16, 3u16, 4u16).w, &mut 4u16);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2!(1u16, 2u16).xy(), vec2!(1u16, 2u16));
        assert_eq!(vec2!(1u16, 2u16).yx(), vec2!(2u16, 1u16));
        assert_eq!(vec2!(1u16, 2u16).yy(), vec2!(2u16, 2u16));

        assert_eq!(vec3!(1u16, 2u16, 3u16).xy(), vec2!(1u16, 2u16));
        assert_eq!(vec3!(1u16, 2u16, 3u16).xz(), vec2!(1u16, 3u16));
        assert_eq!(vec3!(1u16, 2u16, 3u16).zy(), vec2!(3u16, 2u16));

        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).xy(), vec2!(1u16, 2u16));
        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).yw(), vec2!(2u16, 4u16));
        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).wy(), vec2!(4u16, 2u16));

        assert_eq!(vec2!(1u16, 2u16).xyy(), vec3!(1u16, 2u16, 2u16));
        assert_eq!(vec2!(1u16, 2u16).yxy(), vec3!(2u16, 1u16, 2u16));

        assert_eq!(vec3!(1u16, 2u16, 3u16).xyz(), vec3!(1u16, 2u16, 3u16));
        assert_eq!(vec3!(1u16, 2u16, 3u16).yxz(), vec3!(2u16, 1u16, 3u16));
        assert_eq!(vec3!(1u16, 2u16, 3u16).zyx(), vec3!(3u16, 2u16, 1u16));

        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).xyz(), vec3!(1u16, 2u16, 3u16));
        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).yxz(), vec3!(2u16, 1u16, 3u16));
        assert_eq!(vec4!(1u16, 2u16, 3u16, 4u16).zyx(), vec3!(3u16, 2u16, 1u16));

        assert_eq!(vec2!(1u16, 2u16).xyyx(), vec4!(1u16, 2u16, 2u16, 1u16));
        assert_eq!(vec2!(1u16, 2u16).yxyx(), vec4!(2u16, 1u16, 2u16, 1u16));
        assert_eq!(vec2!(1u16, 2u16).yyxx(), vec4!(2u16, 2u16, 1u16, 1u16));

        assert_eq!(
            vec3!(1u16, 2u16, 3u16).xyzx(),
            vec4!(1u16, 2u16, 3u16, 1u16)
        );
        assert_eq!(
            vec3!(1u16, 2u16, 3u16).yxzx(),
            vec4!(2u16, 1u16, 3u16, 1u16)
        );
        assert_eq!(
            vec3!(1u16, 2u16, 3u16).zyxx(),
            vec4!(3u16, 2u16, 1u16, 1u16)
        );

        assert_eq!(
            vec4!(1u16, 2u16, 3u16, 4u16).xyzw(),
            vec4!(1u16, 2u16, 3u16, 4u16)
        );
        assert_eq!(
            vec4!(1u16, 2u16, 3u16, 4u16).yxzw(),
            vec4!(2u16, 1u16, 3u16, 4u16)
        );
        assert_eq!(
            vec4!(1u16, 2u16, 3u16, 4u16).zyxw(),
            vec4!(3u16, 2u16, 1u16, 4u16)
        );
        assert_eq!(
            vec4!(1u16, 2u16, 3u16, 4u16).wyzx(),
            vec4!(4u16, 2u16, 3u16, 1u16)
        );
    }
}

#[test]
fn test_nonsimd_primitive_fns() {
    assert_eq!(size_of::<Vec2S<u16>>(), size_of::<u16>() * 2);
    assert_eq!(size_of::<Vec3S<u16>>(), size_of::<u16>() * 3);
    assert_eq!(size_of::<Vec4S<u16>>(), size_of::<u16>() * 4);

    assert_eq!(align_of::<Vec2S<u16>>(), align_of::<u16>());
    assert_eq!(align_of::<Vec3S<u16>>(), align_of::<u16>());
    assert_eq!(align_of::<Vec4S<u16>>(), align_of::<u16>());

    assert_eq!(Vec2S::from_array([1u16, 2u16]).as_array(), [1u16, 2u16]);
    assert_eq!(
        Vec3S::from_array([1u16, 2u16, 3u16]).as_array(),
        [1u16, 2u16, 3u16]
    );
    assert_eq!(
        Vec4S::from_array([1u16, 2u16, 3u16, 4u16]).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(Vec2S::from_fn(|i| [1u16, 2u16][i]).as_array(), [1u16, 2u16]);
    assert_eq!(
        Vec3S::from_fn(|i| [1u16, 2u16, 3u16][i]).as_array(),
        [1u16, 2u16, 3u16]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1u16, 2u16, 3u16, 4u16][i]).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(
        Vec2S::const_from_array([1u16, 2u16]).as_array(),
        [1u16, 2u16]
    );
    assert_eq!(
        Vec3S::const_from_array([1u16, 2u16, 3u16]).as_array(),
        [1u16, 2u16, 3u16]
    );
    assert_eq!(
        Vec4S::const_from_array([1u16, 2u16, 3u16, 4u16]).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(vec2s!(1u16, 2u16).as_array(), [1u16, 2u16]);
    assert_eq!(vec2s!(vec2s!(1u16, 2u16)).as_array(), [1u16, 2u16]);
    assert_eq!(vec3s!(1u16, 2u16, 3u16).as_array(), [1u16, 2u16, 3u16]);
    assert_eq!(
        vec3s!(1u16, vec2s!(2u16, 3u16)).as_array(),
        [1u16, 2u16, 3u16]
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );
    assert_eq!(
        vec4s!(1u16, vec2s!(2u16, 3u16), 4u16).as_array(),
        [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(vec2s!(1u16).as_array(), [1u16; 2]);
    assert_eq!(vec3s!(1u16).as_array(), [1u16; 3]);
    assert_eq!(vec4s!(1u16).as_array(), [1u16; 4]);

    assert_eq!(vec2s!(1u16, 2u16).as_array_ref(), &[1u16, 2u16]);
    assert_eq!(vec3s!(1u16, 2u16, 3u16).as_array_ref(), &[1u16, 2u16, 3u16]);
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).as_array_ref(),
        &[1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(vec2s!(1u16, 2u16).as_mut_array(), &mut [1u16, 2u16]);
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).as_mut_array(),
        &mut [1u16, 2u16, 3u16]
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).as_mut_array(),
        &mut [1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(vec2s!(1u16, 2u16).as_simd(), vec2!(1u16, 2u16));
    assert_eq!(vec3s!(1u16, 2u16, 3u16).as_simd(), vec3!(1u16, 2u16, 3u16));
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).as_simd(),
        vec4!(1u16, 2u16, 3u16, 4u16)
    );

    assert_eq!(vec2s!(1u16, 2u16).as_nonsimd(), vec2s!(1u16, 2u16));
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).as_nonsimd(),
        vec3s!(1u16, 2u16, 3u16)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).as_nonsimd(),
        vec4s!(1u16, 2u16, 3u16, 4u16)
    );

    assert_eq!(vec2s!(1u16, 2u16).len(), 2);
    assert_eq!(vec3s!(1u16, 2u16, 3u16).len(), 3);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).len(), 4);

    assert_eq!(vec2s!(1u16, 2u16).is_simd(), false);
    assert_eq!(vec3s!(1u16, 2u16, 3u16).is_simd(), false);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).is_simd(), false);

    assert_eq!(vec2s!(1u16, 2u16).get(0), Some(1u16));
    assert_eq!(vec2s!(1u16, 2u16).get(1), Some(2u16));
    assert_eq!(vec2s!(1u16, 2u16).get(2), None);
    assert_eq!(vec2s!(1u16, 2u16).get(3), None);

    assert_eq!(vec3s!(1u16, 2u16, 3u16).get(0), Some(1u16));
    assert_eq!(vec3s!(1u16, 2u16, 3u16).get(1), Some(2u16));
    assert_eq!(vec3s!(1u16, 2u16, 3u16).get(2), Some(3u16));
    assert_eq!(vec3s!(1u16, 2u16, 3u16).get(3), None);
    assert_eq!(vec3s!(1u16, 2u16, 3u16).get(4), None);

    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get(0), Some(1u16));
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get(1), Some(2u16));
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get(2), Some(3u16));
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get(3), Some(4u16));
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get(4), None);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get(5), None);

    assert_eq!(vec2s!(1u16, 2u16).get_mut(0), Some(&mut 1u16));
    assert_eq!(vec2s!(1u16, 2u16).get_mut(1), Some(&mut 2u16));
    assert_eq!(vec2s!(1u16, 2u16).get_mut(2), None);
    assert_eq!(vec2s!(1u16, 2u16).get_mut(3), None);

    assert_eq!(vec3s!(1u16, 2u16, 3u16).get_mut(0), Some(&mut 1u16));
    assert_eq!(vec3s!(1u16, 2u16, 3u16).get_mut(1), Some(&mut 2u16));
    assert_eq!(vec3s!(1u16, 2u16, 3u16).get_mut(2), Some(&mut 3u16));
    assert_eq!(vec3s!(1u16, 2u16, 3u16).get_mut(3), None);
    assert_eq!(vec3s!(1u16, 2u16, 3u16).get_mut(4), None);

    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_mut(0), Some(&mut 1u16));
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_mut(1), Some(&mut 2u16));
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_mut(2), Some(&mut 3u16));
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_mut(3), Some(&mut 4u16));
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_mut(4), None);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_mut(5), None);

    unsafe {
        assert_eq!(vec2s!(1u16, 2u16).get_unchecked(0), 1u16);
        assert_eq!(vec2s!(1u16, 2u16).get_unchecked(1), 2u16);

        assert_eq!(vec3s!(1u16, 2u16, 3u16).get_unchecked(0), 1u16);
        assert_eq!(vec3s!(1u16, 2u16, 3u16).get_unchecked(1), 2u16);
        assert_eq!(vec3s!(1u16, 2u16, 3u16).get_unchecked(2), 3u16);

        assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_unchecked(0), 1u16);
        assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_unchecked(1), 2u16);
        assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_unchecked(2), 3u16);
        assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).get_unchecked(3), 4u16);

        assert_eq!(vec2s!(1u16, 2u16).get_unchecked_mut(0), &mut 1u16);
        assert_eq!(vec2s!(1u16, 2u16).get_unchecked_mut(1), &mut 2u16);

        assert_eq!(vec3s!(1u16, 2u16, 3u16).get_unchecked_mut(0), &mut 1u16);
        assert_eq!(vec3s!(1u16, 2u16, 3u16).get_unchecked_mut(1), &mut 2u16);
        assert_eq!(vec3s!(1u16, 2u16, 3u16).get_unchecked_mut(2), &mut 3u16);

        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).get_unchecked_mut(0),
            &mut 1u16
        );
        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).get_unchecked_mut(1),
            &mut 2u16
        );
        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).get_unchecked_mut(2),
            &mut 3u16
        );
        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).get_unchecked_mut(3),
            &mut 4u16
        );
    }

    assert_eq!(
        vec2s!(1u16, 2u16).iter().collect::<Vec<u16>>(),
        vec![1u16, 2u16]
    );
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).iter().collect::<Vec<u16>>(),
        vec![1u16, 2u16, 3u16]
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).iter().collect::<Vec<u16>>(),
        vec![1u16, 2u16, 3u16, 4u16]
    );

    assert_eq!(
        vec2s!(1u16, 2u16).iter_mut().collect::<Vec<&mut u16>>(),
        vec![&mut 1u16, &mut 2u16]
    );
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16)
            .iter_mut()
            .collect::<Vec<&mut u16>>(),
        vec![&mut 1u16, &mut 2u16, &mut 3u16]
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16)
            .iter_mut()
            .collect::<Vec<&mut u16>>(),
        vec![&mut 1u16, &mut 2u16, &mut 3u16, &mut 4u16]
    );

    assert_eq!(vec2s!(1u16, 2u16).map(|x| x == 2u16), vec2s!(false, true));
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).map(|x| x == 2u16),
        vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).map(|x| x == 2u16),
        vec4s!(false, true, false, false)
    );

    assert_eq!(vec2s!(1u16, 2u16).reverse(), vec2s!(2u16, 1u16));
    assert_eq!(vec3s!(1u16, 2u16, 3u16).reverse(), vec3s!(3u16, 2u16, 1u16));
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).reverse(),
        vec4s!(4u16, 3u16, 2u16, 1u16)
    );

    assert_eq!(
        vec2s!(1u16, 2u16).get_const_vec2::<0, 1>(),
        vec2s!(1u16, 2u16)
    );
    assert_eq!(
        vec2s!(1u16, 2u16).get_const_vec2::<1, 0>(),
        vec2s!(2u16, 1u16)
    );
    assert_eq!(
        vec2s!(1u16, 2u16).get_const_vec2::<1, 1>(),
        vec2s!(2u16, 2u16)
    );

    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec2::<0, 1>(),
        vec2s!(1u16, 2u16)
    );
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec2::<0, 2>(),
        vec2s!(1u16, 3u16)
    );
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec2::<2, 1>(),
        vec2s!(3u16, 2u16)
    );

    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec2::<0, 1>(),
        vec2s!(1u16, 2u16)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec2::<1, 3>(),
        vec2s!(2u16, 4u16)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec2::<3, 1>(),
        vec2s!(4u16, 2u16)
    );

    assert_eq!(
        vec2s!(1u16, 2u16).get_const_vec3::<0, 1, 1>(),
        vec3s!(1u16, 2u16, 2u16)
    );
    assert_eq!(
        vec2s!(1u16, 2u16).get_const_vec3::<1, 0, 1>(),
        vec3s!(2u16, 1u16, 2u16)
    );

    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec3::<0, 1, 2>(),
        vec3s!(1u16, 2u16, 3u16)
    );
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec3::<1, 0, 2>(),
        vec3s!(2u16, 1u16, 3u16)
    );
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec3::<2, 1, 0>(),
        vec3s!(3u16, 2u16, 1u16)
    );

    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec3::<0, 1, 2>(),
        vec3s!(1u16, 2u16, 3u16)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec3::<1, 0, 2>(),
        vec3s!(2u16, 1u16, 3u16)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec3::<2, 1, 0>(),
        vec3s!(3u16, 2u16, 1u16)
    );

    assert_eq!(
        vec2s!(1u16, 2u16).get_const_vec4::<0, 1, 1, 0>(),
        vec4s!(1u16, 2u16, 2u16, 1u16)
    );
    assert_eq!(
        vec2s!(1u16, 2u16).get_const_vec4::<1, 0, 1, 0>(),
        vec4s!(2u16, 1u16, 2u16, 1u16)
    );
    assert_eq!(
        vec2s!(1u16, 2u16).get_const_vec4::<1, 1, 0, 0>(),
        vec4s!(2u16, 2u16, 1u16, 1u16)
    );

    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec4::<0, 1, 2, 0>(),
        vec4s!(1u16, 2u16, 3u16, 1u16)
    );
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec4::<1, 0, 2, 0>(),
        vec4s!(2u16, 1u16, 3u16, 1u16)
    );
    assert_eq!(
        vec3s!(1u16, 2u16, 3u16).get_const_vec4::<2, 1, 0, 0>(),
        vec4s!(3u16, 2u16, 1u16, 1u16)
    );

    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec4::<0, 1, 2, 3>(),
        vec4s!(1u16, 2u16, 3u16, 4u16)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec4::<1, 0, 2, 3>(),
        vec4s!(2u16, 1u16, 3u16, 4u16)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec4::<2, 1, 0, 3>(),
        vec4s!(3u16, 2u16, 1u16, 4u16)
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16).get_const_vec4::<3, 1, 2, 0>(),
        vec4s!(4u16, 2u16, 3u16, 1u16)
    );

    assert_eq!(vec2s!(1u16, 2u16)[0], 1u16);
    assert_eq!(vec2s!(1u16, 2u16)[1], 2u16);

    assert_eq!(vec3s!(1u16, 2u16, 3u16)[0], 1u16);
    assert_eq!(vec3s!(1u16, 2u16, 3u16)[1], 2u16);
    assert_eq!(vec3s!(1u16, 2u16, 3u16)[2], 3u16);

    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16)[0], 1u16);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16)[1], 2u16);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16)[2], 3u16);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16)[3], 4u16);

    assert_panic!(vec2!(1u16, 2u16)[2]);
    assert_panic!(vec3!(1u16, 2u16, 3u16)[3]);
    assert_panic!(vec4!(1u16, 2u16, 3u16, 4u16)[4]);

    assert_eq!(&mut vec2s!(1u16, 2u16)[0], &mut 1u16);
    assert_eq!(&mut vec2s!(1u16, 2u16)[1], &mut 2u16);

    assert_eq!(&mut vec3s!(1u16, 2u16, 3u16)[0], &mut 1u16);
    assert_eq!(&mut vec3s!(1u16, 2u16, 3u16)[1], &mut 2u16);
    assert_eq!(&mut vec3s!(1u16, 2u16, 3u16)[2], &mut 3u16);

    assert_eq!(&mut vec4s!(1u16, 2u16, 3u16, 4u16)[0], &mut 1u16);
    assert_eq!(&mut vec4s!(1u16, 2u16, 3u16, 4u16)[1], &mut 2u16);
    assert_eq!(&mut vec4s!(1u16, 2u16, 3u16, 4u16)[2], &mut 3u16);
    assert_eq!(&mut vec4s!(1u16, 2u16, 3u16, 4u16)[3], &mut 4u16);

    assert_panic!(&mut vec2!(1u16, 2u16)[2]);
    assert_panic!(&mut vec3!(1u16, 2u16, 3u16)[3]);
    assert_panic!(&mut vec4!(1u16, 2u16, 3u16, 4u16)[4]);

    assert_eq!(vec2s!(1u16, 2u16) == vec2s!(1u16, 2u16), true);
    assert_eq!(vec2s!(1u16, 2u16) == vec2s!(2u16, 1u16), false);
    assert_eq!(vec2s!(1u16, 2u16) == vec2s!(2u16, 2u16), false);

    assert_eq!(vec3s!(1u16, 2u16, 3u16) == vec3s!(1u16, 2u16, 3u16), true);
    assert_eq!(vec3s!(1u16, 2u16, 3u16) == vec3s!(4u16, 3u16, 2u16), false);
    assert_eq!(vec3s!(1u16, 2u16, 3u16) == vec3s!(2u16, 2u16, 3u16), false);

    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16) == vec4s!(1u16, 2u16, 3u16, 4u16),
        true
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16) == vec4s!(4u16, 3u16, 2u16, 1u16),
        false
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16) == vec4s!(2u16, 2u16, 2u16, 4u16),
        false
    );

    assert_eq!(vec2s!(1u16, 2u16) != vec2s!(1u16, 2u16), false);
    assert_eq!(vec2s!(1u16, 2u16) != vec2s!(2u16, 1u16), true);
    assert_eq!(vec2s!(1u16, 2u16) != vec2s!(2u16, 2u16), true);

    assert_eq!(vec3s!(1u16, 2u16, 3u16) != vec3s!(1u16, 2u16, 3u16), false);
    assert_eq!(vec3s!(1u16, 2u16, 3u16) != vec3s!(4u16, 3u16, 2u16), true);
    assert_eq!(vec3s!(1u16, 2u16, 3u16) != vec3s!(2u16, 2u16, 3u16), true);

    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16) != vec4s!(1u16, 2u16, 3u16, 4u16),
        false
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16) != vec4s!(4u16, 3u16, 2u16, 1u16),
        true
    );
    assert_eq!(
        vec4s!(1u16, 2u16, 3u16, 4u16) != vec4s!(2u16, 2u16, 2u16, 4u16),
        true
    );

    assert_eq!(vec2s!(1u16, 2u16).to_string(), "(1, 2)");
    assert_eq!(vec3s!(1u16, 2u16, 3u16).to_string(), "(1, 2, 3)");
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2s!(1u16, 2u16)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3s!(1u16, 2u16, 3u16)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4s!(1u16, 2u16, 3u16, 4u16)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2s!(1u16, 2u16).x, 1u16);
    assert_eq!(vec2s!(1u16, 2u16).y, 2u16);

    assert_eq!(vec3s!(1u16, 2u16, 3u16).x, 1u16);
    assert_eq!(vec3s!(1u16, 2u16, 3u16).y, 2u16);
    assert_eq!(vec3s!(1u16, 2u16, 3u16).z, 3u16);

    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).x, 1u16);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).y, 2u16);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).z, 3u16);
    assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).w, 4u16);

    assert_eq!(&mut vec2s!(1u16, 2u16).x, &mut 1u16);
    assert_eq!(&mut vec2s!(1u16, 2u16).y, &mut 2u16);

    assert_eq!(&mut vec3s!(1u16, 2u16, 3u16).x, &mut 1u16);
    assert_eq!(&mut vec3s!(1u16, 2u16, 3u16).y, &mut 2u16);
    assert_eq!(&mut vec3s!(1u16, 2u16, 3u16).z, &mut 3u16);

    assert_eq!(&mut vec4s!(1u16, 2u16, 3u16, 4u16).x, &mut 1u16);
    assert_eq!(&mut vec4s!(1u16, 2u16, 3u16, 4u16).y, &mut 2u16);
    assert_eq!(&mut vec4s!(1u16, 2u16, 3u16, 4u16).z, &mut 3u16);
    assert_eq!(&mut vec4s!(1u16, 2u16, 3u16, 4u16).w, &mut 4u16);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2s!(1u16, 2u16).xy(), vec2s!(1u16, 2u16));
        assert_eq!(vec2s!(1u16, 2u16).yx(), vec2s!(2u16, 1u16));
        assert_eq!(vec2s!(1u16, 2u16).yy(), vec2s!(2u16, 2u16));

        assert_eq!(vec3s!(1u16, 2u16, 3u16).xy(), vec2s!(1u16, 2u16));
        assert_eq!(vec3s!(1u16, 2u16, 3u16).xz(), vec2s!(1u16, 3u16));
        assert_eq!(vec3s!(1u16, 2u16, 3u16).zy(), vec2s!(3u16, 2u16));

        assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).xy(), vec2s!(1u16, 2u16));
        assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).yw(), vec2s!(2u16, 4u16));
        assert_eq!(vec4s!(1u16, 2u16, 3u16, 4u16).wy(), vec2s!(4u16, 2u16));

        assert_eq!(vec2s!(1u16, 2u16).xyy(), vec3s!(1u16, 2u16, 2u16));
        assert_eq!(vec2s!(1u16, 2u16).yxy(), vec3s!(2u16, 1u16, 2u16));

        assert_eq!(vec3s!(1u16, 2u16, 3u16).xyz(), vec3s!(1u16, 2u16, 3u16));
        assert_eq!(vec3s!(1u16, 2u16, 3u16).yxz(), vec3s!(2u16, 1u16, 3u16));
        assert_eq!(vec3s!(1u16, 2u16, 3u16).zyx(), vec3s!(3u16, 2u16, 1u16));

        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).xyz(),
            vec3s!(1u16, 2u16, 3u16)
        );
        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).yxz(),
            vec3s!(2u16, 1u16, 3u16)
        );
        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).zyx(),
            vec3s!(3u16, 2u16, 1u16)
        );

        assert_eq!(vec2s!(1u16, 2u16).xyyx(), vec4s!(1u16, 2u16, 2u16, 1u16));
        assert_eq!(vec2s!(1u16, 2u16).yxyx(), vec4s!(2u16, 1u16, 2u16, 1u16));
        assert_eq!(vec2s!(1u16, 2u16).yyxx(), vec4s!(2u16, 2u16, 1u16, 1u16));

        assert_eq!(
            vec3s!(1u16, 2u16, 3u16).xyzx(),
            vec4s!(1u16, 2u16, 3u16, 1u16)
        );
        assert_eq!(
            vec3s!(1u16, 2u16, 3u16).yxzx(),
            vec4s!(2u16, 1u16, 3u16, 1u16)
        );
        assert_eq!(
            vec3s!(1u16, 2u16, 3u16).zyxx(),
            vec4s!(3u16, 2u16, 1u16, 1u16)
        );

        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).xyzw(),
            vec4s!(1u16, 2u16, 3u16, 4u16)
        );
        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).yxzw(),
            vec4s!(2u16, 1u16, 3u16, 4u16)
        );
        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).zyxw(),
            vec4s!(3u16, 2u16, 1u16, 4u16)
        );
        assert_eq!(
            vec4s!(1u16, 2u16, 3u16, 4u16).wyzx(),
            vec4s!(4u16, 2u16, 3u16, 1u16)
        );
    }
}
use crate::assert_debug_panic;

#[test]
fn test_simd_int_fns() {
    assert_eq!(Vec2::ZERO, vec2!(0u16, 0u16));
    assert_eq!(Vec3::ZERO, vec3!(0u16, 0u16, 0u16));
    assert_eq!(Vec4::ZERO, vec4!(0u16, 0u16, 0u16, 0u16));

    assert_eq!(Vec2::ONE, vec2!(1u16, 1u16));
    assert_eq!(Vec3::ONE, vec3!(1u16, 1u16, 1u16));
    assert_eq!(Vec4::ONE, vec4!(1u16, 1u16, 1u16, 1u16));

    assert_eq!(Vec2::X, vec2!(1u16, 0u16));
    assert_eq!(Vec3::Y, vec3!(0u16, 1u16, 0u16));
    assert_eq!(Vec4::Z, vec4!(0u16, 0u16, 1u16, 0u16));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2::<u16>::RIGHT, Vec2::<u16>::X);
        assert_eq!(Vec3::<u16>::RIGHT, Vec3::<u16>::X);
        assert_eq!(Vec4::<u16>::RIGHT, Vec4::<u16>::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2::<u16>::LEFT, Vec2::<u16>::X);
        assert_eq!(Vec3::<u16>::LEFT, Vec3::<u16>::X);
        assert_eq!(Vec4::<u16>::LEFT, Vec4::<u16>::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3::<u16>::BACKWARDS, Vec3::<u16>::Z);
        assert_eq!(Vec4::<u16>::BACKWARDS, Vec4::<u16>::Z);
    }

    assert_eq!(!vec2!(5u16, 7u16), vec2!(!5u16, !7u16));
    assert_eq!(!vec3!(5u16, 7u16, 9u16), vec3!(!5u16, !7u16, !9u16));
    assert_eq!(
        !vec4!(5u16, 7u16, 9u16, 11u16),
        vec4!(!5u16, !7u16, !9u16, !11u16)
    );

    assert_eq!(
        vec2!(5u16, 7u16) + vec2!(9u16, 11u16),
        vec2!(5u16 + 9u16, 7u16 + 11u16)
    );
    assert_eq!(
        vec3!(5u16, 7u16, 9u16) + vec3!(11u16, 13u16, 15u16),
        vec3!(5u16 + 11u16, 7u16 + 13u16, 9u16 + 15u16)
    );
    assert_eq!(
        vec4!(5u16, 7u16, 9u16, 11u16) + vec4!(13u16, 15u16, 17u16, 19u16),
        vec4!(5u16 + 13u16, 7u16 + 15u16, 9u16 + 17u16, 11u16 + 19u16)
    );

    assert_eq!(
        vec2!(9u16, 11u16) - vec2!(5u16, 7u16),
        vec2!(9u16 - 5u16, 11u16 - 7u16)
    );
    assert_eq!(
        vec3!(9u16, 11u16, 13u16) - vec3!(5u16, 7u16, 9u16),
        vec3!(9u16 - 5u16, 11u16 - 7u16, 13u16 - 9u16)
    );
    assert_eq!(
        vec4!(9u16, 11u16, 13u16, 15u16) - vec4!(5u16, 7u16, 9u16, 11u16),
        vec4!(9u16 - 5u16, 11u16 - 7u16, 13u16 - 9u16, 15u16 - 11u16)
    );

    assert_eq!(
        vec2!(2u16, 4u16) * vec2!(3u16, 5u16),
        vec2!(2u16 * 3u16, 4u16 * 5u16)
    );
    assert_eq!(
        vec3!(2u16, 4u16, 6u16) * vec3!(3u16, 5u16, 7u16),
        vec3!(2u16 * 3u16, 4u16 * 5u16, 6u16 * 7u16)
    );
    assert_eq!(
        vec4!(2u16, 4u16, 6u16, 8u16) * vec4!(3u16, 5u16, 7u16, 9u16),
        vec4!(2u16 * 3u16, 4u16 * 5u16, 6u16 * 7u16, 8u16 * 9u16)
    );

    assert_eq!(
        vec2!(21u16, 23u16) / vec2!(4u16, 50u16),
        vec2!(21u16 / 4u16, 23u16 / 50u16)
    );
    assert_eq!(
        vec3!(21u16, 23u16, 25u16) / vec3!(4u16, 50u16, 3u16),
        vec3!(21u16 / 4u16, 23u16 / 50u16, 25u16 / 3u16)
    );
    assert_eq!(
        vec4!(21u16, 23u16, 25u16, 27u16) / vec4!(4u16, 50u16, 3u16, 10u16),
        vec4!(21u16 / 4u16, 23u16 / 50u16, 25u16 / 3u16, 27u16 / 10u16)
    );

    assert_eq!(
        vec2!(16u16, 19u16) / vec2!(5u16, 5u16),
        vec2!(16u16 / 5u16, 19u16 / 5u16)
    );
    assert_eq!(
        vec3!(16u16, 19u16, 22u16) / vec3!(5u16, 5u16, 5u16),
        vec3!(16u16 / 5u16, 19u16 / 5u16, 22u16 / 5u16)
    );
    assert_eq!(
        vec4!(16u16, 19u16, 22u16, 25u16) / vec4!(5u16, 5u16, 5u16, 5u16),
        vec4!(16u16 / 5u16, 19u16 / 5u16, 22u16 / 5u16, 25u16 / 5u16)
    );

    assert_eq!(
        vec2!(21u16, 23u16) % vec2!(4u16, 50u16),
        vec2!(21u16 % 4u16, 23u16 % 50u16)
    );
    assert_eq!(
        vec3!(21u16, 23u16, 25u16) % vec3!(4u16, 50u16, 3u16),
        vec3!(21u16 % 4u16, 23u16 % 50u16, 25u16 % 3u16)
    );
    assert_eq!(
        vec4!(21u16, 23u16, 25u16, 27u16) % vec4!(4u16, 50u16, 3u16, 10u16),
        vec4!(21u16 % 4u16, 23u16 % 50u16, 25u16 % 3u16, 27u16 % 10u16)
    );

    assert_eq!(
        vec2!(21u16, 23u16) & vec2!(4u16, 50u16),
        vec2!(21u16 & 4u16, 23u16 & 50u16)
    );
    assert_eq!(
        vec3!(21u16, 23u16, 25u16) & vec3!(4u16, 50u16, 3u16),
        vec3!(21u16 & 4u16, 23u16 & 50u16, 25u16 & 3u16)
    );
    assert_eq!(
        vec4!(21u16, 23u16, 25u16, 27u16) & vec4!(4u16, 50u16, 3u16, 10u16),
        vec4!(21u16 & 4u16, 23u16 & 50u16, 25u16 & 3u16, 27u16 & 10u16)
    );

    assert_eq!(
        vec2!(21u16, 23u16) | vec2!(4u16, 50u16),
        vec2!(21u16 | 4u16, 23u16 | 50u16)
    );
    assert_eq!(
        vec3!(21u16, 23u16, 25u16) | vec3!(4u16, 50u16, 3u16),
        vec3!(21u16 | 4u16, 23u16 | 50u16, 25u16 | 3u16)
    );
    assert_eq!(
        vec4!(21u16, 23u16, 25u16, 27u16) | vec4!(4u16, 50u16, 3u16, 10u16),
        vec4!(21u16 | 4u16, 23u16 | 50u16, 25u16 | 3u16, 27u16 | 10u16)
    );

    assert_eq!(
        vec2!(21u16, 23u16) ^ vec2!(4u16, 50u16),
        vec2!(21u16 ^ 4u16, 23u16 ^ 50u16)
    );
    assert_eq!(
        vec3!(21u16, 23u16, 25u16) ^ vec3!(4u16, 50u16, 3u16),
        vec3!(21u16 ^ 4u16, 23u16 ^ 50u16, 25u16 ^ 3u16)
    );
    assert_eq!(
        vec4!(21u16, 23u16, 25u16, 27u16) ^ vec4!(4u16, 50u16, 3u16, 10u16),
        vec4!(21u16 ^ 4u16, 23u16 ^ 50u16, 25u16 ^ 3u16, 27u16 ^ 10u16)
    );

    assert_debug_panic!(assert_eq!(
        vec2!(1u16, u16::MAX) + vec2!(1u16, 3u16),
        vec2!(2u16, u16::MAX + 3u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1u16, u16::MAX, 1u16) + vec3!(1u16, 3u16, 1u16),
        vec3!(2u16, u16::MAX + 3u16, 2u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1u16, u16::MAX, 1u16, 1u16) + vec4!(1u16, 3u16, 1u16, 1u16),
        vec4!(2u16, u16::MAX + 3u16, 2u16, 2u16)
    ));

    assert_debug_panic!(assert_eq!(
        vec2!(1u16, u16::MAX) + vec2!(1u16),
        vec2!(2u16, u16::MAX + 1u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1u16, u16::MAX, 1u16) + vec3!(1u16),
        vec3!(2u16, u16::MAX + 1u16, 2u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1u16, u16::MAX, 1u16, 1u16) + vec4!(1u16),
        vec4!(2u16, u16::MAX + 1u16, 2u16, 2u16)
    ));

    assert_debug_panic!(assert_eq!(
        vec2!(1u16, u16::MIN) - vec2!(1u16, 3u16),
        vec2!(0u16, u16::MIN - 3u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1u16, u16::MIN, 1u16) - vec3!(1u16, 3u16, 1u16),
        vec3!(0u16, u16::MIN - 3u16, 0u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1u16, u16::MIN, 1u16, 1u16) - vec4!(1u16, 3u16, 1u16, 1u16),
        vec4!(0u16, u16::MIN - 3u16, 0u16, 0u16)
    ));

    assert_debug_panic!(assert_eq!(
        vec2!(1u16, u16::MIN) - vec2!(1u16),
        vec2!(0u16, u16::MIN - 1u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1u16, u16::MIN, 1u16) - vec3!(1u16),
        vec3!(0u16, u16::MIN - 1u16, 0u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1u16, u16::MIN, 1u16, 1u16) - vec4!(1u16),
        vec4!(0u16, u16::MIN - 1u16, 0u16, 0u16)
    ));

    assert_debug_panic!(assert_eq!(
        vec2!(1u16, u16::MAX) * vec2!(1u16, 3u16),
        vec2!(1u16, u16::MAX * 3u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1u16, u16::MAX, 1u16) * vec3!(1u16, 3u16, 1u16),
        vec3!(1u16, u16::MAX * 3u16, 1u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1u16, u16::MAX, 1u16, 1u16) * vec4!(1u16, 3u16, 1u16, 1u16),
        vec4!(1u16, u16::MAX * 3u16, 1u16, 1u16)
    ));

    assert_panic!(vec2!(5u16) / vec2!(1u16, 0u16));
    assert_panic!(vec3!(5u16) / vec3!(1u16, 0u16, 1u16));
    assert_panic!(vec4!(5u16) / vec4!(1u16, 0u16, 1u16, 1u16));

    assert_panic!(vec2!(5u16) % vec2!(1u16, 0u16));
    assert_panic!(vec3!(5u16) % vec3!(1u16, 0u16, 1u16));
    assert_panic!(vec4!(5u16) % vec4!(1u16, 0u16, 1u16, 1u16));
}

#[test]
fn test_nonsimd_int_fns() {
    assert_eq!(Vec2S::ZERO, vec2s!(0u16, 0u16));
    assert_eq!(Vec3S::ZERO, vec3s!(0u16, 0u16, 0u16));
    assert_eq!(Vec4S::ZERO, vec4s!(0u16, 0u16, 0u16, 0u16));

    assert_eq!(Vec2S::ONE, vec2s!(1u16, 1u16));
    assert_eq!(Vec3S::ONE, vec3s!(1u16, 1u16, 1u16));
    assert_eq!(Vec4S::ONE, vec4s!(1u16, 1u16, 1u16, 1u16));

    assert_eq!(Vec2S::X, vec2s!(1u16, 0u16));
    assert_eq!(Vec3S::Y, vec3s!(0u16, 1u16, 0u16));
    assert_eq!(Vec4S::Z, vec4s!(0u16, 0u16, 1u16, 0u16));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2S::<u16>::RIGHT, Vec2S::<u16>::X);
        assert_eq!(Vec3S::<u16>::RIGHT, Vec3S::<u16>::X);
        assert_eq!(Vec4S::<u16>::RIGHT, Vec4S::<u16>::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2S::<u16>::LEFT, Vec2S::<u16>::X);
        assert_eq!(Vec3S::<u16>::LEFT, Vec3S::<u16>::X);
        assert_eq!(Vec4S::<u16>::LEFT, Vec4S::<u16>::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3S::<u16>::BACKWARDS, Vec3S::<u16>::Z);
        assert_eq!(Vec4S::<u16>::BACKWARDS, Vec4S::<u16>::Z);
    }

    assert_eq!(!vec2s!(5u16, 7u16), vec2s!(!5u16, !7u16));
    assert_eq!(!vec3s!(5u16, 7u16, 9u16), vec3s!(!5u16, !7u16, !9u16));
    assert_eq!(
        !vec4s!(5u16, 7u16, 9u16, 11u16),
        vec4s!(!5u16, !7u16, !9u16, !11u16)
    );

    assert_eq!(
        vec2s!(5u16, 7u16) + vec2s!(9u16, 11u16),
        vec2s!(5u16 + 9u16, 7u16 + 11u16)
    );
    assert_eq!(
        vec3s!(5u16, 7u16, 9u16) + vec3s!(11u16, 13u16, 15u16),
        vec3s!(5u16 + 11u16, 7u16 + 13u16, 9u16 + 15u16)
    );
    assert_eq!(
        vec4s!(5u16, 7u16, 9u16, 11u16) + vec4s!(13u16, 15u16, 17u16, 19u16),
        vec4s!(5u16 + 13u16, 7u16 + 15u16, 9u16 + 17u16, 11u16 + 19u16)
    );

    assert_eq!(
        vec2s!(9u16, 11u16) - vec2s!(5u16, 7u16),
        vec2s!(9u16 - 5u16, 11u16 - 7u16)
    );
    assert_eq!(
        vec3s!(9u16, 11u16, 13u16) - vec3s!(5u16, 7u16, 9u16),
        vec3s!(9u16 - 5u16, 11u16 - 7u16, 13u16 - 9u16)
    );
    assert_eq!(
        vec4s!(9u16, 11u16, 13u16, 15u16) - vec4s!(5u16, 7u16, 9u16, 11u16),
        vec4s!(9u16 - 5u16, 11u16 - 7u16, 13u16 - 9u16, 15u16 - 11u16)
    );

    assert_eq!(
        vec2s!(2u16, 4u16) * vec2s!(3u16, 5u16),
        vec2s!(2u16 * 3u16, 4u16 * 5u16)
    );
    assert_eq!(
        vec3s!(2u16, 4u16, 6u16) * vec3s!(3u16, 5u16, 7u16),
        vec3s!(2u16 * 3u16, 4u16 * 5u16, 6u16 * 7u16)
    );
    assert_eq!(
        vec4s!(2u16, 4u16, 6u16, 8u16) * vec4s!(3u16, 5u16, 7u16, 9u16),
        vec4s!(2u16 * 3u16, 4u16 * 5u16, 6u16 * 7u16, 8u16 * 9u16)
    );

    assert_eq!(
        vec2s!(21u16, 23u16) / vec2s!(4u16, 50u16),
        vec2s!(21u16 / 4u16, 23u16 / 50u16)
    );
    assert_eq!(
        vec3s!(21u16, 23u16, 25u16) / vec3s!(4u16, 50u16, 3u16),
        vec3s!(21u16 / 4u16, 23u16 / 50u16, 25u16 / 3u16)
    );
    assert_eq!(
        vec4s!(21u16, 23u16, 25u16, 27u16) / vec4s!(4u16, 50u16, 3u16, 10u16),
        vec4s!(21u16 / 4u16, 23u16 / 50u16, 25u16 / 3u16, 27u16 / 10u16)
    );

    assert_eq!(
        vec2s!(16u16, 19u16) / vec2s!(5u16, 5u16),
        vec2s!(16u16 / 5u16, 19u16 / 5u16)
    );
    assert_eq!(
        vec3s!(16u16, 19u16, 22u16) / vec3s!(5u16, 5u16, 5u16),
        vec3s!(16u16 / 5u16, 19u16 / 5u16, 22u16 / 5u16)
    );
    assert_eq!(
        vec4s!(16u16, 19u16, 22u16, 25u16) / vec4s!(5u16, 5u16, 5u16, 5u16),
        vec4s!(16u16 / 5u16, 19u16 / 5u16, 22u16 / 5u16, 25u16 / 5u16)
    );

    assert_eq!(
        vec2s!(21u16, 23u16) % vec2s!(4u16, 50u16),
        vec2s!(21u16 % 4u16, 23u16 % 50u16)
    );
    assert_eq!(
        vec3s!(21u16, 23u16, 25u16) % vec3s!(4u16, 50u16, 3u16),
        vec3s!(21u16 % 4u16, 23u16 % 50u16, 25u16 % 3u16)
    );
    assert_eq!(
        vec4s!(21u16, 23u16, 25u16, 27u16) % vec4s!(4u16, 50u16, 3u16, 10u16),
        vec4s!(21u16 % 4u16, 23u16 % 50u16, 25u16 % 3u16, 27u16 % 10u16)
    );

    assert_eq!(
        vec2s!(21u16, 23u16) & vec2s!(4u16, 50u16),
        vec2s!(21u16 & 4u16, 23u16 & 50u16)
    );
    assert_eq!(
        vec3s!(21u16, 23u16, 25u16) & vec3s!(4u16, 50u16, 3u16),
        vec3s!(21u16 & 4u16, 23u16 & 50u16, 25u16 & 3u16)
    );
    assert_eq!(
        vec4s!(21u16, 23u16, 25u16, 27u16) & vec4s!(4u16, 50u16, 3u16, 10u16),
        vec4s!(21u16 & 4u16, 23u16 & 50u16, 25u16 & 3u16, 27u16 & 10u16)
    );

    assert_eq!(
        vec2s!(21u16, 23u16) | vec2s!(4u16, 50u16),
        vec2s!(21u16 | 4u16, 23u16 | 50u16)
    );
    assert_eq!(
        vec3s!(21u16, 23u16, 25u16) | vec3s!(4u16, 50u16, 3u16),
        vec3s!(21u16 | 4u16, 23u16 | 50u16, 25u16 | 3u16)
    );
    assert_eq!(
        vec4s!(21u16, 23u16, 25u16, 27u16) | vec4s!(4u16, 50u16, 3u16, 10u16),
        vec4s!(21u16 | 4u16, 23u16 | 50u16, 25u16 | 3u16, 27u16 | 10u16)
    );

    assert_eq!(
        vec2s!(21u16, 23u16) ^ vec2s!(4u16, 50u16),
        vec2s!(21u16 ^ 4u16, 23u16 ^ 50u16)
    );
    assert_eq!(
        vec3s!(21u16, 23u16, 25u16) ^ vec3s!(4u16, 50u16, 3u16),
        vec3s!(21u16 ^ 4u16, 23u16 ^ 50u16, 25u16 ^ 3u16)
    );
    assert_eq!(
        vec4s!(21u16, 23u16, 25u16, 27u16) ^ vec4s!(4u16, 50u16, 3u16, 10u16),
        vec4s!(21u16 ^ 4u16, 23u16 ^ 50u16, 25u16 ^ 3u16, 27u16 ^ 10u16)
    );

    assert_debug_panic!(assert_eq!(
        vec2s!(1u16, u16::MAX) + vec2s!(1u16, 3u16),
        vec2s!(2u16, u16::MAX + 3u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1u16, u16::MAX, 1u16) + vec3s!(1u16, 3u16, 1u16),
        vec3s!(2u16, u16::MAX + 3u16, 2u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1u16, u16::MAX, 1u16, 1u16) + vec4s!(1u16, 3u16, 1u16, 1u16),
        vec4s!(2u16, u16::MAX + 3u16, 2u16, 2u16)
    ));

    assert_debug_panic!(assert_eq!(
        vec2s!(1u16, u16::MAX) + vec2s!(1u16),
        vec2s!(2u16, u16::MAX + 1u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1u16, u16::MAX, 1u16) + vec3s!(1u16),
        vec3s!(2u16, u16::MAX + 1u16, 2u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1u16, u16::MAX, 1u16, 1u16) + vec4s!(1u16),
        vec4s!(2u16, u16::MAX + 1u16, 2u16, 2u16)
    ));

    assert_debug_panic!(assert_eq!(
        vec2s!(1u16, u16::MIN) - vec2s!(1u16, 3u16),
        vec2s!(0u16, u16::MIN - 3u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1u16, u16::MIN, 1u16) - vec3s!(1u16, 3u16, 1u16),
        vec3s!(0u16, u16::MIN - 3u16, 0u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1u16, u16::MIN, 1u16, 1u16) - vec4s!(1u16, 3u16, 1u16, 1u16),
        vec4s!(0u16, u16::MIN - 3u16, 0u16, 0u16)
    ));

    assert_debug_panic!(assert_eq!(
        vec2s!(1u16, u16::MIN) - vec2s!(1u16),
        vec2s!(0u16, u16::MIN - 1u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1u16, u16::MIN, 1u16) - vec3s!(1u16),
        vec3s!(0u16, u16::MIN - 1u16, 0u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1u16, u16::MIN, 1u16, 1u16) - vec4s!(1u16),
        vec4s!(0u16, u16::MIN - 1u16, 0u16, 0u16)
    ));

    assert_debug_panic!(assert_eq!(
        vec2s!(1u16, u16::MAX) * vec2s!(1u16, 3u16),
        vec2s!(1u16, u16::MAX * 3u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1u16, u16::MAX, 1u16) * vec3s!(1u16, 3u16, 1u16),
        vec3s!(1u16, u16::MAX * 3u16, 1u16)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1u16, u16::MAX, 1u16, 1u16) * vec4s!(1u16, 3u16, 1u16, 1u16),
        vec4s!(1u16, u16::MAX * 3u16, 1u16, 1u16)
    ));

    assert_panic!(vec2s!(5u16) / vec2s!(1u16, 0u16));
    assert_panic!(vec3s!(5u16) / vec3s!(1u16, 0u16, 1u16));
    assert_panic!(vec4s!(5u16) / vec4s!(1u16, 0u16, 1u16, 1u16));

    assert_panic!(vec2s!(5u16) % vec2s!(1u16, 0u16));
    assert_panic!(vec3s!(5u16) % vec3s!(1u16, 0u16, 1u16));
    assert_panic!(vec4s!(5u16) % vec4s!(1u16, 0u16, 1u16, 1u16));
}
