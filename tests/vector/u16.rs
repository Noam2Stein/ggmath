// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<u16>>() == size_of::<[u16; 2]>());

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(0u16, 1u16).align(), vec2!(0u16, 1u16));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(0u16, 1u16).pack(), vec2p!(0u16, 1u16));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(Vec2::from_array([0u16, 1u16]).as_array(), [0u16, 1u16]);
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(0u16), vec2!(0u16, 0u16));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(0u16, 1u16).index(0), 0u16);
    assert_eq!(vec2!(0u16, 1u16).index(1), 1u16);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(0u16, 1u16).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(0u16, 1u16).get(0), Some(0u16));
    assert_eq!(vec2!(0u16, 1u16).get(1), Some(1u16));

    assert_eq!(vec2!(0u16, 1u16).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(0u16, 1u16).get_unchecked(0), 0u16);
        assert_eq!(vec2!(0u16, 1u16).get_unchecked(1), 1u16);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(0u16, 1u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec2!(50u16, 1u16));
    }
    {
        let mut vec = vec2!(0u16, 1u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec2!(0u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(0u16, 1u16);
    vec.set(2, 0u16);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(0u16, 1u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec2!(50u16, 1u16));
    }
    {
        let mut vec = vec2!(0u16, 1u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec2!(0u16, 50u16));
    }

    assert_eq!(
        vec2!(0u16, 1u16).try_set(2, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(0u16, 1u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec2!(50u16, 1u16));
        }
        {
            let mut vec = vec2!(0u16, 1u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec2!(0u16, 50u16));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(0u16, 1u16).y(), 1u16);
    assert_eq!(vec2!(0u16, 1u16).yx(), vec2!(1u16, 0u16));
    assert_eq!(vec2!(0u16, 1u16).yxy(), vec3!(1u16, 0u16, 1u16));
    assert_eq!(vec2!(0u16, 1u16).yxyy(), vec4!(1u16, 0u16, 1u16, 1u16));
}

#[test]
fn test_vec2_with_swizzle() {
    assert_eq!(vec2!(0u16, 1u16).with_y(0u16), vec2!(0u16, 0u16));
    assert_eq!(
        vec2!(0u16, 1u16).with_yx(vec2!(0u16, 1u16)),
        vec2!(1u16, 0u16)
    );
}

#[test]
fn test_vec2_fold() {
    assert_eq!(
        vec2!(0u16, 1u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16
    );
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(vec2!(0u16, 1u16).reduce(|acc, x| acc + x), 0u16 + 1u16);
}

#[test]
fn test_vec2_eq_mask() {
    assert_eq!(
        vec2!(0u16, 1u16).eq_mask(vec2!(0u16, 1u16)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0u16, 1u16).eq_mask(vec2!(0u16, 0u16)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0u16, 1u16).eq_mask(vec2!(2u16, 3u16)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ne_mask() {
    assert_eq!(
        vec2!(0u16, 1u16).ne_mask(vec2!(0u16, 1u16)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0u16, 1u16).ne_mask(vec2!(0u16, 0u16)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0u16, 1u16).ne_mask(vec2!(2u16, 3u16)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_lt_mask() {
    assert_eq!(
        vec2!(0u16, 1u16).lt_mask(vec2!(0u16, 1u16)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0u16, 1u16).lt_mask(vec2!(1u16, 0u16)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0u16, 1u16).lt_mask(vec2!(2u16, 3u16)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2u16, 3u16).lt_mask(vec2!(0u16, 1u16)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_gt_mask() {
    assert_eq!(
        vec2!(0u16, 1u16).gt_mask(vec2!(0u16, 1u16)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0u16, 1u16).gt_mask(vec2!(1u16, 0u16)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0u16, 1u16).gt_mask(vec2!(2u16, 3u16)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2u16, 3u16).gt_mask(vec2!(0u16, 1u16)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_le_mask() {
    assert_eq!(
        vec2!(0u16, 1u16).le_mask(vec2!(0u16, 1u16)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0u16, 1u16).le_mask(vec2!(1u16, 0u16)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0u16, 1u16).le_mask(vec2!(2u16, 3u16)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2u16, 3u16).le_mask(vec2!(0u16, 1u16)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ge_mask() {
    assert_eq!(
        vec2!(0u16, 1u16).ge_mask(vec2!(0u16, 1u16)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0u16, 1u16).ge_mask(vec2!(1u16, 0u16)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0u16, 1u16).ge_mask(vec2!(2u16, 3u16)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2u16, 3u16).ge_mask(vec2!(0u16, 1u16)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_eq() {
    assert_eq!(vec2!(0u16, 1u16) == vec2!(0u16, 1u16), true);
    assert_eq!(vec2!(0u16, 1u16) == vec2!(0u16, 0u16), false);
    assert_eq!(vec2!(0u16, 1u16) == vec2!(2u16, 3u16), false);
}

#[test]
fn test_vec2_ne() {
    assert_eq!(vec2!(0u16, 1u16) != vec2!(0u16, 1u16), false);
    assert_eq!(vec2!(0u16, 1u16) != vec2!(0u16, 0u16), true);
    assert_eq!(vec2!(0u16, 1u16) != vec2!(2u16, 3u16), true);
}

#[test]
fn test_vec2_debug() {
    assert_eq!(format!("{:?}", vec2!(0u16, 1u16)), "(0, 1)");
}

#[test]
fn test_vec2_display() {
    assert_eq!(format!("{}", vec2!(0u16, 1u16)), "(0, 1)");
}

const _: () = assert!(size_of::<Vec3P<u16>>() == size_of::<[u16; 3]>());

#[test]
fn test_vec3_align() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).align(), vec3!(0u16, 1u16, 2u16));
}

#[test]
fn test_vec3_pack() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).pack(), vec3p!(0u16, 1u16, 2u16));
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([0u16, 1u16, 2u16]).as_array(),
        [0u16, 1u16, 2u16]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(0u16), vec3!(0u16, 0u16, 0u16));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).index(0), 0u16);
    assert_eq!(vec3!(0u16, 1u16, 2u16).index(1), 1u16);
    assert_eq!(vec3!(0u16, 1u16, 2u16).index(2), 2u16);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(0u16, 1u16, 2u16).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).get(0), Some(0u16));
    assert_eq!(vec3!(0u16, 1u16, 2u16).get(1), Some(1u16));
    assert_eq!(vec3!(0u16, 1u16, 2u16).get(2), Some(2u16));

    assert_eq!(vec3!(0u16, 1u16, 2u16).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(0u16, 1u16, 2u16).get_unchecked(0), 0u16);
        assert_eq!(vec3!(0u16, 1u16, 2u16).get_unchecked(1), 1u16);
        assert_eq!(vec3!(0u16, 1u16, 2u16).get_unchecked(2), 2u16);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec3!(50u16, 1u16, 2u16));
    }
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec3!(0u16, 50u16, 2u16));
    }
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.set(2, 50u16);

        assert_eq!(vec, vec3!(0u16, 1u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(0u16, 1u16, 2u16);
    vec.set(3, 0u16);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec3!(50u16, 1u16, 2u16));
    }
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec3!(0u16, 50u16, 2u16));
    }
    {
        let mut vec = vec3!(0u16, 1u16, 2u16);
        vec.try_set(2, 50u16).unwrap();

        assert_eq!(vec, vec3!(0u16, 1u16, 50u16));
    }

    assert_eq!(
        vec3!(0u16, 1u16, 2u16).try_set(3, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(0u16, 1u16, 2u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec3!(50u16, 1u16, 2u16));
        }
        {
            let mut vec = vec3!(0u16, 1u16, 2u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec3!(0u16, 50u16, 2u16));
        }
        {
            let mut vec = vec3!(0u16, 1u16, 2u16);
            vec.set_unchecked(2, 50u16);

            assert_eq!(vec, vec3!(0u16, 1u16, 50u16));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(0u16, 1u16, 2u16).z(), 2u16);
    assert_eq!(vec3!(0u16, 1u16, 2u16).zx(), vec2!(2u16, 0u16));
    assert_eq!(vec3!(0u16, 1u16, 2u16).zxy(), vec3!(2u16, 0u16, 1u16));
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).zxyz(),
        vec4!(2u16, 0u16, 1u16, 2u16)
    );
}

#[test]
fn test_vec3_with_swizzle() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).with_y(0u16),
        vec3!(0u16, 0u16, 2u16)
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).with_yx(vec2!(0u16, 1u16)),
        vec3!(1u16, 0u16, 2u16)
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).with_yxz(vec3!(0u16, 2u16, 1u16)),
        vec3!(2u16, 0u16, 1u16)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16 + 2u16
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).reduce(|acc, x| acc + x),
        0u16 + 1u16 + 2u16
    );
}

#[test]
fn test_vec3_eq_mask() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).eq_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).eq_mask(vec3!(0u16, 0u16, 2u16)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).eq_mask(vec3!(3u16, 4u16, 5u16)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ne_mask() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).ne_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).ne_mask(vec3!(0u16, 0u16, 2u16)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).ne_mask(vec3!(3u16, 4u16, 5u16)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_lt_mask() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).lt_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).lt_mask(vec3!(1u16, 0u16, 2u16)),
        vec3!(true, false, false),
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).lt_mask(vec3!(3u16, 4u16, 5u16)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3u16, 4u16, 5u16).lt_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_gt_mask() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).gt_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).gt_mask(vec3!(1u16, 0u16, 2u16)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).gt_mask(vec3!(3u16, 4u16, 5u16)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3u16, 4u16, 5u16).gt_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_le_mask() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).le_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).le_mask(vec3!(1u16, 0u16, 2u16)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).le_mask(vec3!(3u16, 4u16, 5u16)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3u16, 4u16, 5u16).le_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ge_mask() {
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).ge_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).ge_mask(vec3!(1u16, 0u16, 2u16)),
        vec3!(false, true, true),
    );
    assert_eq!(
        vec3!(0u16, 1u16, 2u16).ge_mask(vec3!(3u16, 4u16, 5u16)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3u16, 4u16, 5u16).ge_mask(vec3!(0u16, 1u16, 2u16)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_eq() {
    assert_eq!(vec3!(0u16, 1u16, 2u16) == vec3!(0u16, 1u16, 2u16), true);
    assert_eq!(vec3!(0u16, 1u16, 2u16) == vec3!(0u16, 0u16, 2u16), false);
    assert_eq!(vec3!(0u16, 1u16, 2u16) == vec3!(3u16, 4u16, 5u16), false);
}

#[test]
fn test_vec3_ne() {
    assert_eq!(vec3!(0u16, 1u16, 2u16) != vec3!(0u16, 1u16, 2u16), false);
    assert_eq!(vec3!(0u16, 1u16, 2u16) != vec3!(0u16, 0u16, 2u16), true);
    assert_eq!(vec3!(0u16, 1u16, 2u16) != vec3!(3u16, 4u16, 5u16), true);
}

#[test]
fn test_vec3_debug() {
    assert_eq!(format!("{:?}", vec3!(0u16, 1u16, 2u16)), "(0, 1, 2)");
}

#[test]
fn test_vec3_display() {
    assert_eq!(format!("{}", vec3!(0u16, 1u16, 2u16)), "(0, 1, 2)");
}

const _: () = assert!(size_of::<Vec4P<u16>>() == size_of::<[u16; 4]>());

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).align(),
        vec4!(0u16, 1u16, 2u16, 3u16)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).pack(),
        vec4p!(0u16, 1u16, 2u16, 3u16)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0u16, 1u16, 2u16, 3u16]).as_array(),
        [0u16, 1u16, 2u16, 3u16]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0u16), vec4!(0u16, 0u16, 0u16, 0u16));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).index(0), 0u16);
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).index(1), 1u16);
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).index(2), 2u16);
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).index(3), 3u16);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0u16, 1u16, 2u16, 3u16).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(0), Some(0u16));
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(1), Some(1u16));
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(2), Some(2u16));
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(3), Some(3u16));

    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get_unchecked(0), 0u16);
        assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get_unchecked(1), 1u16);
        assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get_unchecked(2), 2u16);
        assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).get_unchecked(3), 3u16);
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.set(0, 50u16);

        assert_eq!(vec, vec4!(50u16, 1u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.set(1, 50u16);

        assert_eq!(vec, vec4!(0u16, 50u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.set(2, 50u16);

        assert_eq!(vec, vec4!(0u16, 1u16, 50u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.set(3, 50u16);

        assert_eq!(vec, vec4!(0u16, 1u16, 2u16, 50u16));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
    vec.set(4, 0u16);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(0, 50u16).unwrap();

        assert_eq!(vec, vec4!(50u16, 1u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(1, 50u16).unwrap();

        assert_eq!(vec, vec4!(0u16, 50u16, 2u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(2, 50u16).unwrap();

        assert_eq!(vec, vec4!(0u16, 1u16, 50u16, 3u16));
    }
    {
        let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
        vec.try_set(3, 50u16).unwrap();

        assert_eq!(vec, vec4!(0u16, 1u16, 2u16, 50u16));
    }

    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).try_set(4, 0u16),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(0, 50u16);

            assert_eq!(vec, vec4!(50u16, 1u16, 2u16, 3u16));
        }
        {
            let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(1, 50u16);

            assert_eq!(vec, vec4!(0u16, 50u16, 2u16, 3u16));
        }
        {
            let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(2, 50u16);

            assert_eq!(vec, vec4!(0u16, 1u16, 50u16, 3u16));
        }
        {
            let mut vec = vec4!(0u16, 1u16, 2u16, 3u16);
            vec.set_unchecked(3, 50u16);

            assert_eq!(vec, vec4!(0u16, 1u16, 2u16, 50u16));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).z(), 2u16);
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).zw(), vec2!(2u16, 3u16));
    assert_eq!(vec4!(0u16, 1u16, 2u16, 3u16).zwy(), vec3!(2u16, 3u16, 1u16));
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).zwyz(),
        vec4!(2u16, 3u16, 1u16, 2u16)
    );
}

#[test]
fn test_vec4_with_swizzle() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).with_y(0u16),
        vec4!(0u16, 0u16, 2u16, 3u16)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).with_yx(vec2!(0u16, 1u16)),
        vec4!(1u16, 0u16, 2u16, 3u16)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).with_yxz(vec3!(0u16, 2u16, 1u16)),
        vec4!(2u16, 0u16, 1u16, 3u16)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).with_yxzw(vec4!(0u16, 2u16, 1u16, 0u16)),
        vec4!(2u16, 0u16, 1u16, 0u16)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).fold(13, |acc, x| acc + x),
        13 + 0u16 + 1u16 + 2u16 + 3u16
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).reduce(|acc, x| acc + x),
        0u16 + 1u16 + 2u16 + 3u16
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).eq_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).eq_mask(vec4!(0u16, 0u16, 2u16, 3u16)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).eq_mask(vec4!(4u16, 5u16, 6u16, 7u16)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).ne_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).ne_mask(vec4!(0u16, 0u16, 2u16, 3u16)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).ne_mask(vec4!(4u16, 5u16, 6u16, 7u16)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).lt_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).lt_mask(vec4!(1u16, 0u16, 2u16, 3u16)),
        vec4!(true, false, false, false),
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).lt_mask(vec4!(4u16, 5u16, 6u16, 7u16)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4u16, 5u16, 6u16, 7u16).lt_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).gt_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).gt_mask(vec4!(1u16, 0u16, 2u16, 3u16)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).gt_mask(vec4!(4u16, 5u16, 6u16, 7u16)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4u16, 5u16, 6u16, 7u16).gt_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).le_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).le_mask(vec4!(1u16, 0u16, 2u16, 3u16)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).le_mask(vec4!(4u16, 5u16, 6u16, 7u16)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4u16, 5u16, 6u16, 7u16).le_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).ge_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).ge_mask(vec4!(1u16, 0u16, 2u16, 3u16)),
        vec4!(false, true, true, true),
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16).ge_mask(vec4!(4u16, 5u16, 6u16, 7u16)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4u16, 5u16, 6u16, 7u16).ge_mask(vec4!(0u16, 1u16, 2u16, 3u16)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16) == vec4!(0u16, 1u16, 2u16, 3u16),
        true
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16) == vec4!(0u16, 0u16, 2u16, 3u16),
        false
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16) == vec4!(4u16, 5u16, 6u16, 7u16),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16) != vec4!(0u16, 1u16, 2u16, 3u16),
        false
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16) != vec4!(0u16, 0u16, 2u16, 3u16),
        true
    );
    assert_eq!(
        vec4!(0u16, 1u16, 2u16, 3u16) != vec4!(4u16, 5u16, 6u16, 7u16),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0u16, 1u16, 2u16, 3u16)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(format!("{}", vec4!(0u16, 1u16, 2u16, 3u16)), "(0, 1, 2, 3)");
}
