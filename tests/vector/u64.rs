// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2S<u64>>() == size_of::<[u64; 2]>());

#[test]
fn test_vec2_constructor() {
    assert_eq!(vec2!(0u64, 1u64), Vec2::from_array([0u64, 1u64]));
    assert_eq!(vec2!(vec2!(0u64, 1u64)), Vec2::from_array([0u64, 1u64]));
}

#[test]
fn test_vec2_as_simd() {
    assert_eq!(vec2!(0u64, 1u64).as_simd(), vec2!(0u64, 1u64));
}

#[test]
fn test_vec2_as_non_simd() {
    assert_eq!(vec2!(0u64, 1u64).as_non_simd(), vec2s!(0u64, 1u64));
}

#[test]
fn test_vec2s_constructor() {
    assert_eq!(vec2s!(0u64, 1u64), Vec2S::from_array([0u64, 1u64]));
    assert_eq!(vec2s!(vec2s!(0u64, 1u64)), Vec2S::from_array([0u64, 1u64]));
}

#[test]
fn test_vec2s_as_simd() {
    assert_eq!(vec2s!(0u64, 1u64).as_simd(), vec2!(0u64, 1u64));
}

#[test]
fn test_vec2s_as_non_simd() {
    assert_eq!(vec2s!(0u64, 1u64).as_non_simd(), vec2s!(0u64, 1u64));
}

const _: () = assert!(size_of::<Vec3S<u64>>() == size_of::<[u64; 3]>());

#[test]
fn test_vec3_constructor() {
    assert_eq!(
        vec3!(0u64, 1u64, 2u64),
        Vec3::from_array([0u64, 1u64, 2u64])
    );
    assert_eq!(
        vec3!(0u64, vec2!(1u64, 2u64)),
        Vec3::from_array([0u64, 1u64, 2u64])
    );
    assert_eq!(
        vec3!(vec3!(0u64, 1u64, 2u64)),
        Vec3::from_array([0u64, 1u64, 2u64])
    );
}

#[test]
fn test_vec3_as_simd() {
    assert_eq!(vec3!(0u64, 1u64, 2u64).as_simd(), vec3!(0u64, 1u64, 2u64));
}

#[test]
fn test_vec3_as_non_simd() {
    assert_eq!(
        vec3!(0u64, 1u64, 2u64).as_non_simd(),
        vec3s!(0u64, 1u64, 2u64)
    );
}

#[test]
fn test_vec3s_constructor() {
    assert_eq!(
        vec3s!(0u64, 1u64, 2u64),
        Vec3S::from_array([0u64, 1u64, 2u64])
    );
    assert_eq!(
        vec3s!(0u64, vec2s!(1u64, 2u64)),
        Vec3S::from_array([0u64, 1u64, 2u64])
    );
    assert_eq!(
        vec3s!(vec3s!(0u64, 1u64, 2u64)),
        Vec3S::from_array([0u64, 1u64, 2u64])
    );
}

#[test]
fn test_vec3s_as_simd() {
    assert_eq!(vec3s!(0u64, 1u64, 2u64).as_simd(), vec3!(0u64, 1u64, 2u64));
}

#[test]
fn test_vec3s_as_non_simd() {
    assert_eq!(
        vec3s!(0u64, 1u64, 2u64).as_non_simd(),
        vec3s!(0u64, 1u64, 2u64)
    );
}

const _: () = assert!(size_of::<Vec4S<u64>>() == size_of::<[u64; 4]>());

#[test]
fn test_vec4_constructor() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64),
        Vec4::from_array([0u64, 1u64, 2u64, 3u64])
    );
    assert_eq!(
        vec4!(0u64, vec2!(1u64, 2u64), 3u64),
        Vec4::from_array([0u64, 1u64, 2u64, 3u64])
    );
    assert_eq!(
        vec4!(vec4!(0u64, 1u64, 2u64, 3u64)),
        Vec4::from_array([0u64, 1u64, 2u64, 3u64])
    );
}

#[test]
fn test_vec4_as_simd() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).as_simd(),
        vec4!(0u64, 1u64, 2u64, 3u64)
    );
}

#[test]
fn test_vec4_as_non_simd() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).as_non_simd(),
        vec4s!(0u64, 1u64, 2u64, 3u64)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0u64, 1u64, 2u64, 3u64]).as_array(),
        [0u64, 1u64, 2u64, 3u64]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0u64), vec4!(0u64, 0u64, 0u64, 0u64));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).index(0), 0u64);
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).index(1), 1u64);
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).index(2), 2u64);
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).index(3), 3u64);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0u64, 1u64, 2u64, 3u64).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get(0), Some(0u64));
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get(1), Some(1u64));
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get(2), Some(2u64));
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get(3), Some(3u64));

    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get_unchecked(0), 0u64);
        assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get_unchecked(1), 1u64);
        assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get_unchecked(2), 2u64);
        assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).get_unchecked(3), 3u64);
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
        vec.set(0, 50u64);

        assert_eq!(vec, vec4!(50u64, 1u64, 2u64, 3u64));
    }
    {
        let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
        vec.set(1, 50u64);

        assert_eq!(vec, vec4!(0u64, 50u64, 2u64, 3u64));
    }
    {
        let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
        vec.set(2, 50u64);

        assert_eq!(vec, vec4!(0u64, 1u64, 50u64, 3u64));
    }
    {
        let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
        vec.set(3, 50u64);

        assert_eq!(vec, vec4!(0u64, 1u64, 2u64, 50u64));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
    vec.set(4, 0u64);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
        vec.try_set(0, 50u64).unwrap();

        assert_eq!(vec, vec4!(50u64, 1u64, 2u64, 3u64));
    }
    {
        let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
        vec.try_set(1, 50u64).unwrap();

        assert_eq!(vec, vec4!(0u64, 50u64, 2u64, 3u64));
    }
    {
        let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
        vec.try_set(2, 50u64).unwrap();

        assert_eq!(vec, vec4!(0u64, 1u64, 50u64, 3u64));
    }
    {
        let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
        vec.try_set(3, 50u64).unwrap();

        assert_eq!(vec, vec4!(0u64, 1u64, 2u64, 50u64));
    }

    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).try_set(4, 0u64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
            vec.set_unchecked(0, 50u64);

            assert_eq!(vec, vec4!(50u64, 1u64, 2u64, 3u64));
        }
        {
            let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
            vec.set_unchecked(1, 50u64);

            assert_eq!(vec, vec4!(0u64, 50u64, 2u64, 3u64));
        }
        {
            let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
            vec.set_unchecked(2, 50u64);

            assert_eq!(vec, vec4!(0u64, 1u64, 50u64, 3u64));
        }
        {
            let mut vec = vec4!(0u64, 1u64, 2u64, 3u64);
            vec.set_unchecked(3, 50u64);

            assert_eq!(vec, vec4!(0u64, 1u64, 2u64, 50u64));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).z(), 2u64);
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).zw(), vec2!(2u64, 3u64));
    assert_eq!(vec4!(0u64, 1u64, 2u64, 3u64).zwy(), vec3!(2u64, 3u64, 1u64));
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).zwyz(),
        vec4!(2u64, 3u64, 1u64, 2u64)
    );
}

#[test]
fn test_vec4_with_swizzle() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).with_y(0u64),
        vec4!(0u64, 0u64, 2u64, 3u64)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).with_yx(vec2!(0u64, 1u64)),
        vec4!(1u64, 0u64, 2u64, 3u64)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).with_yxz(vec3!(0u64, 2u64, 1u64)),
        vec4!(2u64, 0u64, 1u64, 3u64)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).with_yxzw(vec4!(0u64, 2u64, 1u64, 0u64)),
        vec4!(2u64, 0u64, 1u64, 0u64)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).fold(13, |acc, x| acc + x),
        13 + 0u64 + 1u64 + 2u64 + 3u64
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).reduce(|acc, x| acc + x),
        0u64 + 1u64 + 2u64 + 3u64
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).eq_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).eq_mask(vec4!(0u64, 0u64, 2u64, 3u64)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).eq_mask(vec4!(4u64, 5u64, 6u64, 7u64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).ne_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).ne_mask(vec4!(0u64, 0u64, 2u64, 3u64)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).ne_mask(vec4!(4u64, 5u64, 6u64, 7u64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).lt_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).lt_mask(vec4!(1u64, 0u64, 2u64, 3u64)),
        vec4!(true, false, false, false),
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).lt_mask(vec4!(4u64, 5u64, 6u64, 7u64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4u64, 5u64, 6u64, 7u64).lt_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).gt_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).gt_mask(vec4!(1u64, 0u64, 2u64, 3u64)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).gt_mask(vec4!(4u64, 5u64, 6u64, 7u64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4u64, 5u64, 6u64, 7u64).gt_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).le_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).le_mask(vec4!(1u64, 0u64, 2u64, 3u64)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).le_mask(vec4!(4u64, 5u64, 6u64, 7u64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4u64, 5u64, 6u64, 7u64).le_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).ge_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).ge_mask(vec4!(1u64, 0u64, 2u64, 3u64)),
        vec4!(false, true, true, true),
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64).ge_mask(vec4!(4u64, 5u64, 6u64, 7u64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4u64, 5u64, 6u64, 7u64).ge_mask(vec4!(0u64, 1u64, 2u64, 3u64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64) == vec4!(0u64, 1u64, 2u64, 3u64),
        true
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64) == vec4!(0u64, 0u64, 2u64, 3u64),
        false
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64) == vec4!(4u64, 5u64, 6u64, 7u64),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64) != vec4!(0u64, 1u64, 2u64, 3u64),
        false
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64) != vec4!(0u64, 0u64, 2u64, 3u64),
        true
    );
    assert_eq!(
        vec4!(0u64, 1u64, 2u64, 3u64) != vec4!(4u64, 5u64, 6u64, 7u64),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0u64, 1u64, 2u64, 3u64)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(format!("{}", vec4!(0u64, 1u64, 2u64, 3u64)), "(0, 1, 2, 3)");
}

#[test]
fn test_vec4_const_from_array() {
    assert_eq!(
        Vec4::<u64>::const_from_array([0u64, 1u64, 2u64, 3u64]),
        Vec4::from_array([0u64, 1u64, 2u64, 3u64])
    );
}

#[test]
fn test_vec4s_constructor() {
    assert_eq!(
        vec4s!(0u64, 1u64, 2u64, 3u64),
        Vec4S::from_array([0u64, 1u64, 2u64, 3u64])
    );
    assert_eq!(
        vec4s!(0u64, vec2s!(1u64, 2u64), 3u64),
        Vec4S::from_array([0u64, 1u64, 2u64, 3u64])
    );
    assert_eq!(
        vec4s!(vec4s!(0u64, 1u64, 2u64, 3u64)),
        Vec4S::from_array([0u64, 1u64, 2u64, 3u64])
    );
}

#[test]
fn test_vec4s_as_simd() {
    assert_eq!(
        vec4s!(0u64, 1u64, 2u64, 3u64).as_simd(),
        vec4!(0u64, 1u64, 2u64, 3u64)
    );
}

#[test]
fn test_vec4s_as_non_simd() {
    assert_eq!(
        vec4s!(0u64, 1u64, 2u64, 3u64).as_non_simd(),
        vec4s!(0u64, 1u64, 2u64, 3u64)
    );
}
