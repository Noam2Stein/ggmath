// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_simd_primitive_fns() {
    assert_eq!(Vec2::from_array([1i32, 2i32]).as_array(), [1i32, 2i32]);
    assert_eq!(
        Vec3::from_array([1i32, 2i32, 3i32]).as_array(),
        [1i32, 2i32, 3i32]
    );
    assert_eq!(
        Vec4::from_array([1i32, 2i32, 3i32, 4i32]).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(Vec2::splat(1i32).as_array(), [1i32; 2]);
    assert_eq!(Vec3::splat(1i32).as_array(), [1i32; 3]);
    assert_eq!(Vec4::splat(1i32).as_array(), [1i32; 4]);

    assert_eq!(Vec2::from_fn(|i| [1i32, 2i32][i]).as_array(), [1i32, 2i32]);
    assert_eq!(
        Vec3::from_fn(|i| [1i32, 2i32, 3i32][i]).as_array(),
        [1i32, 2i32, 3i32]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1i32, 2i32, 3i32, 4i32][i]).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(
        Vec2::const_from_array([1i32, 2i32]).as_array(),
        [1i32, 2i32]
    );
    assert_eq!(
        Vec3::const_from_array([1i32, 2i32, 3i32]).as_array(),
        [1i32, 2i32, 3i32]
    );
    assert_eq!(
        Vec4::const_from_array([1i32, 2i32, 3i32, 4i32]).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(vec2!(1i32, 2i32).as_array(), [1i32, 2i32]);
    assert_eq!(vec2!(vec2!(1i32, 2i32)).as_array(), [1i32, 2i32]);
    assert_eq!(vec3!(1i32, 2i32, 3i32).as_array(), [1i32, 2i32, 3i32]);
    assert_eq!(
        vec3!(1i32, vec2!(2i32, 3i32)).as_array(),
        [1i32, 2i32, 3i32]
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );
    assert_eq!(
        vec4!(1i32, vec2!(2i32, 3i32), 4i32).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );
    assert_eq!(
        vec4!(
            1i32,
            vec2!(2i32, 3i32),
            Vector::<1, i32, Simd>::from_array([4i32])
        )
        .as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(vec2!(1i32, 2i32).as_array_ref(), &[1i32, 2i32]);
    assert_eq!(vec3!(1i32, 2i32, 3i32).as_array_ref(), &[1i32, 2i32, 3i32]);
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).as_array_ref(),
        &[1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(vec2!(1i32, 2i32).as_mut_array(), &mut [1i32, 2i32]);
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).as_mut_array(),
        &mut [1i32, 2i32, 3i32]
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).as_mut_array(),
        &mut [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(vec2!(1i32, 2i32).as_simd(), vec2!(1i32, 2i32));
    assert_eq!(vec3!(1i32, 2i32, 3i32).as_simd(), vec3!(1i32, 2i32, 3i32));
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).as_simd(),
        vec4!(1i32, 2i32, 3i32, 4i32)
    );

    assert_eq!(vec2!(1i32, 2i32).as_nonsimd(), vec2s!(1i32, 2i32));
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).as_nonsimd(),
        vec3s!(1i32, 2i32, 3i32)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).as_nonsimd(),
        vec4s!(1i32, 2i32, 3i32, 4i32)
    );

    assert_eq!(vec2!(1i32, 2i32).len(), 2);
    assert_eq!(vec3!(1i32, 2i32, 3i32).len(), 3);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).len(), 4);

    assert_eq!(vec2!(1i32, 2i32).is_simd(), true);
    assert_eq!(vec3!(1i32, 2i32, 3i32).is_simd(), true);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).is_simd(), true);

    assert_eq!(vec2!(1i32, 2i32).get(0), Some(1i32));
    assert_eq!(vec2!(1i32, 2i32).get(1), Some(2i32));
    assert_eq!(vec2!(1i32, 2i32).get(2), None);
    assert_eq!(vec2!(1i32, 2i32).get(3), None);

    assert_eq!(vec3!(1i32, 2i32, 3i32).get(0), Some(1i32));
    assert_eq!(vec3!(1i32, 2i32, 3i32).get(1), Some(2i32));
    assert_eq!(vec3!(1i32, 2i32, 3i32).get(2), Some(3i32));
    assert_eq!(vec3!(1i32, 2i32, 3i32).get(3), None);
    assert_eq!(vec3!(1i32, 2i32, 3i32).get(4), None);

    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get(0), Some(1i32));
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get(1), Some(2i32));
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get(2), Some(3i32));
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get(3), Some(4i32));
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get(4), None);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get(5), None);

    assert_eq!(vec2!(1i32, 2i32).get_mut(0), Some(&mut 1i32));
    assert_eq!(vec2!(1i32, 2i32).get_mut(1), Some(&mut 2i32));
    assert_eq!(vec2!(1i32, 2i32).get_mut(2), None);
    assert_eq!(vec2!(1i32, 2i32).get_mut(3), None);

    assert_eq!(vec3!(1i32, 2i32, 3i32).get_mut(0), Some(&mut 1i32));
    assert_eq!(vec3!(1i32, 2i32, 3i32).get_mut(1), Some(&mut 2i32));
    assert_eq!(vec3!(1i32, 2i32, 3i32).get_mut(2), Some(&mut 3i32));
    assert_eq!(vec3!(1i32, 2i32, 3i32).get_mut(3), None);
    assert_eq!(vec3!(1i32, 2i32, 3i32).get_mut(4), None);

    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_mut(0), Some(&mut 1i32));
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_mut(1), Some(&mut 2i32));
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_mut(2), Some(&mut 3i32));
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_mut(3), Some(&mut 4i32));
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_mut(4), None);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_mut(5), None);

    unsafe {
        assert_eq!(vec2!(1i32, 2i32).get_unchecked(0), 1i32);
        assert_eq!(vec2!(1i32, 2i32).get_unchecked(1), 2i32);

        assert_eq!(vec3!(1i32, 2i32, 3i32).get_unchecked(0), 1i32);
        assert_eq!(vec3!(1i32, 2i32, 3i32).get_unchecked(1), 2i32);
        assert_eq!(vec3!(1i32, 2i32, 3i32).get_unchecked(2), 3i32);

        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_unchecked(0), 1i32);
        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_unchecked(1), 2i32);
        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_unchecked(2), 3i32);
        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).get_unchecked(3), 4i32);

        assert_eq!(vec2!(1i32, 2i32).get_unchecked_mut(0), &mut 1i32);
        assert_eq!(vec2!(1i32, 2i32).get_unchecked_mut(1), &mut 2i32);

        assert_eq!(vec3!(1i32, 2i32, 3i32).get_unchecked_mut(0), &mut 1i32);
        assert_eq!(vec3!(1i32, 2i32, 3i32).get_unchecked_mut(1), &mut 2i32);
        assert_eq!(vec3!(1i32, 2i32, 3i32).get_unchecked_mut(2), &mut 3i32);

        assert_eq!(
            vec4!(1i32, 2i32, 3i32, 4i32).get_unchecked_mut(0),
            &mut 1i32
        );
        assert_eq!(
            vec4!(1i32, 2i32, 3i32, 4i32).get_unchecked_mut(1),
            &mut 2i32
        );
        assert_eq!(
            vec4!(1i32, 2i32, 3i32, 4i32).get_unchecked_mut(2),
            &mut 3i32
        );
        assert_eq!(
            vec4!(1i32, 2i32, 3i32, 4i32).get_unchecked_mut(3),
            &mut 4i32
        );
    }

    assert_eq!(
        vec2!(1i32, 2i32).iter().collect::<Vec<i32>>(),
        vec![1i32, 2i32]
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).iter().collect::<Vec<i32>>(),
        vec![1i32, 2i32, 3i32]
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).iter().collect::<Vec<i32>>(),
        vec![1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(
        vec2!(1i32, 2i32).iter_mut().collect::<Vec<&mut i32>>(),
        vec![&mut 1i32, &mut 2i32]
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32)
            .iter_mut()
            .collect::<Vec<&mut i32>>(),
        vec![&mut 1i32, &mut 2i32, &mut 3i32]
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32)
            .iter_mut()
            .collect::<Vec<&mut i32>>(),
        vec![&mut 1i32, &mut 2i32, &mut 3i32, &mut 4i32]
    );

    assert_eq!(vec2!(1i32, 2i32).map(|x| x == 2i32), vec2!(false, true));
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).map(|x| x == 2i32),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).map(|x| x == 2i32),
        vec4!(false, true, false, false)
    );

    assert_eq!(
        vec2!(1i32, 2i32).zip(vec2!(2i32, 1i32)),
        vec2!((1i32, 2i32), (2i32, 1i32))
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).zip(vec3!(2i32, 3i32, 1i32)),
        vec3!((1i32, 2i32), (2i32, 3i32), (3i32, 1i32))
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).zip(vec4!(2i32, 3i32, 4i32, 1i32)),
        vec4!((1i32, 2i32), (2i32, 3i32), (3i32, 4i32), (4i32, 1i32))
    );

    assert_eq!(vec2!(1i32, 2i32).reverse(), vec2!(2i32, 1i32));
    assert_eq!(vec3!(1i32, 2i32, 3i32).reverse(), vec3!(3i32, 2i32, 1i32));
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).reverse(),
        vec4!(4i32, 3i32, 2i32, 1i32)
    );

    assert_eq!(
        vec2!(1i32, 2i32).get_const_vec2::<0, 1>(),
        vec2!(1i32, 2i32)
    );
    assert_eq!(
        vec2!(1i32, 2i32).get_const_vec2::<1, 0>(),
        vec2!(2i32, 1i32)
    );
    assert_eq!(
        vec2!(1i32, 2i32).get_const_vec2::<1, 1>(),
        vec2!(2i32, 2i32)
    );

    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec2::<0, 1>(),
        vec2!(1i32, 2i32)
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec2::<0, 2>(),
        vec2!(1i32, 3i32)
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec2::<2, 1>(),
        vec2!(3i32, 2i32)
    );

    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec2::<0, 1>(),
        vec2!(1i32, 2i32)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec2::<1, 3>(),
        vec2!(2i32, 4i32)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec2::<3, 1>(),
        vec2!(4i32, 2i32)
    );

    assert_eq!(
        vec2!(1i32, 2i32).get_const_vec3::<0, 1, 1>(),
        vec3!(1i32, 2i32, 2i32)
    );
    assert_eq!(
        vec2!(1i32, 2i32).get_const_vec3::<1, 0, 1>(),
        vec3!(2i32, 1i32, 2i32)
    );

    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec3::<0, 1, 2>(),
        vec3!(1i32, 2i32, 3i32)
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec3::<1, 0, 2>(),
        vec3!(2i32, 1i32, 3i32)
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec3::<2, 1, 0>(),
        vec3!(3i32, 2i32, 1i32)
    );

    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec3::<0, 1, 2>(),
        vec3!(1i32, 2i32, 3i32)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec3::<1, 0, 2>(),
        vec3!(2i32, 1i32, 3i32)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec3::<2, 1, 0>(),
        vec3!(3i32, 2i32, 1i32)
    );

    assert_eq!(
        vec2!(1i32, 2i32).get_const_vec4::<0, 1, 1, 0>(),
        vec4!(1i32, 2i32, 2i32, 1i32)
    );
    assert_eq!(
        vec2!(1i32, 2i32).get_const_vec4::<1, 0, 1, 0>(),
        vec4!(2i32, 1i32, 2i32, 1i32)
    );
    assert_eq!(
        vec2!(1i32, 2i32).get_const_vec4::<1, 1, 0, 0>(),
        vec4!(2i32, 2i32, 1i32, 1i32)
    );

    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec4::<0, 1, 2, 0>(),
        vec4!(1i32, 2i32, 3i32, 1i32)
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec4::<1, 0, 2, 0>(),
        vec4!(2i32, 1i32, 3i32, 1i32)
    );
    assert_eq!(
        vec3!(1i32, 2i32, 3i32).get_const_vec4::<2, 1, 0, 0>(),
        vec4!(3i32, 2i32, 1i32, 1i32)
    );

    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec4::<0, 1, 2, 3>(),
        vec4!(1i32, 2i32, 3i32, 4i32)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec4::<1, 0, 2, 3>(),
        vec4!(2i32, 1i32, 3i32, 4i32)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec4::<2, 1, 0, 3>(),
        vec4!(3i32, 2i32, 1i32, 4i32)
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32).get_const_vec4::<3, 1, 2, 0>(),
        vec4!(4i32, 2i32, 3i32, 1i32)
    );

    assert_eq!(vec2!(1i32, 2i32)[0], 1i32);
    assert_eq!(vec2!(1i32, 2i32)[1], 2i32);

    assert_eq!(vec3!(1i32, 2i32, 3i32)[0], 1i32);
    assert_eq!(vec3!(1i32, 2i32, 3i32)[1], 2i32);
    assert_eq!(vec3!(1i32, 2i32, 3i32)[2], 3i32);

    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32)[0], 1i32);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32)[1], 2i32);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32)[2], 3i32);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32)[3], 4i32);

    assert_eq!(&mut vec2!(1i32, 2i32)[0], &mut 1i32);
    assert_eq!(&mut vec2!(1i32, 2i32)[1], &mut 2i32);

    assert_eq!(&mut vec3!(1i32, 2i32, 3i32)[0], &mut 1i32);
    assert_eq!(&mut vec3!(1i32, 2i32, 3i32)[1], &mut 2i32);
    assert_eq!(&mut vec3!(1i32, 2i32, 3i32)[2], &mut 3i32);

    assert_eq!(&mut vec4!(1i32, 2i32, 3i32, 4i32)[0], &mut 1i32);
    assert_eq!(&mut vec4!(1i32, 2i32, 3i32, 4i32)[1], &mut 2i32);
    assert_eq!(&mut vec4!(1i32, 2i32, 3i32, 4i32)[2], &mut 3i32);
    assert_eq!(&mut vec4!(1i32, 2i32, 3i32, 4i32)[3], &mut 4i32);

    assert_eq!(vec2!(1i32, 2i32) == vec2!(1i32, 2i32), true);
    assert_eq!(vec2!(1i32, 2i32) == vec2!(2i32, 1i32), false);
    assert_eq!(vec2!(1i32, 2i32) == vec2!(2i32, 2i32), false);

    assert_eq!(vec3!(1i32, 2i32, 3i32) == vec3!(1i32, 2i32, 3i32), true);
    assert_eq!(vec3!(1i32, 2i32, 3i32) == vec3!(4i32, 3i32, 2i32), false);
    assert_eq!(vec3!(1i32, 2i32, 3i32) == vec3!(2i32, 2i32, 3i32), false);

    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32) == vec4!(1i32, 2i32, 3i32, 4i32),
        true
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32) == vec4!(4i32, 3i32, 2i32, 1i32),
        false
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32) == vec4!(2i32, 2i32, 2i32, 4i32),
        false
    );

    assert_eq!(vec2!(1i32, 2i32) != vec2!(1i32, 2i32), false);
    assert_eq!(vec2!(1i32, 2i32) != vec2!(2i32, 1i32), true);
    assert_eq!(vec2!(1i32, 2i32) != vec2!(2i32, 2i32), true);

    assert_eq!(vec3!(1i32, 2i32, 3i32) != vec3!(1i32, 2i32, 3i32), false);
    assert_eq!(vec3!(1i32, 2i32, 3i32) != vec3!(4i32, 3i32, 2i32), true);
    assert_eq!(vec3!(1i32, 2i32, 3i32) != vec3!(2i32, 2i32, 3i32), true);

    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32) != vec4!(1i32, 2i32, 3i32, 4i32),
        false
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32) != vec4!(4i32, 3i32, 2i32, 1i32),
        true
    );
    assert_eq!(
        vec4!(1i32, 2i32, 3i32, 4i32) != vec4!(2i32, 2i32, 2i32, 4i32),
        true
    );

    assert_eq!(vec2!(1i32, 2i32).to_string(), "(1, 2)");
    assert_eq!(vec3!(1i32, 2i32, 3i32).to_string(), "(1, 2, 3)");
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2!(1i32, 2i32)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3!(1i32, 2i32, 3i32)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4!(1i32, 2i32, 3i32, 4i32)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2!(1i32, 2i32).x, 1i32);
    assert_eq!(vec2!(1i32, 2i32).y, 2i32);

    assert_eq!(vec3!(1i32, 2i32, 3i32).x, 1i32);
    assert_eq!(vec3!(1i32, 2i32, 3i32).y, 2i32);
    assert_eq!(vec3!(1i32, 2i32, 3i32).z, 3i32);

    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).x, 1i32);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).y, 2i32);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).z, 3i32);
    assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).w, 4i32);

    assert_eq!(&mut vec2!(1i32, 2i32).x, &mut 1i32);
    assert_eq!(&mut vec2!(1i32, 2i32).y, &mut 2i32);

    assert_eq!(&mut vec3!(1i32, 2i32, 3i32).x, &mut 1i32);
    assert_eq!(&mut vec3!(1i32, 2i32, 3i32).y, &mut 2i32);
    assert_eq!(&mut vec3!(1i32, 2i32, 3i32).z, &mut 3i32);

    assert_eq!(&mut vec4!(1i32, 2i32, 3i32, 4i32).x, &mut 1i32);
    assert_eq!(&mut vec4!(1i32, 2i32, 3i32, 4i32).y, &mut 2i32);
    assert_eq!(&mut vec4!(1i32, 2i32, 3i32, 4i32).z, &mut 3i32);
    assert_eq!(&mut vec4!(1i32, 2i32, 3i32, 4i32).w, &mut 4i32);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2!(1i32, 2i32).xy(), vec2!(1i32, 2i32));
        assert_eq!(vec2!(1i32, 2i32).yx(), vec2!(2i32, 1i32));
        assert_eq!(vec2!(1i32, 2i32).yy(), vec2!(2i32, 2i32));

        assert_eq!(vec3!(1i32, 2i32, 3i32).xy(), vec2!(1i32, 2i32));
        assert_eq!(vec3!(1i32, 2i32, 3i32).xz(), vec2!(1i32, 3i32));
        assert_eq!(vec3!(1i32, 2i32, 3i32).zy(), vec2!(3i32, 2i32));

        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).xy(), vec2!(1i32, 2i32));
        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).yw(), vec2!(2i32, 4i32));
        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).wy(), vec2!(4i32, 2i32));

        assert_eq!(vec2!(1i32, 2i32).xyy(), vec3!(1i32, 2i32, 2i32));
        assert_eq!(vec2!(1i32, 2i32).yxy(), vec3!(2i32, 1i32, 2i32));

        assert_eq!(vec3!(1i32, 2i32, 3i32).xyz(), vec3!(1i32, 2i32, 3i32));
        assert_eq!(vec3!(1i32, 2i32, 3i32).yxz(), vec3!(2i32, 1i32, 3i32));
        assert_eq!(vec3!(1i32, 2i32, 3i32).zyx(), vec3!(3i32, 2i32, 1i32));

        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).xyz(), vec3!(1i32, 2i32, 3i32));
        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).yxz(), vec3!(2i32, 1i32, 3i32));
        assert_eq!(vec4!(1i32, 2i32, 3i32, 4i32).zyx(), vec3!(3i32, 2i32, 1i32));

        assert_eq!(vec2!(1i32, 2i32).xyyx(), vec4!(1i32, 2i32, 2i32, 1i32));
        assert_eq!(vec2!(1i32, 2i32).yxyx(), vec4!(2i32, 1i32, 2i32, 1i32));
        assert_eq!(vec2!(1i32, 2i32).yyxx(), vec4!(2i32, 2i32, 1i32, 1i32));

        assert_eq!(
            vec3!(1i32, 2i32, 3i32).xyzx(),
            vec4!(1i32, 2i32, 3i32, 1i32)
        );
        assert_eq!(
            vec3!(1i32, 2i32, 3i32).yxzx(),
            vec4!(2i32, 1i32, 3i32, 1i32)
        );
        assert_eq!(
            vec3!(1i32, 2i32, 3i32).zyxx(),
            vec4!(3i32, 2i32, 1i32, 1i32)
        );

        assert_eq!(
            vec4!(1i32, 2i32, 3i32, 4i32).xyzw(),
            vec4!(1i32, 2i32, 3i32, 4i32)
        );
        assert_eq!(
            vec4!(1i32, 2i32, 3i32, 4i32).yxzw(),
            vec4!(2i32, 1i32, 3i32, 4i32)
        );
        assert_eq!(
            vec4!(1i32, 2i32, 3i32, 4i32).zyxw(),
            vec4!(3i32, 2i32, 1i32, 4i32)
        );
        assert_eq!(
            vec4!(1i32, 2i32, 3i32, 4i32).wyzx(),
            vec4!(4i32, 2i32, 3i32, 1i32)
        );
    }
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(1i32, 2i32)[2];
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(1i32, 2i32, 3i32)[3];
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(1i32, 2i32, 3i32, 4i32)[4];
}

#[test]
fn test_nonsimd_primitive_fns() {
    assert_eq!(size_of::<Vec2S<i32>>(), size_of::<i32>() * 2);
    assert_eq!(size_of::<Vec3S<i32>>(), size_of::<i32>() * 3);
    assert_eq!(size_of::<Vec4S<i32>>(), size_of::<i32>() * 4);

    assert_eq!(align_of::<Vec2S<i32>>(), align_of::<i32>());
    assert_eq!(align_of::<Vec3S<i32>>(), align_of::<i32>());
    assert_eq!(align_of::<Vec4S<i32>>(), align_of::<i32>());

    assert_eq!(Vec2S::from_array([1i32, 2i32]).as_array(), [1i32, 2i32]);
    assert_eq!(
        Vec3S::from_array([1i32, 2i32, 3i32]).as_array(),
        [1i32, 2i32, 3i32]
    );
    assert_eq!(
        Vec4S::from_array([1i32, 2i32, 3i32, 4i32]).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(Vec2S::splat(1i32).as_array(), [1i32; 2]);
    assert_eq!(Vec3S::splat(1i32).as_array(), [1i32; 3]);
    assert_eq!(Vec4S::splat(1i32).as_array(), [1i32; 4]);

    assert_eq!(Vec2S::from_fn(|i| [1i32, 2i32][i]).as_array(), [1i32, 2i32]);
    assert_eq!(
        Vec3S::from_fn(|i| [1i32, 2i32, 3i32][i]).as_array(),
        [1i32, 2i32, 3i32]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1i32, 2i32, 3i32, 4i32][i]).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(
        Vec2S::const_from_array([1i32, 2i32]).as_array(),
        [1i32, 2i32]
    );
    assert_eq!(
        Vec3S::const_from_array([1i32, 2i32, 3i32]).as_array(),
        [1i32, 2i32, 3i32]
    );
    assert_eq!(
        Vec4S::const_from_array([1i32, 2i32, 3i32, 4i32]).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(vec2s!(1i32, 2i32).as_array(), [1i32, 2i32]);
    assert_eq!(vec2s!(vec2s!(1i32, 2i32)).as_array(), [1i32, 2i32]);
    assert_eq!(vec3s!(1i32, 2i32, 3i32).as_array(), [1i32, 2i32, 3i32]);
    assert_eq!(
        vec3s!(1i32, vec2s!(2i32, 3i32)).as_array(),
        [1i32, 2i32, 3i32]
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );
    assert_eq!(
        vec4s!(1i32, vec2s!(2i32, 3i32), 4i32).as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );
    assert_eq!(
        vec4s!(
            1i32,
            vec2s!(2i32, 3i32),
            Vector::<1, i32, NonSimd>::from_array([4i32])
        )
        .as_array(),
        [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(vec2s!(1i32, 2i32).as_array_ref(), &[1i32, 2i32]);
    assert_eq!(vec3s!(1i32, 2i32, 3i32).as_array_ref(), &[1i32, 2i32, 3i32]);
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).as_array_ref(),
        &[1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(vec2s!(1i32, 2i32).as_mut_array(), &mut [1i32, 2i32]);
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).as_mut_array(),
        &mut [1i32, 2i32, 3i32]
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).as_mut_array(),
        &mut [1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(vec2s!(1i32, 2i32).as_simd(), vec2!(1i32, 2i32));
    assert_eq!(vec3s!(1i32, 2i32, 3i32).as_simd(), vec3!(1i32, 2i32, 3i32));
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).as_simd(),
        vec4!(1i32, 2i32, 3i32, 4i32)
    );

    assert_eq!(vec2s!(1i32, 2i32).as_nonsimd(), vec2s!(1i32, 2i32));
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).as_nonsimd(),
        vec3s!(1i32, 2i32, 3i32)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).as_nonsimd(),
        vec4s!(1i32, 2i32, 3i32, 4i32)
    );

    assert_eq!(vec2s!(1i32, 2i32).len(), 2);
    assert_eq!(vec3s!(1i32, 2i32, 3i32).len(), 3);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).len(), 4);

    assert_eq!(vec2s!(1i32, 2i32).is_simd(), false);
    assert_eq!(vec3s!(1i32, 2i32, 3i32).is_simd(), false);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).is_simd(), false);

    assert_eq!(vec2s!(1i32, 2i32).get(0), Some(1i32));
    assert_eq!(vec2s!(1i32, 2i32).get(1), Some(2i32));
    assert_eq!(vec2s!(1i32, 2i32).get(2), None);
    assert_eq!(vec2s!(1i32, 2i32).get(3), None);

    assert_eq!(vec3s!(1i32, 2i32, 3i32).get(0), Some(1i32));
    assert_eq!(vec3s!(1i32, 2i32, 3i32).get(1), Some(2i32));
    assert_eq!(vec3s!(1i32, 2i32, 3i32).get(2), Some(3i32));
    assert_eq!(vec3s!(1i32, 2i32, 3i32).get(3), None);
    assert_eq!(vec3s!(1i32, 2i32, 3i32).get(4), None);

    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get(0), Some(1i32));
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get(1), Some(2i32));
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get(2), Some(3i32));
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get(3), Some(4i32));
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get(4), None);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get(5), None);

    assert_eq!(vec2s!(1i32, 2i32).get_mut(0), Some(&mut 1i32));
    assert_eq!(vec2s!(1i32, 2i32).get_mut(1), Some(&mut 2i32));
    assert_eq!(vec2s!(1i32, 2i32).get_mut(2), None);
    assert_eq!(vec2s!(1i32, 2i32).get_mut(3), None);

    assert_eq!(vec3s!(1i32, 2i32, 3i32).get_mut(0), Some(&mut 1i32));
    assert_eq!(vec3s!(1i32, 2i32, 3i32).get_mut(1), Some(&mut 2i32));
    assert_eq!(vec3s!(1i32, 2i32, 3i32).get_mut(2), Some(&mut 3i32));
    assert_eq!(vec3s!(1i32, 2i32, 3i32).get_mut(3), None);
    assert_eq!(vec3s!(1i32, 2i32, 3i32).get_mut(4), None);

    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_mut(0), Some(&mut 1i32));
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_mut(1), Some(&mut 2i32));
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_mut(2), Some(&mut 3i32));
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_mut(3), Some(&mut 4i32));
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_mut(4), None);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_mut(5), None);

    unsafe {
        assert_eq!(vec2s!(1i32, 2i32).get_unchecked(0), 1i32);
        assert_eq!(vec2s!(1i32, 2i32).get_unchecked(1), 2i32);

        assert_eq!(vec3s!(1i32, 2i32, 3i32).get_unchecked(0), 1i32);
        assert_eq!(vec3s!(1i32, 2i32, 3i32).get_unchecked(1), 2i32);
        assert_eq!(vec3s!(1i32, 2i32, 3i32).get_unchecked(2), 3i32);

        assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_unchecked(0), 1i32);
        assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_unchecked(1), 2i32);
        assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_unchecked(2), 3i32);
        assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).get_unchecked(3), 4i32);

        assert_eq!(vec2s!(1i32, 2i32).get_unchecked_mut(0), &mut 1i32);
        assert_eq!(vec2s!(1i32, 2i32).get_unchecked_mut(1), &mut 2i32);

        assert_eq!(vec3s!(1i32, 2i32, 3i32).get_unchecked_mut(0), &mut 1i32);
        assert_eq!(vec3s!(1i32, 2i32, 3i32).get_unchecked_mut(1), &mut 2i32);
        assert_eq!(vec3s!(1i32, 2i32, 3i32).get_unchecked_mut(2), &mut 3i32);

        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).get_unchecked_mut(0),
            &mut 1i32
        );
        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).get_unchecked_mut(1),
            &mut 2i32
        );
        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).get_unchecked_mut(2),
            &mut 3i32
        );
        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).get_unchecked_mut(3),
            &mut 4i32
        );
    }

    assert_eq!(
        vec2s!(1i32, 2i32).iter().collect::<Vec<i32>>(),
        vec![1i32, 2i32]
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).iter().collect::<Vec<i32>>(),
        vec![1i32, 2i32, 3i32]
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).iter().collect::<Vec<i32>>(),
        vec![1i32, 2i32, 3i32, 4i32]
    );

    assert_eq!(
        vec2s!(1i32, 2i32).iter_mut().collect::<Vec<&mut i32>>(),
        vec![&mut 1i32, &mut 2i32]
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32)
            .iter_mut()
            .collect::<Vec<&mut i32>>(),
        vec![&mut 1i32, &mut 2i32, &mut 3i32]
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32)
            .iter_mut()
            .collect::<Vec<&mut i32>>(),
        vec![&mut 1i32, &mut 2i32, &mut 3i32, &mut 4i32]
    );

    assert_eq!(vec2s!(1i32, 2i32).map(|x| x == 2i32), vec2s!(false, true));
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).map(|x| x == 2i32),
        vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).map(|x| x == 2i32),
        vec4s!(false, true, false, false)
    );

    assert_eq!(
        vec2s!(1i32, 2i32).zip(vec2s!(2i32, 1i32)),
        vec2s!((1i32, 2i32), (2i32, 1i32))
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).zip(vec3s!(2i32, 3i32, 1i32)),
        vec3s!((1i32, 2i32), (2i32, 3i32), (3i32, 1i32))
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).zip(vec4s!(2i32, 3i32, 4i32, 1i32)),
        vec4s!((1i32, 2i32), (2i32, 3i32), (3i32, 4i32), (4i32, 1i32))
    );

    assert_eq!(vec2s!(1i32, 2i32).reverse(), vec2s!(2i32, 1i32));
    assert_eq!(vec3s!(1i32, 2i32, 3i32).reverse(), vec3s!(3i32, 2i32, 1i32));
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).reverse(),
        vec4s!(4i32, 3i32, 2i32, 1i32)
    );

    assert_eq!(
        vec2s!(1i32, 2i32).get_const_vec2::<0, 1>(),
        vec2s!(1i32, 2i32)
    );
    assert_eq!(
        vec2s!(1i32, 2i32).get_const_vec2::<1, 0>(),
        vec2s!(2i32, 1i32)
    );
    assert_eq!(
        vec2s!(1i32, 2i32).get_const_vec2::<1, 1>(),
        vec2s!(2i32, 2i32)
    );

    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec2::<0, 1>(),
        vec2s!(1i32, 2i32)
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec2::<0, 2>(),
        vec2s!(1i32, 3i32)
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec2::<2, 1>(),
        vec2s!(3i32, 2i32)
    );

    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec2::<0, 1>(),
        vec2s!(1i32, 2i32)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec2::<1, 3>(),
        vec2s!(2i32, 4i32)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec2::<3, 1>(),
        vec2s!(4i32, 2i32)
    );

    assert_eq!(
        vec2s!(1i32, 2i32).get_const_vec3::<0, 1, 1>(),
        vec3s!(1i32, 2i32, 2i32)
    );
    assert_eq!(
        vec2s!(1i32, 2i32).get_const_vec3::<1, 0, 1>(),
        vec3s!(2i32, 1i32, 2i32)
    );

    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec3::<0, 1, 2>(),
        vec3s!(1i32, 2i32, 3i32)
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec3::<1, 0, 2>(),
        vec3s!(2i32, 1i32, 3i32)
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec3::<2, 1, 0>(),
        vec3s!(3i32, 2i32, 1i32)
    );

    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec3::<0, 1, 2>(),
        vec3s!(1i32, 2i32, 3i32)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec3::<1, 0, 2>(),
        vec3s!(2i32, 1i32, 3i32)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec3::<2, 1, 0>(),
        vec3s!(3i32, 2i32, 1i32)
    );

    assert_eq!(
        vec2s!(1i32, 2i32).get_const_vec4::<0, 1, 1, 0>(),
        vec4s!(1i32, 2i32, 2i32, 1i32)
    );
    assert_eq!(
        vec2s!(1i32, 2i32).get_const_vec4::<1, 0, 1, 0>(),
        vec4s!(2i32, 1i32, 2i32, 1i32)
    );
    assert_eq!(
        vec2s!(1i32, 2i32).get_const_vec4::<1, 1, 0, 0>(),
        vec4s!(2i32, 2i32, 1i32, 1i32)
    );

    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec4::<0, 1, 2, 0>(),
        vec4s!(1i32, 2i32, 3i32, 1i32)
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec4::<1, 0, 2, 0>(),
        vec4s!(2i32, 1i32, 3i32, 1i32)
    );
    assert_eq!(
        vec3s!(1i32, 2i32, 3i32).get_const_vec4::<2, 1, 0, 0>(),
        vec4s!(3i32, 2i32, 1i32, 1i32)
    );

    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec4::<0, 1, 2, 3>(),
        vec4s!(1i32, 2i32, 3i32, 4i32)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec4::<1, 0, 2, 3>(),
        vec4s!(2i32, 1i32, 3i32, 4i32)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec4::<2, 1, 0, 3>(),
        vec4s!(3i32, 2i32, 1i32, 4i32)
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32).get_const_vec4::<3, 1, 2, 0>(),
        vec4s!(4i32, 2i32, 3i32, 1i32)
    );

    assert_eq!(vec2s!(1i32, 2i32)[0], 1i32);
    assert_eq!(vec2s!(1i32, 2i32)[1], 2i32);

    assert_eq!(vec3s!(1i32, 2i32, 3i32)[0], 1i32);
    assert_eq!(vec3s!(1i32, 2i32, 3i32)[1], 2i32);
    assert_eq!(vec3s!(1i32, 2i32, 3i32)[2], 3i32);

    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32)[0], 1i32);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32)[1], 2i32);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32)[2], 3i32);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32)[3], 4i32);

    assert_eq!(&mut vec2s!(1i32, 2i32)[0], &mut 1i32);
    assert_eq!(&mut vec2s!(1i32, 2i32)[1], &mut 2i32);

    assert_eq!(&mut vec3s!(1i32, 2i32, 3i32)[0], &mut 1i32);
    assert_eq!(&mut vec3s!(1i32, 2i32, 3i32)[1], &mut 2i32);
    assert_eq!(&mut vec3s!(1i32, 2i32, 3i32)[2], &mut 3i32);

    assert_eq!(&mut vec4s!(1i32, 2i32, 3i32, 4i32)[0], &mut 1i32);
    assert_eq!(&mut vec4s!(1i32, 2i32, 3i32, 4i32)[1], &mut 2i32);
    assert_eq!(&mut vec4s!(1i32, 2i32, 3i32, 4i32)[2], &mut 3i32);
    assert_eq!(&mut vec4s!(1i32, 2i32, 3i32, 4i32)[3], &mut 4i32);

    assert_eq!(vec2s!(1i32, 2i32) == vec2s!(1i32, 2i32), true);
    assert_eq!(vec2s!(1i32, 2i32) == vec2s!(2i32, 1i32), false);
    assert_eq!(vec2s!(1i32, 2i32) == vec2s!(2i32, 2i32), false);

    assert_eq!(vec3s!(1i32, 2i32, 3i32) == vec3s!(1i32, 2i32, 3i32), true);
    assert_eq!(vec3s!(1i32, 2i32, 3i32) == vec3s!(4i32, 3i32, 2i32), false);
    assert_eq!(vec3s!(1i32, 2i32, 3i32) == vec3s!(2i32, 2i32, 3i32), false);

    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32) == vec4s!(1i32, 2i32, 3i32, 4i32),
        true
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32) == vec4s!(4i32, 3i32, 2i32, 1i32),
        false
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32) == vec4s!(2i32, 2i32, 2i32, 4i32),
        false
    );

    assert_eq!(vec2s!(1i32, 2i32) != vec2s!(1i32, 2i32), false);
    assert_eq!(vec2s!(1i32, 2i32) != vec2s!(2i32, 1i32), true);
    assert_eq!(vec2s!(1i32, 2i32) != vec2s!(2i32, 2i32), true);

    assert_eq!(vec3s!(1i32, 2i32, 3i32) != vec3s!(1i32, 2i32, 3i32), false);
    assert_eq!(vec3s!(1i32, 2i32, 3i32) != vec3s!(4i32, 3i32, 2i32), true);
    assert_eq!(vec3s!(1i32, 2i32, 3i32) != vec3s!(2i32, 2i32, 3i32), true);

    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32) != vec4s!(1i32, 2i32, 3i32, 4i32),
        false
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32) != vec4s!(4i32, 3i32, 2i32, 1i32),
        true
    );
    assert_eq!(
        vec4s!(1i32, 2i32, 3i32, 4i32) != vec4s!(2i32, 2i32, 2i32, 4i32),
        true
    );

    assert_eq!(vec2s!(1i32, 2i32).to_string(), "(1, 2)");
    assert_eq!(vec3s!(1i32, 2i32, 3i32).to_string(), "(1, 2, 3)");
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2s!(1i32, 2i32)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3s!(1i32, 2i32, 3i32)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4s!(1i32, 2i32, 3i32, 4i32)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2s!(1i32, 2i32).x, 1i32);
    assert_eq!(vec2s!(1i32, 2i32).y, 2i32);

    assert_eq!(vec3s!(1i32, 2i32, 3i32).x, 1i32);
    assert_eq!(vec3s!(1i32, 2i32, 3i32).y, 2i32);
    assert_eq!(vec3s!(1i32, 2i32, 3i32).z, 3i32);

    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).x, 1i32);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).y, 2i32);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).z, 3i32);
    assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).w, 4i32);

    assert_eq!(&mut vec2s!(1i32, 2i32).x, &mut 1i32);
    assert_eq!(&mut vec2s!(1i32, 2i32).y, &mut 2i32);

    assert_eq!(&mut vec3s!(1i32, 2i32, 3i32).x, &mut 1i32);
    assert_eq!(&mut vec3s!(1i32, 2i32, 3i32).y, &mut 2i32);
    assert_eq!(&mut vec3s!(1i32, 2i32, 3i32).z, &mut 3i32);

    assert_eq!(&mut vec4s!(1i32, 2i32, 3i32, 4i32).x, &mut 1i32);
    assert_eq!(&mut vec4s!(1i32, 2i32, 3i32, 4i32).y, &mut 2i32);
    assert_eq!(&mut vec4s!(1i32, 2i32, 3i32, 4i32).z, &mut 3i32);
    assert_eq!(&mut vec4s!(1i32, 2i32, 3i32, 4i32).w, &mut 4i32);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2s!(1i32, 2i32).xy(), vec2s!(1i32, 2i32));
        assert_eq!(vec2s!(1i32, 2i32).yx(), vec2s!(2i32, 1i32));
        assert_eq!(vec2s!(1i32, 2i32).yy(), vec2s!(2i32, 2i32));

        assert_eq!(vec3s!(1i32, 2i32, 3i32).xy(), vec2s!(1i32, 2i32));
        assert_eq!(vec3s!(1i32, 2i32, 3i32).xz(), vec2s!(1i32, 3i32));
        assert_eq!(vec3s!(1i32, 2i32, 3i32).zy(), vec2s!(3i32, 2i32));

        assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).xy(), vec2s!(1i32, 2i32));
        assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).yw(), vec2s!(2i32, 4i32));
        assert_eq!(vec4s!(1i32, 2i32, 3i32, 4i32).wy(), vec2s!(4i32, 2i32));

        assert_eq!(vec2s!(1i32, 2i32).xyy(), vec3s!(1i32, 2i32, 2i32));
        assert_eq!(vec2s!(1i32, 2i32).yxy(), vec3s!(2i32, 1i32, 2i32));

        assert_eq!(vec3s!(1i32, 2i32, 3i32).xyz(), vec3s!(1i32, 2i32, 3i32));
        assert_eq!(vec3s!(1i32, 2i32, 3i32).yxz(), vec3s!(2i32, 1i32, 3i32));
        assert_eq!(vec3s!(1i32, 2i32, 3i32).zyx(), vec3s!(3i32, 2i32, 1i32));

        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).xyz(),
            vec3s!(1i32, 2i32, 3i32)
        );
        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).yxz(),
            vec3s!(2i32, 1i32, 3i32)
        );
        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).zyx(),
            vec3s!(3i32, 2i32, 1i32)
        );

        assert_eq!(vec2s!(1i32, 2i32).xyyx(), vec4s!(1i32, 2i32, 2i32, 1i32));
        assert_eq!(vec2s!(1i32, 2i32).yxyx(), vec4s!(2i32, 1i32, 2i32, 1i32));
        assert_eq!(vec2s!(1i32, 2i32).yyxx(), vec4s!(2i32, 2i32, 1i32, 1i32));

        assert_eq!(
            vec3s!(1i32, 2i32, 3i32).xyzx(),
            vec4s!(1i32, 2i32, 3i32, 1i32)
        );
        assert_eq!(
            vec3s!(1i32, 2i32, 3i32).yxzx(),
            vec4s!(2i32, 1i32, 3i32, 1i32)
        );
        assert_eq!(
            vec3s!(1i32, 2i32, 3i32).zyxx(),
            vec4s!(3i32, 2i32, 1i32, 1i32)
        );

        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).xyzw(),
            vec4s!(1i32, 2i32, 3i32, 4i32)
        );
        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).yxzw(),
            vec4s!(2i32, 1i32, 3i32, 4i32)
        );
        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).zyxw(),
            vec4s!(3i32, 2i32, 1i32, 4i32)
        );
        assert_eq!(
            vec4s!(1i32, 2i32, 3i32, 4i32).wyzx(),
            vec4s!(4i32, 2i32, 3i32, 1i32)
        );
    }
}

#[test]
#[should_panic]
fn test_vec2s_index_panic() {
    vec2!(1i32, 2i32)[2];
}

#[test]
#[should_panic]
fn test_vec3s_index_panic() {
    vec3!(1i32, 2i32, 3i32)[3];
}

#[test]
#[should_panic]
fn test_vec4s_index_panic() {
    vec4!(1i32, 2i32, 3i32, 4i32)[4];
}
