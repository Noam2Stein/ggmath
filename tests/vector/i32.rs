// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<i32>>() == size_of::<[i32; 2]>());

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(0i32, 1i32).align(), vec2!(0i32, 1i32));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(0i32, 1i32).pack(), vec2p!(0i32, 1i32));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(Vec2::from_array([0i32, 1i32]).as_array(), [0i32, 1i32]);
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(0i32), vec2!(0i32, 0i32));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(0i32, 1i32).index(0), 0i32);
    assert_eq!(vec2!(0i32, 1i32).index(1), 1i32);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(0i32, 1i32).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(0i32, 1i32).get(0), Some(0i32));
    assert_eq!(vec2!(0i32, 1i32).get(1), Some(1i32));

    assert_eq!(vec2!(0i32, 1i32).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(0i32, 1i32).get_unchecked(0), 0i32);
        assert_eq!(vec2!(0i32, 1i32).get_unchecked(1), 1i32);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(0i32, 1i32);
        vec.set(0, 50i32);

        assert_eq!(vec, vec2!(50i32, 1i32));
    }
    {
        let mut vec = vec2!(0i32, 1i32);
        vec.set(1, 50i32);

        assert_eq!(vec, vec2!(0i32, 50i32));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(0i32, 1i32);
    vec.set(2, 0i32);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(0i32, 1i32);
        vec.try_set(0, 50i32).unwrap();

        assert_eq!(vec, vec2!(50i32, 1i32));
    }
    {
        let mut vec = vec2!(0i32, 1i32);
        vec.try_set(1, 50i32).unwrap();

        assert_eq!(vec, vec2!(0i32, 50i32));
    }

    assert_eq!(
        vec2!(0i32, 1i32).try_set(2, 0i32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(0i32, 1i32);
            vec.set_unchecked(0, 50i32);

            assert_eq!(vec, vec2!(50i32, 1i32));
        }
        {
            let mut vec = vec2!(0i32, 1i32);
            vec.set_unchecked(1, 50i32);

            assert_eq!(vec, vec2!(0i32, 50i32));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(0i32, 1i32).yx(), vec2!(1i32, 0i32));
    assert_eq!(vec2!(0i32, 1i32).yxy(), vec3!(1i32, 0i32, 1i32));
    assert_eq!(vec2!(0i32, 1i32).yxyy(), vec4!(1i32, 0i32, 1i32, 1i32));
}

#[test]
fn test_vec2_fold() {
    assert_eq!(
        vec2!(0i32, 1i32).fold(13, |acc, x| acc + x),
        13 + 0i32 + 1i32
    );
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(vec2!(0i32, 1i32).reduce(|acc, x| acc + x), 0i32 + 1i32);
}

#[test]
fn test_vec2p_align() {
    assert_eq!(vec2p!(0i32, 1i32).align(), vec2!(0i32, 1i32));
}

#[test]
fn test_vec2p_pack() {
    assert_eq!(vec2p!(0i32, 1i32).pack(), vec2p!(0i32, 1i32));
}

#[test]
fn test_vec2p_from_array_as_array() {
    assert_eq!(Vec2P::from_array([0i32, 1i32]).as_array(), [0i32, 1i32]);
}

#[test]
fn test_vec2p_splat() {
    assert_eq!(Vec2P::splat(0i32), vec2p!(0i32, 0i32));
}

#[test]
fn test_vec2p_index() {
    assert_eq!(vec2p!(0i32, 1i32).index(0), 0i32);
    assert_eq!(vec2p!(0i32, 1i32).index(1), 1i32);
}

#[test]
#[should_panic]
fn test_vec2p_index_panic() {
    vec2p!(0i32, 1i32).index(2);
}

#[test]
fn test_vec2p_get() {
    assert_eq!(vec2p!(0i32, 1i32).get(0), Some(0i32));
    assert_eq!(vec2p!(0i32, 1i32).get(1), Some(1i32));

    assert_eq!(vec2p!(0i32, 1i32).get(2), None);
}

#[test]
fn test_vec2p_get_unchecked() {
    unsafe {
        assert_eq!(vec2p!(0i32, 1i32).get_unchecked(0), 0i32);
        assert_eq!(vec2p!(0i32, 1i32).get_unchecked(1), 1i32);
    }
}

#[test]
fn test_vec2p_set() {
    {
        let mut vec = vec2p!(0i32, 1i32);
        vec.set(0, 50i32);

        assert_eq!(vec, vec2p!(50i32, 1i32));
    }
    {
        let mut vec = vec2p!(0i32, 1i32);
        vec.set(1, 50i32);

        assert_eq!(vec, vec2p!(0i32, 50i32));
    }
}

#[test]
#[should_panic]
fn test_vec2p_set_panic() {
    let mut vec = vec2p!(0i32, 1i32);
    vec.set(2, 0i32);
}

#[test]
fn test_vec2p_try_set() {
    {
        let mut vec = vec2p!(0i32, 1i32);
        vec.try_set(0, 50i32).unwrap();

        assert_eq!(vec, vec2p!(50i32, 1i32));
    }
    {
        let mut vec = vec2p!(0i32, 1i32);
        vec.try_set(1, 50i32).unwrap();

        assert_eq!(vec, vec2p!(0i32, 50i32));
    }

    assert_eq!(
        vec2p!(0i32, 1i32).try_set(2, 0i32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2p!(0i32, 1i32);
            vec.set_unchecked(0, 50i32);

            assert_eq!(vec, vec2p!(50i32, 1i32));
        }
        {
            let mut vec = vec2p!(0i32, 1i32);
            vec.set_unchecked(1, 50i32);

            assert_eq!(vec, vec2p!(0i32, 50i32));
        }
    }
}

#[test]
fn test_vec2p_swizzle() {
    assert_eq!(vec2p!(0i32, 1i32).yx(), vec2p!(1i32, 0i32));
    assert_eq!(vec2p!(0i32, 1i32).yxy(), vec3p!(1i32, 0i32, 1i32));
    assert_eq!(vec2p!(0i32, 1i32).yxyy(), vec4p!(1i32, 0i32, 1i32, 1i32));
}

#[test]
fn test_vec2p_fold() {
    assert_eq!(
        vec2p!(0i32, 1i32).fold(13, |acc, x| acc + x),
        13 + 0i32 + 1i32
    );
}

#[test]
fn test_vec2p_reduce() {
    assert_eq!(vec2p!(0i32, 1i32).reduce(|acc, x| acc + x), 0i32 + 1i32);
}

const _: () = assert!(size_of::<Vec3P<i32>>() == size_of::<[i32; 3]>());

#[test]
fn test_vec3_align() {
    assert_eq!(vec3!(0i32, 1i32, 2i32).align(), vec3!(0i32, 1i32, 2i32));
}

#[test]
fn test_vec3_pack() {
    assert_eq!(vec3!(0i32, 1i32, 2i32).pack(), vec3p!(0i32, 1i32, 2i32));
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([0i32, 1i32, 2i32]).as_array(),
        [0i32, 1i32, 2i32]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(0i32), vec3!(0i32, 0i32, 0i32));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(0i32, 1i32, 2i32).index(0), 0i32);
    assert_eq!(vec3!(0i32, 1i32, 2i32).index(1), 1i32);
    assert_eq!(vec3!(0i32, 1i32, 2i32).index(2), 2i32);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(0i32, 1i32, 2i32).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(0i32, 1i32, 2i32).get(0), Some(0i32));
    assert_eq!(vec3!(0i32, 1i32, 2i32).get(1), Some(1i32));
    assert_eq!(vec3!(0i32, 1i32, 2i32).get(2), Some(2i32));

    assert_eq!(vec3!(0i32, 1i32, 2i32).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(0i32, 1i32, 2i32).get_unchecked(0), 0i32);
        assert_eq!(vec3!(0i32, 1i32, 2i32).get_unchecked(1), 1i32);
        assert_eq!(vec3!(0i32, 1i32, 2i32).get_unchecked(2), 2i32);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(0i32, 1i32, 2i32);
        vec.set(0, 50i32);

        assert_eq!(vec, vec3!(50i32, 1i32, 2i32));
    }
    {
        let mut vec = vec3!(0i32, 1i32, 2i32);
        vec.set(1, 50i32);

        assert_eq!(vec, vec3!(0i32, 50i32, 2i32));
    }
    {
        let mut vec = vec3!(0i32, 1i32, 2i32);
        vec.set(2, 50i32);

        assert_eq!(vec, vec3!(0i32, 1i32, 50i32));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(0i32, 1i32, 2i32);
    vec.set(3, 0i32);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(0i32, 1i32, 2i32);
        vec.try_set(0, 50i32).unwrap();

        assert_eq!(vec, vec3!(50i32, 1i32, 2i32));
    }
    {
        let mut vec = vec3!(0i32, 1i32, 2i32);
        vec.try_set(1, 50i32).unwrap();

        assert_eq!(vec, vec3!(0i32, 50i32, 2i32));
    }
    {
        let mut vec = vec3!(0i32, 1i32, 2i32);
        vec.try_set(2, 50i32).unwrap();

        assert_eq!(vec, vec3!(0i32, 1i32, 50i32));
    }

    assert_eq!(
        vec3!(0i32, 1i32, 2i32).try_set(3, 0i32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(0i32, 1i32, 2i32);
            vec.set_unchecked(0, 50i32);

            assert_eq!(vec, vec3!(50i32, 1i32, 2i32));
        }
        {
            let mut vec = vec3!(0i32, 1i32, 2i32);
            vec.set_unchecked(1, 50i32);

            assert_eq!(vec, vec3!(0i32, 50i32, 2i32));
        }
        {
            let mut vec = vec3!(0i32, 1i32, 2i32);
            vec.set_unchecked(2, 50i32);

            assert_eq!(vec, vec3!(0i32, 1i32, 50i32));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(0i32, 1i32, 2i32).zx(), vec2!(2i32, 0i32));
    assert_eq!(vec3!(0i32, 1i32, 2i32).zxy(), vec3!(2i32, 0i32, 1i32));
    assert_eq!(
        vec3!(0i32, 1i32, 2i32).zxyz(),
        vec4!(2i32, 0i32, 1i32, 2i32)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(0i32, 1i32, 2i32).fold(13, |acc, x| acc + x),
        13 + 0i32 + 1i32 + 2i32
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(
        vec3!(0i32, 1i32, 2i32).reduce(|acc, x| acc + x),
        0i32 + 1i32 + 2i32
    );
}

#[test]
fn test_vec3p_align() {
    assert_eq!(vec3p!(0i32, 1i32, 2i32).align(), vec3!(0i32, 1i32, 2i32));
}

#[test]
fn test_vec3p_pack() {
    assert_eq!(vec3p!(0i32, 1i32, 2i32).pack(), vec3p!(0i32, 1i32, 2i32));
}

#[test]
fn test_vec3p_from_array_as_array() {
    assert_eq!(
        Vec3P::from_array([0i32, 1i32, 2i32]).as_array(),
        [0i32, 1i32, 2i32]
    );
}

#[test]
fn test_vec3p_splat() {
    assert_eq!(Vec3P::splat(0i32), vec3p!(0i32, 0i32, 0i32));
}

#[test]
fn test_vec3p_index() {
    assert_eq!(vec3p!(0i32, 1i32, 2i32).index(0), 0i32);
    assert_eq!(vec3p!(0i32, 1i32, 2i32).index(1), 1i32);
    assert_eq!(vec3p!(0i32, 1i32, 2i32).index(2), 2i32);
}

#[test]
#[should_panic]
fn test_vec3p_index_panic() {
    vec3p!(0i32, 1i32, 2i32).index(3);
}

#[test]
fn test_vec3p_get() {
    assert_eq!(vec3p!(0i32, 1i32, 2i32).get(0), Some(0i32));
    assert_eq!(vec3p!(0i32, 1i32, 2i32).get(1), Some(1i32));
    assert_eq!(vec3p!(0i32, 1i32, 2i32).get(2), Some(2i32));

    assert_eq!(vec3p!(0i32, 1i32, 2i32).get(3), None);
}

#[test]
fn test_vec3p_get_unchecked() {
    unsafe {
        assert_eq!(vec3p!(0i32, 1i32, 2i32).get_unchecked(0), 0i32);
        assert_eq!(vec3p!(0i32, 1i32, 2i32).get_unchecked(1), 1i32);
        assert_eq!(vec3p!(0i32, 1i32, 2i32).get_unchecked(2), 2i32);
    }
}

#[test]
fn test_vec3p_set() {
    {
        let mut vec = vec3p!(0i32, 1i32, 2i32);
        vec.set(0, 50i32);

        assert_eq!(vec, vec3p!(50i32, 1i32, 2i32));
    }
    {
        let mut vec = vec3p!(0i32, 1i32, 2i32);
        vec.set(1, 50i32);

        assert_eq!(vec, vec3p!(0i32, 50i32, 2i32));
    }
    {
        let mut vec = vec3p!(0i32, 1i32, 2i32);
        vec.set(2, 50i32);

        assert_eq!(vec, vec3p!(0i32, 1i32, 50i32));
    }
}

#[test]
#[should_panic]
fn test_vec3p_set_panic() {
    let mut vec = vec3p!(0i32, 1i32, 2i32);
    vec.set(3, 0i32);
}

#[test]
fn test_vec3p_try_set() {
    {
        let mut vec = vec3p!(0i32, 1i32, 2i32);
        vec.try_set(0, 50i32).unwrap();

        assert_eq!(vec, vec3p!(50i32, 1i32, 2i32));
    }
    {
        let mut vec = vec3p!(0i32, 1i32, 2i32);
        vec.try_set(1, 50i32).unwrap();

        assert_eq!(vec, vec3p!(0i32, 50i32, 2i32));
    }
    {
        let mut vec = vec3p!(0i32, 1i32, 2i32);
        vec.try_set(2, 50i32).unwrap();

        assert_eq!(vec, vec3p!(0i32, 1i32, 50i32));
    }

    assert_eq!(
        vec3p!(0i32, 1i32, 2i32).try_set(3, 0i32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3p!(0i32, 1i32, 2i32);
            vec.set_unchecked(0, 50i32);

            assert_eq!(vec, vec3p!(50i32, 1i32, 2i32));
        }
        {
            let mut vec = vec3p!(0i32, 1i32, 2i32);
            vec.set_unchecked(1, 50i32);

            assert_eq!(vec, vec3p!(0i32, 50i32, 2i32));
        }
        {
            let mut vec = vec3p!(0i32, 1i32, 2i32);
            vec.set_unchecked(2, 50i32);

            assert_eq!(vec, vec3p!(0i32, 1i32, 50i32));
        }
    }
}

#[test]
fn test_vec3p_swizzle() {
    assert_eq!(vec3p!(0i32, 1i32, 2i32).zx(), vec2p!(2i32, 0i32));
    assert_eq!(vec3p!(0i32, 1i32, 2i32).zxy(), vec3p!(2i32, 0i32, 1i32));
    assert_eq!(
        vec3p!(0i32, 1i32, 2i32).zxyz(),
        vec4p!(2i32, 0i32, 1i32, 2i32)
    );
}

#[test]
fn test_vec3p_fold() {
    assert_eq!(
        vec3p!(0i32, 1i32, 2i32).fold(13, |acc, x| acc + x),
        13 + 0i32 + 1i32 + 2i32
    );
}

#[test]
fn test_vec3p_reduce() {
    assert_eq!(
        vec3p!(0i32, 1i32, 2i32).reduce(|acc, x| acc + x),
        0i32 + 1i32 + 2i32
    );
}

const _: () = assert!(size_of::<Vec4P<i32>>() == size_of::<[i32; 4]>());

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(0i32, 1i32, 2i32, 3i32).align(),
        vec4!(0i32, 1i32, 2i32, 3i32)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(0i32, 1i32, 2i32, 3i32).pack(),
        vec4p!(0i32, 1i32, 2i32, 3i32)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0i32, 1i32, 2i32, 3i32]).as_array(),
        [0i32, 1i32, 2i32, 3i32]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0i32), vec4!(0i32, 0i32, 0i32, 0i32));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).index(0), 0i32);
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).index(1), 1i32);
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).index(2), 2i32);
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).index(3), 3i32);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0i32, 1i32, 2i32, 3i32).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get(0), Some(0i32));
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get(1), Some(1i32));
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get(2), Some(2i32));
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get(3), Some(3i32));

    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get_unchecked(0), 0i32);
        assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get_unchecked(1), 1i32);
        assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get_unchecked(2), 2i32);
        assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).get_unchecked(3), 3i32);
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
        vec.set(0, 50i32);

        assert_eq!(vec, vec4!(50i32, 1i32, 2i32, 3i32));
    }
    {
        let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
        vec.set(1, 50i32);

        assert_eq!(vec, vec4!(0i32, 50i32, 2i32, 3i32));
    }
    {
        let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
        vec.set(2, 50i32);

        assert_eq!(vec, vec4!(0i32, 1i32, 50i32, 3i32));
    }
    {
        let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
        vec.set(3, 50i32);

        assert_eq!(vec, vec4!(0i32, 1i32, 2i32, 50i32));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
    vec.set(4, 0i32);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
        vec.try_set(0, 50i32).unwrap();

        assert_eq!(vec, vec4!(50i32, 1i32, 2i32, 3i32));
    }
    {
        let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
        vec.try_set(1, 50i32).unwrap();

        assert_eq!(vec, vec4!(0i32, 50i32, 2i32, 3i32));
    }
    {
        let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
        vec.try_set(2, 50i32).unwrap();

        assert_eq!(vec, vec4!(0i32, 1i32, 50i32, 3i32));
    }
    {
        let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
        vec.try_set(3, 50i32).unwrap();

        assert_eq!(vec, vec4!(0i32, 1i32, 2i32, 50i32));
    }

    assert_eq!(
        vec4!(0i32, 1i32, 2i32, 3i32).try_set(4, 0i32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
            vec.set_unchecked(0, 50i32);

            assert_eq!(vec, vec4!(50i32, 1i32, 2i32, 3i32));
        }
        {
            let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
            vec.set_unchecked(1, 50i32);

            assert_eq!(vec, vec4!(0i32, 50i32, 2i32, 3i32));
        }
        {
            let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
            vec.set_unchecked(2, 50i32);

            assert_eq!(vec, vec4!(0i32, 1i32, 50i32, 3i32));
        }
        {
            let mut vec = vec4!(0i32, 1i32, 2i32, 3i32);
            vec.set_unchecked(3, 50i32);

            assert_eq!(vec, vec4!(0i32, 1i32, 2i32, 50i32));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).zw(), vec2!(2i32, 3i32));
    assert_eq!(vec4!(0i32, 1i32, 2i32, 3i32).zwy(), vec3!(2i32, 3i32, 1i32));
    assert_eq!(
        vec4!(0i32, 1i32, 2i32, 3i32).zwyz(),
        vec4!(2i32, 3i32, 1i32, 2i32)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0i32, 1i32, 2i32, 3i32).fold(13, |acc, x| acc + x),
        13 + 0i32 + 1i32 + 2i32 + 3i32
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0i32, 1i32, 2i32, 3i32).reduce(|acc, x| acc + x),
        0i32 + 1i32 + 2i32 + 3i32
    );
}

#[test]
fn test_vec4p_align() {
    assert_eq!(
        vec4p!(0i32, 1i32, 2i32, 3i32).align(),
        vec4!(0i32, 1i32, 2i32, 3i32)
    );
}

#[test]
fn test_vec4p_pack() {
    assert_eq!(
        vec4p!(0i32, 1i32, 2i32, 3i32).pack(),
        vec4p!(0i32, 1i32, 2i32, 3i32)
    );
}

#[test]
fn test_vec4p_from_array_as_array() {
    assert_eq!(
        Vec4P::from_array([0i32, 1i32, 2i32, 3i32]).as_array(),
        [0i32, 1i32, 2i32, 3i32]
    );
}

#[test]
fn test_vec4p_splat() {
    assert_eq!(Vec4P::splat(0i32), vec4p!(0i32, 0i32, 0i32, 0i32));
}

#[test]
fn test_vec4p_index() {
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).index(0), 0i32);
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).index(1), 1i32);
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).index(2), 2i32);
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).index(3), 3i32);
}

#[test]
#[should_panic]
fn test_vec4p_index_panic() {
    vec4p!(0i32, 1i32, 2i32, 3i32).index(4);
}

#[test]
fn test_vec4p_get() {
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get(0), Some(0i32));
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get(1), Some(1i32));
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get(2), Some(2i32));
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get(3), Some(3i32));

    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get(4), None);
}

#[test]
fn test_vec4p_get_unchecked() {
    unsafe {
        assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get_unchecked(0), 0i32);
        assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get_unchecked(1), 1i32);
        assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get_unchecked(2), 2i32);
        assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).get_unchecked(3), 3i32);
    }
}

#[test]
fn test_vec4p_set() {
    {
        let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
        vec.set(0, 50i32);

        assert_eq!(vec, vec4p!(50i32, 1i32, 2i32, 3i32));
    }
    {
        let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
        vec.set(1, 50i32);

        assert_eq!(vec, vec4p!(0i32, 50i32, 2i32, 3i32));
    }
    {
        let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
        vec.set(2, 50i32);

        assert_eq!(vec, vec4p!(0i32, 1i32, 50i32, 3i32));
    }
    {
        let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
        vec.set(3, 50i32);

        assert_eq!(vec, vec4p!(0i32, 1i32, 2i32, 50i32));
    }
}

#[test]
#[should_panic]
fn test_vec4p_set_panic() {
    let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
    vec.set(4, 0i32);
}

#[test]
fn test_vec4p_try_set() {
    {
        let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
        vec.try_set(0, 50i32).unwrap();

        assert_eq!(vec, vec4p!(50i32, 1i32, 2i32, 3i32));
    }
    {
        let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
        vec.try_set(1, 50i32).unwrap();

        assert_eq!(vec, vec4p!(0i32, 50i32, 2i32, 3i32));
    }
    {
        let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
        vec.try_set(2, 50i32).unwrap();

        assert_eq!(vec, vec4p!(0i32, 1i32, 50i32, 3i32));
    }
    {
        let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
        vec.try_set(3, 50i32).unwrap();

        assert_eq!(vec, vec4p!(0i32, 1i32, 2i32, 50i32));
    }

    assert_eq!(
        vec4p!(0i32, 1i32, 2i32, 3i32).try_set(4, 0i32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
            vec.set_unchecked(0, 50i32);

            assert_eq!(vec, vec4p!(50i32, 1i32, 2i32, 3i32));
        }
        {
            let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
            vec.set_unchecked(1, 50i32);

            assert_eq!(vec, vec4p!(0i32, 50i32, 2i32, 3i32));
        }
        {
            let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
            vec.set_unchecked(2, 50i32);

            assert_eq!(vec, vec4p!(0i32, 1i32, 50i32, 3i32));
        }
        {
            let mut vec = vec4p!(0i32, 1i32, 2i32, 3i32);
            vec.set_unchecked(3, 50i32);

            assert_eq!(vec, vec4p!(0i32, 1i32, 2i32, 50i32));
        }
    }
}

#[test]
fn test_vec4p_swizzle() {
    assert_eq!(vec4p!(0i32, 1i32, 2i32, 3i32).zw(), vec2p!(2i32, 3i32));
    assert_eq!(
        vec4p!(0i32, 1i32, 2i32, 3i32).zwy(),
        vec3p!(2i32, 3i32, 1i32)
    );
    assert_eq!(
        vec4p!(0i32, 1i32, 2i32, 3i32).zwyz(),
        vec4p!(2i32, 3i32, 1i32, 2i32)
    );
}

#[test]
fn test_vec4p_fold() {
    assert_eq!(
        vec4p!(0i32, 1i32, 2i32, 3i32).fold(13, |acc, x| acc + x),
        13 + 0i32 + 1i32 + 2i32 + 3i32
    );
}

#[test]
fn test_vec4p_reduce() {
    assert_eq!(
        vec4p!(0i32, 1i32, 2i32, 3i32).reduce(|acc, x| acc + x),
        0i32 + 1i32 + 2i32 + 3i32
    );
}
