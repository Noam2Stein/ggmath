// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_nonsimd_i64_vec_layout() {
    assert_eq!(size_of::<Vec2S<i64>>(), size_of::<i64>() * 2);
    assert_eq!(size_of::<Vec3S<i64>>(), size_of::<i64>() * 3);
    assert_eq!(size_of::<Vec4S<i64>>(), size_of::<i64>() * 4);

    assert_eq!(align_of::<Vec2S<i64>>(), align_of::<i64>());
    assert_eq!(align_of::<Vec3S<i64>>(), align_of::<i64>());
    assert_eq!(align_of::<Vec4S<i64>>(), align_of::<i64>());
}

#[test]
fn test_simd_i64_vec_constructors() {
    assert_eq!(Vec2::from_array([1i64, 2i64]).as_array(), [1i64, 2i64]);
    assert_eq!(
        Vec3::from_array([1i64, 2i64, 3i64]).as_array(),
        [1i64, 2i64, 3i64]
    );
    assert_eq!(
        Vec4::from_array([1i64, 2i64, 3i64, 4i64]).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );

    assert_eq!(Vec2::splat(1i64).as_array(), [1i64; 2]);
    assert_eq!(Vec3::splat(1i64).as_array(), [1i64; 3]);
    assert_eq!(Vec4::splat(1i64).as_array(), [1i64; 4]);

    assert_eq!(Vec2::from_fn(|i| [1i64, 2i64][i]).as_array(), [1i64, 2i64]);
    assert_eq!(
        Vec3::from_fn(|i| [1i64, 2i64, 3i64][i]).as_array(),
        [1i64, 2i64, 3i64]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1i64, 2i64, 3i64, 4i64][i]).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );

    assert_eq!(
        Vec2::const_from_array([1i64, 2i64]).as_array(),
        [1i64, 2i64]
    );
    assert_eq!(
        Vec3::const_from_array([1i64, 2i64, 3i64]).as_array(),
        [1i64, 2i64, 3i64]
    );
    assert_eq!(
        Vec4::const_from_array([1i64, 2i64, 3i64, 4i64]).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );

    assert_eq!(vec2!(1i64, 2i64).as_array(), [1i64, 2i64]);
    assert_eq!(vec2!(vec2!(1i64, 2i64)).as_array(), [1i64, 2i64]);
    assert_eq!(vec3!(1i64, 2i64, 3i64).as_array(), [1i64, 2i64, 3i64]);
    assert_eq!(
        vec3!(1i64, vec2!(2i64, 3i64)).as_array(),
        [1i64, 2i64, 3i64]
    );
    assert_eq!(
        vec4!(1i64, 2i64, 3i64, 4i64).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );
    assert_eq!(
        vec4!(1i64, vec2!(2i64, 3i64), 4i64).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );
    assert_eq!(
        vec4!(
            1i64,
            vec2!(2i64, 3i64),
            Vector::<1, i64, Simd>::from_array([4i64])
        )
        .as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );
}

#[test]
fn test_nonsimd_i64_vec_constructors() {
    assert_eq!(Vec2S::from_array([1i64, 2i64]).as_array(), [1i64, 2i64]);
    assert_eq!(
        Vec3S::from_array([1i64, 2i64, 3i64]).as_array(),
        [1i64, 2i64, 3i64]
    );
    assert_eq!(
        Vec4S::from_array([1i64, 2i64, 3i64, 4i64]).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );

    assert_eq!(Vec2S::splat(1i64).as_array(), [1i64; 2]);
    assert_eq!(Vec3S::splat(1i64).as_array(), [1i64; 3]);
    assert_eq!(Vec4S::splat(1i64).as_array(), [1i64; 4]);

    assert_eq!(Vec2S::from_fn(|i| [1i64, 2i64][i]).as_array(), [1i64, 2i64]);
    assert_eq!(
        Vec3S::from_fn(|i| [1i64, 2i64, 3i64][i]).as_array(),
        [1i64, 2i64, 3i64]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1i64, 2i64, 3i64, 4i64][i]).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );

    assert_eq!(
        Vec2S::const_from_array([1i64, 2i64]).as_array(),
        [1i64, 2i64]
    );
    assert_eq!(
        Vec3S::const_from_array([1i64, 2i64, 3i64]).as_array(),
        [1i64, 2i64, 3i64]
    );
    assert_eq!(
        Vec4S::const_from_array([1i64, 2i64, 3i64, 4i64]).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );

    assert_eq!(vec2s!(1i64, 2i64).as_array(), [1i64, 2i64]);
    assert_eq!(vec2s!(vec2s!(1i64, 2i64)).as_array(), [1i64, 2i64]);
    assert_eq!(vec3s!(1i64, 2i64, 3i64).as_array(), [1i64, 2i64, 3i64]);
    assert_eq!(
        vec3s!(1i64, vec2s!(2i64, 3i64)).as_array(),
        [1i64, 2i64, 3i64]
    );
    assert_eq!(
        vec4s!(1i64, 2i64, 3i64, 4i64).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );
    assert_eq!(
        vec4s!(1i64, vec2s!(2i64, 3i64), 4i64).as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );
    assert_eq!(
        vec4s!(
            1i64,
            vec2s!(2i64, 3i64),
            Vector::<1, i64, NonSimd>::from_array([4i64])
        )
        .as_array(),
        [1i64, 2i64, 3i64, 4i64]
    );
}
