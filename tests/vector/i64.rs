// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::{fmt::Debug, mem::size_of};

use ggmath::*;

fn assert_typed_eq<T: PartialEq + Debug>(a: T, b: T) {
    assert_eq!(a, b);
}

const _: () = assert!(size_of::<Vec2P<i64>>() == size_of::<[i64; 2]>());

#[test]
fn test_vec2_align() {
    assert_typed_eq(vec2!(0, 1).align(), vec2!(0, 1));
}

#[test]
fn test_vec2_pack() {
    assert_typed_eq(vec2!(0, 1).pack(), vec2p!(0, 1));
}

#[test]
fn test_vec2p_align() {
    assert_typed_eq(vec2p!(0, 1).align(), vec2!(0, 1));
}

#[test]
fn test_vec2p_pack() {
    assert_typed_eq(vec2p!(0, 1).pack(), vec2p!(0, 1));
}

const _: () = assert!(size_of::<Vec3P<i64>>() == size_of::<[i64; 3]>());

#[test]
fn test_vec3_align() {
    assert_typed_eq(vec3!(0, 1, 2).align(), vec3!(0, 1, 2));
}

#[test]
fn test_vec3_pack() {
    assert_typed_eq(vec3!(0, 1, 2).pack(), vec3p!(0, 1, 2));
}

#[test]
fn test_vec3p_align() {
    assert_typed_eq(vec3p!(0, 1, 2).align(), vec3!(0, 1, 2));
}

#[test]
fn test_vec3p_pack() {
    assert_typed_eq(vec3p!(0, 1, 2).pack(), vec3p!(0, 1, 2));
}

const _: () = assert!(size_of::<Vec4P<i64>>() == size_of::<[i64; 4]>());

#[test]
fn test_vec4_align() {
    assert_typed_eq(vec4!(0, 1, 2, 3).align(), vec4!(0, 1, 2, 3));
}

#[test]
fn test_vec4_pack() {
    assert_typed_eq(vec4!(0, 1, 2, 3).pack(), vec4p!(0, 1, 2, 3));
}

#[test]
fn test_vec4p_align() {
    assert_typed_eq(vec4p!(0, 1, 2, 3).align(), vec4!(0, 1, 2, 3));
}

#[test]
fn test_vec4p_pack() {
    assert_typed_eq(vec4p!(0, 1, 2, 3).pack(), vec4p!(0, 1, 2, 3));
}
