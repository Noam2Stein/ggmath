// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<isize>>() == size_of::<[isize; 2]>());

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(0isize, 1isize).align(), vec2!(0isize, 1isize));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(0isize, 1isize).pack(), vec2p!(0isize, 1isize));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(
        Vec2::from_array([0isize, 1isize]).as_array(),
        [0isize, 1isize]
    );
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(0isize), vec2!(0isize, 0isize));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(0isize, 1isize).index(0), 0isize);
    assert_eq!(vec2!(0isize, 1isize).index(1), 1isize);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(0isize, 1isize).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(0isize, 1isize).get(0), Some(0isize));
    assert_eq!(vec2!(0isize, 1isize).get(1), Some(1isize));

    assert_eq!(vec2!(0isize, 1isize).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(0isize, 1isize).get_unchecked(0), 0isize);
        assert_eq!(vec2!(0isize, 1isize).get_unchecked(1), 1isize);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(0isize, 1isize);
        vec.set(0, 50isize);

        assert_eq!(vec, vec2!(50isize, 1isize));
    }
    {
        let mut vec = vec2!(0isize, 1isize);
        vec.set(1, 50isize);

        assert_eq!(vec, vec2!(0isize, 50isize));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(0isize, 1isize);
    vec.set(2, 0isize);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(0isize, 1isize);
        vec.try_set(0, 50isize).unwrap();

        assert_eq!(vec, vec2!(50isize, 1isize));
    }
    {
        let mut vec = vec2!(0isize, 1isize);
        vec.try_set(1, 50isize).unwrap();

        assert_eq!(vec, vec2!(0isize, 50isize));
    }

    assert_eq!(
        vec2!(0isize, 1isize).try_set(2, 0isize),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(0isize, 1isize);
            vec.set_unchecked(0, 50isize);

            assert_eq!(vec, vec2!(50isize, 1isize));
        }
        {
            let mut vec = vec2!(0isize, 1isize);
            vec.set_unchecked(1, 50isize);

            assert_eq!(vec, vec2!(0isize, 50isize));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(0isize, 1isize).y(), 1isize);
    assert_eq!(vec2!(0isize, 1isize).yx(), vec2!(1isize, 0isize));
    assert_eq!(vec2!(0isize, 1isize).yxy(), vec3!(1isize, 0isize, 1isize));
    assert_eq!(
        vec2!(0isize, 1isize).yxyy(),
        vec4!(1isize, 0isize, 1isize, 1isize)
    );
}

#[test]
fn test_vec2_fold() {
    assert_eq!(
        vec2!(0isize, 1isize).fold(13, |acc, x| acc + x),
        13 + 0isize + 1isize
    );
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(
        vec2!(0isize, 1isize).reduce(|acc, x| acc + x),
        0isize + 1isize
    );
}

#[test]
fn test_vec2_eq_mask() {
    assert_eq!(
        vec2!(0isize, 1isize).eq_mask(vec2!(0isize, 1isize)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0isize, 1isize).eq_mask(vec2!(0isize, 0isize)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0isize, 1isize).eq_mask(vec2!(2isize, 3isize)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ne_mask() {
    assert_eq!(
        vec2!(0isize, 1isize).ne_mask(vec2!(0isize, 1isize)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0isize, 1isize).ne_mask(vec2!(0isize, 0isize)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0isize, 1isize).ne_mask(vec2!(2isize, 3isize)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_lt_mask() {
    assert_eq!(
        vec2!(0isize, 1isize).lt_mask(vec2!(0isize, 1isize)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0isize, 1isize).lt_mask(vec2!(1isize, 0isize)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0isize, 1isize).lt_mask(vec2!(2isize, 3isize)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2isize, 3isize).lt_mask(vec2!(0isize, 1isize)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_gt_mask() {
    assert_eq!(
        vec2!(0isize, 1isize).gt_mask(vec2!(0isize, 1isize)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0isize, 1isize).gt_mask(vec2!(1isize, 0isize)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0isize, 1isize).gt_mask(vec2!(2isize, 3isize)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2isize, 3isize).gt_mask(vec2!(0isize, 1isize)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_le_mask() {
    assert_eq!(
        vec2!(0isize, 1isize).le_mask(vec2!(0isize, 1isize)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0isize, 1isize).le_mask(vec2!(1isize, 0isize)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0isize, 1isize).le_mask(vec2!(2isize, 3isize)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2isize, 3isize).le_mask(vec2!(0isize, 1isize)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ge_mask() {
    assert_eq!(
        vec2!(0isize, 1isize).ge_mask(vec2!(0isize, 1isize)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0isize, 1isize).ge_mask(vec2!(1isize, 0isize)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0isize, 1isize).ge_mask(vec2!(2isize, 3isize)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2isize, 3isize).ge_mask(vec2!(0isize, 1isize)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_eq() {
    assert_eq!(vec2!(0isize, 1isize) == vec2!(0isize, 1isize), true);
    assert_eq!(vec2!(0isize, 1isize) == vec2!(0isize, 0isize), false);
    assert_eq!(vec2!(0isize, 1isize) == vec2!(2isize, 3isize), false);
}

#[test]
fn test_vec2_ne() {
    assert_eq!(vec2!(0isize, 1isize) != vec2!(0isize, 1isize), false);
    assert_eq!(vec2!(0isize, 1isize) != vec2!(0isize, 0isize), true);
    assert_eq!(vec2!(0isize, 1isize) != vec2!(2isize, 3isize), true);
}

#[test]
fn test_vec2_debug() {
    assert_eq!(format!("{:?}", vec2!(0isize, 1isize)), "(0, 1)");
}

#[test]
fn test_vec2_display() {
    assert_eq!(format!("{}", vec2!(0isize, 1isize)), "(0, 1)");
}

const _: () = assert!(size_of::<Vec3P<isize>>() == size_of::<[isize; 3]>());

#[test]
fn test_vec3_align() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).align(),
        vec3!(0isize, 1isize, 2isize)
    );
}

#[test]
fn test_vec3_pack() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).pack(),
        vec3p!(0isize, 1isize, 2isize)
    );
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([0isize, 1isize, 2isize]).as_array(),
        [0isize, 1isize, 2isize]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(0isize), vec3!(0isize, 0isize, 0isize));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(0isize, 1isize, 2isize).index(0), 0isize);
    assert_eq!(vec3!(0isize, 1isize, 2isize).index(1), 1isize);
    assert_eq!(vec3!(0isize, 1isize, 2isize).index(2), 2isize);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(0isize, 1isize, 2isize).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(0isize, 1isize, 2isize).get(0), Some(0isize));
    assert_eq!(vec3!(0isize, 1isize, 2isize).get(1), Some(1isize));
    assert_eq!(vec3!(0isize, 1isize, 2isize).get(2), Some(2isize));

    assert_eq!(vec3!(0isize, 1isize, 2isize).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(0isize, 1isize, 2isize).get_unchecked(0), 0isize);
        assert_eq!(vec3!(0isize, 1isize, 2isize).get_unchecked(1), 1isize);
        assert_eq!(vec3!(0isize, 1isize, 2isize).get_unchecked(2), 2isize);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(0isize, 1isize, 2isize);
        vec.set(0, 50isize);

        assert_eq!(vec, vec3!(50isize, 1isize, 2isize));
    }
    {
        let mut vec = vec3!(0isize, 1isize, 2isize);
        vec.set(1, 50isize);

        assert_eq!(vec, vec3!(0isize, 50isize, 2isize));
    }
    {
        let mut vec = vec3!(0isize, 1isize, 2isize);
        vec.set(2, 50isize);

        assert_eq!(vec, vec3!(0isize, 1isize, 50isize));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(0isize, 1isize, 2isize);
    vec.set(3, 0isize);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(0isize, 1isize, 2isize);
        vec.try_set(0, 50isize).unwrap();

        assert_eq!(vec, vec3!(50isize, 1isize, 2isize));
    }
    {
        let mut vec = vec3!(0isize, 1isize, 2isize);
        vec.try_set(1, 50isize).unwrap();

        assert_eq!(vec, vec3!(0isize, 50isize, 2isize));
    }
    {
        let mut vec = vec3!(0isize, 1isize, 2isize);
        vec.try_set(2, 50isize).unwrap();

        assert_eq!(vec, vec3!(0isize, 1isize, 50isize));
    }

    assert_eq!(
        vec3!(0isize, 1isize, 2isize).try_set(3, 0isize),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(0isize, 1isize, 2isize);
            vec.set_unchecked(0, 50isize);

            assert_eq!(vec, vec3!(50isize, 1isize, 2isize));
        }
        {
            let mut vec = vec3!(0isize, 1isize, 2isize);
            vec.set_unchecked(1, 50isize);

            assert_eq!(vec, vec3!(0isize, 50isize, 2isize));
        }
        {
            let mut vec = vec3!(0isize, 1isize, 2isize);
            vec.set_unchecked(2, 50isize);

            assert_eq!(vec, vec3!(0isize, 1isize, 50isize));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(0isize, 1isize, 2isize).z(), 2isize);
    assert_eq!(vec3!(0isize, 1isize, 2isize).zx(), vec2!(2isize, 0isize));
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).zxy(),
        vec3!(2isize, 0isize, 1isize)
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).zxyz(),
        vec4!(2isize, 0isize, 1isize, 2isize)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).fold(13, |acc, x| acc + x),
        13 + 0isize + 1isize + 2isize
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).reduce(|acc, x| acc + x),
        0isize + 1isize + 2isize
    );
}

#[test]
fn test_vec3_eq_mask() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).eq_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).eq_mask(vec3!(0isize, 0isize, 2isize)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).eq_mask(vec3!(3isize, 4isize, 5isize)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ne_mask() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).ne_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).ne_mask(vec3!(0isize, 0isize, 2isize)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).ne_mask(vec3!(3isize, 4isize, 5isize)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_lt_mask() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).lt_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).lt_mask(vec3!(1isize, 0isize, 2isize)),
        vec3!(true, false, false),
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).lt_mask(vec3!(3isize, 4isize, 5isize)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3isize, 4isize, 5isize).lt_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_gt_mask() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).gt_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).gt_mask(vec3!(1isize, 0isize, 2isize)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).gt_mask(vec3!(3isize, 4isize, 5isize)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3isize, 4isize, 5isize).gt_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_le_mask() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).le_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).le_mask(vec3!(1isize, 0isize, 2isize)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).le_mask(vec3!(3isize, 4isize, 5isize)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3isize, 4isize, 5isize).le_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ge_mask() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).ge_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).ge_mask(vec3!(1isize, 0isize, 2isize)),
        vec3!(false, true, true),
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize).ge_mask(vec3!(3isize, 4isize, 5isize)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3isize, 4isize, 5isize).ge_mask(vec3!(0isize, 1isize, 2isize)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_eq() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize) == vec3!(0isize, 1isize, 2isize),
        true
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize) == vec3!(0isize, 0isize, 2isize),
        false
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize) == vec3!(3isize, 4isize, 5isize),
        false
    );
}

#[test]
fn test_vec3_ne() {
    assert_eq!(
        vec3!(0isize, 1isize, 2isize) != vec3!(0isize, 1isize, 2isize),
        false
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize) != vec3!(0isize, 0isize, 2isize),
        true
    );
    assert_eq!(
        vec3!(0isize, 1isize, 2isize) != vec3!(3isize, 4isize, 5isize),
        true
    );
}

#[test]
fn test_vec3_debug() {
    assert_eq!(format!("{:?}", vec3!(0isize, 1isize, 2isize)), "(0, 1, 2)");
}

#[test]
fn test_vec3_display() {
    assert_eq!(format!("{}", vec3!(0isize, 1isize, 2isize)), "(0, 1, 2)");
}

const _: () = assert!(size_of::<Vec4P<isize>>() == size_of::<[isize; 4]>());

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).align(),
        vec4!(0isize, 1isize, 2isize, 3isize)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).pack(),
        vec4p!(0isize, 1isize, 2isize, 3isize)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0isize, 1isize, 2isize, 3isize]).as_array(),
        [0isize, 1isize, 2isize, 3isize]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0isize), vec4!(0isize, 0isize, 0isize, 0isize));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).index(0), 0isize);
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).index(1), 1isize);
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).index(2), 2isize);
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).index(3), 3isize);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0isize, 1isize, 2isize, 3isize).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).get(0), Some(0isize));
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).get(1), Some(1isize));
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).get(2), Some(2isize));
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).get(3), Some(3isize));

    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4!(0isize, 1isize, 2isize, 3isize).get_unchecked(0),
            0isize
        );
        assert_eq!(
            vec4!(0isize, 1isize, 2isize, 3isize).get_unchecked(1),
            1isize
        );
        assert_eq!(
            vec4!(0isize, 1isize, 2isize, 3isize).get_unchecked(2),
            2isize
        );
        assert_eq!(
            vec4!(0isize, 1isize, 2isize, 3isize).get_unchecked(3),
            3isize
        );
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
        vec.set(0, 50isize);

        assert_eq!(vec, vec4!(50isize, 1isize, 2isize, 3isize));
    }
    {
        let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
        vec.set(1, 50isize);

        assert_eq!(vec, vec4!(0isize, 50isize, 2isize, 3isize));
    }
    {
        let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
        vec.set(2, 50isize);

        assert_eq!(vec, vec4!(0isize, 1isize, 50isize, 3isize));
    }
    {
        let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
        vec.set(3, 50isize);

        assert_eq!(vec, vec4!(0isize, 1isize, 2isize, 50isize));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
    vec.set(4, 0isize);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
        vec.try_set(0, 50isize).unwrap();

        assert_eq!(vec, vec4!(50isize, 1isize, 2isize, 3isize));
    }
    {
        let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
        vec.try_set(1, 50isize).unwrap();

        assert_eq!(vec, vec4!(0isize, 50isize, 2isize, 3isize));
    }
    {
        let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
        vec.try_set(2, 50isize).unwrap();

        assert_eq!(vec, vec4!(0isize, 1isize, 50isize, 3isize));
    }
    {
        let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
        vec.try_set(3, 50isize).unwrap();

        assert_eq!(vec, vec4!(0isize, 1isize, 2isize, 50isize));
    }

    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).try_set(4, 0isize),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
            vec.set_unchecked(0, 50isize);

            assert_eq!(vec, vec4!(50isize, 1isize, 2isize, 3isize));
        }
        {
            let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
            vec.set_unchecked(1, 50isize);

            assert_eq!(vec, vec4!(0isize, 50isize, 2isize, 3isize));
        }
        {
            let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
            vec.set_unchecked(2, 50isize);

            assert_eq!(vec, vec4!(0isize, 1isize, 50isize, 3isize));
        }
        {
            let mut vec = vec4!(0isize, 1isize, 2isize, 3isize);
            vec.set_unchecked(3, 50isize);

            assert_eq!(vec, vec4!(0isize, 1isize, 2isize, 50isize));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0isize, 1isize, 2isize, 3isize).z(), 2isize);
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).zw(),
        vec2!(2isize, 3isize)
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).zwy(),
        vec3!(2isize, 3isize, 1isize)
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).zwyz(),
        vec4!(2isize, 3isize, 1isize, 2isize)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).fold(13, |acc, x| acc + x),
        13 + 0isize + 1isize + 2isize + 3isize
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).reduce(|acc, x| acc + x),
        0isize + 1isize + 2isize + 3isize
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).eq_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).eq_mask(vec4!(0isize, 0isize, 2isize, 3isize)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).eq_mask(vec4!(4isize, 5isize, 6isize, 7isize)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).ne_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).ne_mask(vec4!(0isize, 0isize, 2isize, 3isize)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).ne_mask(vec4!(4isize, 5isize, 6isize, 7isize)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).lt_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).lt_mask(vec4!(1isize, 0isize, 2isize, 3isize)),
        vec4!(true, false, false, false),
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).lt_mask(vec4!(4isize, 5isize, 6isize, 7isize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4isize, 5isize, 6isize, 7isize).lt_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).gt_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).gt_mask(vec4!(1isize, 0isize, 2isize, 3isize)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).gt_mask(vec4!(4isize, 5isize, 6isize, 7isize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4isize, 5isize, 6isize, 7isize).gt_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).le_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).le_mask(vec4!(1isize, 0isize, 2isize, 3isize)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).le_mask(vec4!(4isize, 5isize, 6isize, 7isize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4isize, 5isize, 6isize, 7isize).le_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).ge_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).ge_mask(vec4!(1isize, 0isize, 2isize, 3isize)),
        vec4!(false, true, true, true),
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize).ge_mask(vec4!(4isize, 5isize, 6isize, 7isize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4isize, 5isize, 6isize, 7isize).ge_mask(vec4!(0isize, 1isize, 2isize, 3isize)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize) == vec4!(0isize, 1isize, 2isize, 3isize),
        true
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize) == vec4!(0isize, 0isize, 2isize, 3isize),
        false
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize) == vec4!(4isize, 5isize, 6isize, 7isize),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize) != vec4!(0isize, 1isize, 2isize, 3isize),
        false
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize) != vec4!(0isize, 0isize, 2isize, 3isize),
        true
    );
    assert_eq!(
        vec4!(0isize, 1isize, 2isize, 3isize) != vec4!(4isize, 5isize, 6isize, 7isize),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0isize, 1isize, 2isize, 3isize)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(
        format!("{}", vec4!(0isize, 1isize, 2isize, 3isize)),
        "(0, 1, 2, 3)"
    );
}
