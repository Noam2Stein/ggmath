// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_nonsimd_isize_vec_layout() {
    assert_eq!(size_of::<Vec2S<isize>>(), size_of::<isize>() * 2);
    assert_eq!(size_of::<Vec3S<isize>>(), size_of::<isize>() * 3);
    assert_eq!(size_of::<Vec4S<isize>>(), size_of::<isize>() * 4);

    assert_eq!(align_of::<Vec2S<isize>>(), align_of::<isize>());
    assert_eq!(align_of::<Vec3S<isize>>(), align_of::<isize>());
    assert_eq!(align_of::<Vec4S<isize>>(), align_of::<isize>());
}

#[test]
fn test_simd_isize_vec_constructors() {
    assert_eq!(
        Vec2::from_array([1isize, 2isize]).as_array(),
        [1isize, 2isize]
    );
    assert_eq!(
        Vec3::from_array([1isize, 2isize, 3isize]).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        Vec4::from_array([1isize, 2isize, 3isize, 4isize]).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );

    assert_eq!(Vec2::splat(1isize).as_array(), [1isize; 2]);
    assert_eq!(Vec3::splat(1isize).as_array(), [1isize; 3]);
    assert_eq!(Vec4::splat(1isize).as_array(), [1isize; 4]);

    assert_eq!(
        Vec2::from_fn(|i| [1isize, 2isize][i]).as_array(),
        [1isize, 2isize]
    );
    assert_eq!(
        Vec3::from_fn(|i| [1isize, 2isize, 3isize][i]).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1isize, 2isize, 3isize, 4isize][i]).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );

    assert_eq!(
        Vec2::const_from_array([1isize, 2isize]).as_array(),
        [1isize, 2isize]
    );
    assert_eq!(
        Vec3::const_from_array([1isize, 2isize, 3isize]).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        Vec4::const_from_array([1isize, 2isize, 3isize, 4isize]).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );

    assert_eq!(vec2!(1isize, 2isize).as_array(), [1isize, 2isize]);
    assert_eq!(vec2!(vec2!(1isize, 2isize)).as_array(), [1isize, 2isize]);
    assert_eq!(
        vec3!(1isize, 2isize, 3isize).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        vec3!(1isize, vec2!(2isize, 3isize)).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        vec4!(1isize, 2isize, 3isize, 4isize).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );
    assert_eq!(
        vec4!(1isize, vec2!(2isize, 3isize), 4isize).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );
    assert_eq!(
        vec4!(
            1isize,
            vec2!(2isize, 3isize),
            Vector::<1, isize, Simd>::from_array([4isize])
        )
        .as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );
}

#[test]
fn test_nonsimd_isize_vec_constructors() {
    assert_eq!(
        Vec2S::from_array([1isize, 2isize]).as_array(),
        [1isize, 2isize]
    );
    assert_eq!(
        Vec3S::from_array([1isize, 2isize, 3isize]).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        Vec4S::from_array([1isize, 2isize, 3isize, 4isize]).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );

    assert_eq!(Vec2S::splat(1isize).as_array(), [1isize; 2]);
    assert_eq!(Vec3S::splat(1isize).as_array(), [1isize; 3]);
    assert_eq!(Vec4S::splat(1isize).as_array(), [1isize; 4]);

    assert_eq!(
        Vec2S::from_fn(|i| [1isize, 2isize][i]).as_array(),
        [1isize, 2isize]
    );
    assert_eq!(
        Vec3S::from_fn(|i| [1isize, 2isize, 3isize][i]).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1isize, 2isize, 3isize, 4isize][i]).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );

    assert_eq!(
        Vec2S::const_from_array([1isize, 2isize]).as_array(),
        [1isize, 2isize]
    );
    assert_eq!(
        Vec3S::const_from_array([1isize, 2isize, 3isize]).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        Vec4S::const_from_array([1isize, 2isize, 3isize, 4isize]).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );

    assert_eq!(vec2s!(1isize, 2isize).as_array(), [1isize, 2isize]);
    assert_eq!(vec2s!(vec2s!(1isize, 2isize)).as_array(), [1isize, 2isize]);
    assert_eq!(
        vec3s!(1isize, 2isize, 3isize).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        vec3s!(1isize, vec2s!(2isize, 3isize)).as_array(),
        [1isize, 2isize, 3isize]
    );
    assert_eq!(
        vec4s!(1isize, 2isize, 3isize, 4isize).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );
    assert_eq!(
        vec4s!(1isize, vec2s!(2isize, 3isize), 4isize).as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );
    assert_eq!(
        vec4s!(
            1isize,
            vec2s!(2isize, 3isize),
            Vector::<1, isize, NonSimd>::from_array([4isize])
        )
        .as_array(),
        [1isize, 2isize, 3isize, 4isize]
    );
}
