// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use ggmath::*;

#[test]
fn test_isizevec4_constructor() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize),
        IsizeVec4::from_array([0isize, 1isize, 2isize, 3isize])
    );
    assert_eq!(
        isizevec4!(0isize, vec2!(1isize, 2isize), 3isize),
        IsizeVec4::from_array([0isize, 1isize, 2isize, 3isize])
    );
    assert_eq!(
        isizevec4!(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        IsizeVec4::from_array([0isize, 1isize, 2isize, 3isize])
    );
}

#[test]
fn test_isizevec4_as_simd() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).as_simd(),
        vec4!(0isize, 1isize, 2isize, 3isize)
    );
}

#[test]
fn test_isizevec4_as_non_simd() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).as_non_simd(),
        vec4s!(0isize, 1isize, 2isize, 3isize)
    );
}

#[test]
fn test_isizevec4_from_array_as_array() {
    assert_eq!(
        IsizeVec4::from_array([0isize, 1isize, 2isize, 3isize]).as_array(),
        [0isize, 1isize, 2isize, 3isize]
    );
}

#[test]
fn test_isizevec4_splat() {
    assert_eq!(
        IsizeVec4::splat(0isize),
        isizevec4!(0isize, 0isize, 0isize, 0isize)
    );
}

#[test]
fn test_isizevec4_index() {
    assert_eq!(isizevec4!(0isize, 1isize, 2isize, 3isize).index(0), 0isize);
    assert_eq!(isizevec4!(0isize, 1isize, 2isize, 3isize).index(1), 1isize);
    assert_eq!(isizevec4!(0isize, 1isize, 2isize, 3isize).index(2), 2isize);
    assert_eq!(isizevec4!(0isize, 1isize, 2isize, 3isize).index(3), 3isize);
}

#[test]
#[should_panic]
fn test_isizevec4_index_panic() {
    isizevec4!(0isize, 1isize, 2isize, 3isize).index(4);
}

#[test]
fn test_isizevec4_get() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).get(0),
        Some(0isize)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).get(1),
        Some(1isize)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).get(2),
        Some(2isize)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).get(3),
        Some(3isize)
    );

    assert_eq!(isizevec4!(0isize, 1isize, 2isize, 3isize).get(4), None);
}

#[test]
fn test_isizevec4_get_unchecked() {
    unsafe {
        assert_eq!(
            isizevec4!(0isize, 1isize, 2isize, 3isize).get_unchecked(0),
            0isize
        );
        assert_eq!(
            isizevec4!(0isize, 1isize, 2isize, 3isize).get_unchecked(1),
            1isize
        );
        assert_eq!(
            isizevec4!(0isize, 1isize, 2isize, 3isize).get_unchecked(2),
            2isize
        );
        assert_eq!(
            isizevec4!(0isize, 1isize, 2isize, 3isize).get_unchecked(3),
            3isize
        );
    }
}

#[test]
fn test_isizevec4_set() {
    {
        let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
        vec.set(0, 50isize);

        assert_eq!(vec, isizevec4!(50isize, 1isize, 2isize, 3isize));
    }
    {
        let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
        vec.set(1, 50isize);

        assert_eq!(vec, isizevec4!(0isize, 50isize, 2isize, 3isize));
    }
    {
        let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
        vec.set(2, 50isize);

        assert_eq!(vec, isizevec4!(0isize, 1isize, 50isize, 3isize));
    }
    {
        let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
        vec.set(3, 50isize);

        assert_eq!(vec, isizevec4!(0isize, 1isize, 2isize, 50isize));
    }
}

#[test]
#[should_panic]
fn test_isizevec4_set_panic() {
    let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
    vec.set(4, 0isize);
}

#[test]
fn test_isizevec4_try_set() {
    {
        let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
        vec.try_set(0, 50isize).unwrap();

        assert_eq!(vec, isizevec4!(50isize, 1isize, 2isize, 3isize));
    }
    {
        let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
        vec.try_set(1, 50isize).unwrap();

        assert_eq!(vec, isizevec4!(0isize, 50isize, 2isize, 3isize));
    }
    {
        let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
        vec.try_set(2, 50isize).unwrap();

        assert_eq!(vec, isizevec4!(0isize, 1isize, 50isize, 3isize));
    }
    {
        let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
        vec.try_set(3, 50isize).unwrap();

        assert_eq!(vec, isizevec4!(0isize, 1isize, 2isize, 50isize));
    }

    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).try_set(4, 0isize),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_isizevec4_set_unchecked() {
    unsafe {
        {
            let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
            vec.set_unchecked(0, 50isize);

            assert_eq!(vec, isizevec4!(50isize, 1isize, 2isize, 3isize));
        }
        {
            let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
            vec.set_unchecked(1, 50isize);

            assert_eq!(vec, isizevec4!(0isize, 50isize, 2isize, 3isize));
        }
        {
            let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
            vec.set_unchecked(2, 50isize);

            assert_eq!(vec, isizevec4!(0isize, 1isize, 50isize, 3isize));
        }
        {
            let mut vec = isizevec4!(0isize, 1isize, 2isize, 3isize);
            vec.set_unchecked(3, 50isize);

            assert_eq!(vec, isizevec4!(0isize, 1isize, 2isize, 50isize));
        }
    }
}

#[test]
fn test_isizevec4_swizzle() {
    assert_eq!(isizevec4!(0isize, 1isize, 2isize, 3isize).z(), 2isize);
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).zw(),
        vec2!(2isize, 3isize)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).zwy(),
        vec3!(2isize, 3isize, 1isize)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).zwyz(),
        vec4!(2isize, 3isize, 1isize, 2isize)
    );
}

#[test]
fn test_isizevec4_with_swizzle() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).with_y(0isize),
        isizevec4!(0isize, 0isize, 2isize, 3isize)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).with_yx(vec2!(0isize, 1isize)),
        isizevec4!(1isize, 0isize, 2isize, 3isize)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).with_yxz(vec3!(0isize, 2isize, 1isize)),
        isizevec4!(2isize, 0isize, 1isize, 3isize)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).with_yxzw(vec4!(0isize, 2isize, 1isize, 0isize)),
        isizevec4!(2isize, 0isize, 1isize, 0isize)
    );
}

#[test]
fn test_isizevec4_fold() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).fold(13, |acc, x| acc + x),
        13 + 0isize + 1isize + 2isize + 3isize
    );
}

#[test]
fn test_isizevec4_reduce() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize).reduce(|acc, x| acc + x),
        0isize + 1isize + 2isize + 3isize
    );
}

#[test]
fn test_isizevec4_eq_mask() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .eq_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(true, true, true, true)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .eq_mask(isizevec4!(0isize, 0isize, 2isize, 3isize)),
        isizevec4!(true, false, true, true),
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .eq_mask(isizevec4!(4isize, 5isize, 6isize, 7isize)),
        isizevec4!(false, false, false, false)
    );
}

#[test]
fn test_isizevec4_ne_mask() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .ne_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(false, false, false, false)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .ne_mask(isizevec4!(0isize, 0isize, 2isize, 3isize)),
        isizevec4!(false, true, false, false),
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .ne_mask(isizevec4!(4isize, 5isize, 6isize, 7isize)),
        isizevec4!(true, true, true, true)
    );
}

#[test]
fn test_isizevec4_lt_mask() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .lt_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(false, false, false, false)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .lt_mask(isizevec4!(1isize, 0isize, 2isize, 3isize)),
        isizevec4!(true, false, false, false),
    );

    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .lt_mask(isizevec4!(4isize, 5isize, 6isize, 7isize)),
        isizevec4!(true, true, true, true)
    );
    assert_eq!(
        isizevec4!(4isize, 5isize, 6isize, 7isize)
            .lt_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(false, false, false, false)
    );
}

#[test]
fn test_isizevec4_gt_mask() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .gt_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(false, false, false, false)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .gt_mask(isizevec4!(1isize, 0isize, 2isize, 3isize)),
        isizevec4!(false, true, false, false),
    );

    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .gt_mask(isizevec4!(4isize, 5isize, 6isize, 7isize)),
        isizevec4!(false, false, false, false)
    );
    assert_eq!(
        isizevec4!(4isize, 5isize, 6isize, 7isize)
            .gt_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(true, true, true, true)
    );
}

#[test]
fn test_isizevec4_le_mask() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .le_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(true, true, true, true)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .le_mask(isizevec4!(1isize, 0isize, 2isize, 3isize)),
        isizevec4!(true, false, true, true),
    );

    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .le_mask(isizevec4!(4isize, 5isize, 6isize, 7isize)),
        isizevec4!(true, true, true, true)
    );
    assert_eq!(
        isizevec4!(4isize, 5isize, 6isize, 7isize)
            .le_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(false, false, false, false)
    );
}

#[test]
fn test_isizevec4_ge_mask() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .ge_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(true, true, true, true)
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .ge_mask(isizevec4!(1isize, 0isize, 2isize, 3isize)),
        isizevec4!(false, true, true, true),
    );

    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize)
            .ge_mask(isizevec4!(4isize, 5isize, 6isize, 7isize)),
        isizevec4!(false, false, false, false)
    );
    assert_eq!(
        isizevec4!(4isize, 5isize, 6isize, 7isize)
            .ge_mask(isizevec4!(0isize, 1isize, 2isize, 3isize)),
        isizevec4!(true, true, true, true)
    );
}

#[test]
fn test_isizevec4_eq() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize) == isizevec4!(0isize, 1isize, 2isize, 3isize),
        true
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize) == isizevec4!(0isize, 0isize, 2isize, 3isize),
        false
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize) == isizevec4!(4isize, 5isize, 6isize, 7isize),
        false
    );
}

#[test]
fn test_isizevec4_ne() {
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize) != isizevec4!(0isize, 1isize, 2isize, 3isize),
        false
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize) != isizevec4!(0isize, 0isize, 2isize, 3isize),
        true
    );
    assert_eq!(
        isizevec4!(0isize, 1isize, 2isize, 3isize) != isizevec4!(4isize, 5isize, 6isize, 7isize),
        true
    );
}

#[test]
fn test_isizevec4_debug() {
    assert_eq!(
        format!("{:?}", isizevec4!(0isize, 1isize, 2isize, 3isize)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_isizevec4_display() {
    assert_eq!(
        format!("{}", isizevec4!(0isize, 1isize, 2isize, 3isize)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_isizevec4_const_from_array() {
    assert_eq!(
        IsizeVec4::<isize>::const_from_array([0isize, 1isize, 2isize, 3isize]),
        IsizeVec4::from_array([0isize, 1isize, 2isize, 3isize])
    );
}
