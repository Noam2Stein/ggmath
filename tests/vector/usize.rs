// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_nonsimd_usize_vec_layout() {
    assert_eq!(size_of::<Vec2S<usize>>(), size_of::<usize>() * 2);
    assert_eq!(size_of::<Vec3S<usize>>(), size_of::<usize>() * 3);
    assert_eq!(size_of::<Vec4S<usize>>(), size_of::<usize>() * 4);

    assert_eq!(align_of::<Vec2S<usize>>(), align_of::<usize>());
    assert_eq!(align_of::<Vec3S<usize>>(), align_of::<usize>());
    assert_eq!(align_of::<Vec4S<usize>>(), align_of::<usize>());
}

#[test]
fn test_simd_usize_vec_constructors() {
    assert_eq!(
        Vec2::from_array([1usize, 2usize]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3::from_array([1usize, 2usize, 3usize]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4::from_array([1usize, 2usize, 3usize, 4usize]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(Vec2::splat(1usize).as_array(), [1usize; 2]);
    assert_eq!(Vec3::splat(1usize).as_array(), [1usize; 3]);
    assert_eq!(Vec4::splat(1usize).as_array(), [1usize; 4]);

    assert_eq!(
        Vec2::from_fn(|i| [1usize, 2usize][i]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3::from_fn(|i| [1usize, 2usize, 3usize][i]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1usize, 2usize, 3usize, 4usize][i]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(
        Vec2::const_from_array([1usize, 2usize]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3::const_from_array([1usize, 2usize, 3usize]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4::const_from_array([1usize, 2usize, 3usize, 4usize]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2!(1usize, 2usize).as_array(), [1usize, 2usize]);
    assert_eq!(vec2!(vec2!(1usize, 2usize)).as_array(), [1usize, 2usize]);
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec3!(1usize, vec2!(2usize, 3usize)).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
    assert_eq!(
        vec4!(1usize, vec2!(2usize, 3usize), 4usize).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
    assert_eq!(
        vec4!(
            1usize,
            vec2!(2usize, 3usize),
            Vector::<1, usize, Simd>::from_array([4usize])
        )
        .as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
}

#[test]
fn test_nonsimd_usize_vec_constructors() {
    assert_eq!(
        Vec2S::from_array([1usize, 2usize]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3S::from_array([1usize, 2usize, 3usize]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4S::from_array([1usize, 2usize, 3usize, 4usize]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(Vec2S::splat(1usize).as_array(), [1usize; 2]);
    assert_eq!(Vec3S::splat(1usize).as_array(), [1usize; 3]);
    assert_eq!(Vec4S::splat(1usize).as_array(), [1usize; 4]);

    assert_eq!(
        Vec2S::from_fn(|i| [1usize, 2usize][i]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3S::from_fn(|i| [1usize, 2usize, 3usize][i]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1usize, 2usize, 3usize, 4usize][i]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(
        Vec2S::const_from_array([1usize, 2usize]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3S::const_from_array([1usize, 2usize, 3usize]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4S::const_from_array([1usize, 2usize, 3usize, 4usize]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2s!(1usize, 2usize).as_array(), [1usize, 2usize]);
    assert_eq!(vec2s!(vec2s!(1usize, 2usize)).as_array(), [1usize, 2usize]);
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec3s!(1usize, vec2s!(2usize, 3usize)).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
    assert_eq!(
        vec4s!(1usize, vec2s!(2usize, 3usize), 4usize).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
    assert_eq!(
        vec4s!(
            1usize,
            vec2s!(2usize, 3usize),
            Vector::<1, usize, NonSimd>::from_array([4usize])
        )
        .as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
}
