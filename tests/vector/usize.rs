// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_simd_primitive_fns() {
    assert_eq!(
        Vec2::from_array([1usize, 2usize]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3::from_array([1usize, 2usize, 3usize]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4::from_array([1usize, 2usize, 3usize, 4usize]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(
        Vec2::from_fn(|i| [1usize, 2usize][i]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3::from_fn(|i| [1usize, 2usize, 3usize][i]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1usize, 2usize, 3usize, 4usize][i]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(
        Vec2::const_from_array([1usize, 2usize]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3::const_from_array([1usize, 2usize, 3usize]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4::const_from_array([1usize, 2usize, 3usize, 4usize]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2!(1usize, 2usize).as_array(), [1usize, 2usize]);
    assert_eq!(vec2!(vec2!(1usize, 2usize)).as_array(), [1usize, 2usize]);
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec3!(1usize, vec2!(2usize, 3usize)).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
    assert_eq!(
        vec4!(1usize, vec2!(2usize, 3usize), 4usize).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
    assert_eq!(
        vec4!(
            1usize,
            vec2!(2usize, 3usize),
            Vector::<1, usize, Simd>::from_array([4usize])
        )
        .as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2!(1usize).as_array(), [1usize; 2]);
    assert_eq!(vec3!(1usize).as_array(), [1usize; 3]);
    assert_eq!(vec4!(1usize).as_array(), [1usize; 4]);

    assert_eq!(vec2!(1usize, 2usize).as_array_ref(), &[1usize, 2usize]);
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).as_array_ref(),
        &[1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).as_array_ref(),
        &[1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2!(1usize, 2usize).as_mut_array(), &mut [1usize, 2usize]);
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).as_mut_array(),
        &mut [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).as_mut_array(),
        &mut [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2!(1usize, 2usize).as_simd(), vec2!(1usize, 2usize));
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).as_simd(),
        vec3!(1usize, 2usize, 3usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).as_simd(),
        vec4!(1usize, 2usize, 3usize, 4usize)
    );

    assert_eq!(vec2!(1usize, 2usize).as_nonsimd(), vec2s!(1usize, 2usize));
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).as_nonsimd(),
        vec3s!(1usize, 2usize, 3usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).as_nonsimd(),
        vec4s!(1usize, 2usize, 3usize, 4usize)
    );

    assert_eq!(vec2!(1usize, 2usize).len(), 2);
    assert_eq!(vec3!(1usize, 2usize, 3usize).len(), 3);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).len(), 4);

    assert_eq!(vec2!(1usize, 2usize).is_simd(), true);
    assert_eq!(vec3!(1usize, 2usize, 3usize).is_simd(), true);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).is_simd(), true);

    assert_eq!(vec2!(1usize, 2usize).get(0), Some(1usize));
    assert_eq!(vec2!(1usize, 2usize).get(1), Some(2usize));
    assert_eq!(vec2!(1usize, 2usize).get(2), None);
    assert_eq!(vec2!(1usize, 2usize).get(3), None);

    assert_eq!(vec3!(1usize, 2usize, 3usize).get(0), Some(1usize));
    assert_eq!(vec3!(1usize, 2usize, 3usize).get(1), Some(2usize));
    assert_eq!(vec3!(1usize, 2usize, 3usize).get(2), Some(3usize));
    assert_eq!(vec3!(1usize, 2usize, 3usize).get(3), None);
    assert_eq!(vec3!(1usize, 2usize, 3usize).get(4), None);

    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).get(0), Some(1usize));
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).get(1), Some(2usize));
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).get(2), Some(3usize));
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).get(3), Some(4usize));
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).get(4), None);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).get(5), None);

    assert_eq!(vec2!(1usize, 2usize).get_mut(0), Some(&mut 1usize));
    assert_eq!(vec2!(1usize, 2usize).get_mut(1), Some(&mut 2usize));
    assert_eq!(vec2!(1usize, 2usize).get_mut(2), None);
    assert_eq!(vec2!(1usize, 2usize).get_mut(3), None);

    assert_eq!(vec3!(1usize, 2usize, 3usize).get_mut(0), Some(&mut 1usize));
    assert_eq!(vec3!(1usize, 2usize, 3usize).get_mut(1), Some(&mut 2usize));
    assert_eq!(vec3!(1usize, 2usize, 3usize).get_mut(2), Some(&mut 3usize));
    assert_eq!(vec3!(1usize, 2usize, 3usize).get_mut(3), None);
    assert_eq!(vec3!(1usize, 2usize, 3usize).get_mut(4), None);

    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_mut(0),
        Some(&mut 1usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_mut(1),
        Some(&mut 2usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_mut(2),
        Some(&mut 3usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_mut(3),
        Some(&mut 4usize)
    );
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).get_mut(4), None);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).get_mut(5), None);

    unsafe {
        assert_eq!(vec2!(1usize, 2usize).get_unchecked(0), 1usize);
        assert_eq!(vec2!(1usize, 2usize).get_unchecked(1), 2usize);

        assert_eq!(vec3!(1usize, 2usize, 3usize).get_unchecked(0), 1usize);
        assert_eq!(vec3!(1usize, 2usize, 3usize).get_unchecked(1), 2usize);
        assert_eq!(vec3!(1usize, 2usize, 3usize).get_unchecked(2), 3usize);

        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).get_unchecked(0),
            1usize
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).get_unchecked(1),
            2usize
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).get_unchecked(2),
            3usize
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).get_unchecked(3),
            4usize
        );

        assert_eq!(vec2!(1usize, 2usize).get_unchecked_mut(0), &mut 1usize);
        assert_eq!(vec2!(1usize, 2usize).get_unchecked_mut(1), &mut 2usize);

        assert_eq!(
            vec3!(1usize, 2usize, 3usize).get_unchecked_mut(0),
            &mut 1usize
        );
        assert_eq!(
            vec3!(1usize, 2usize, 3usize).get_unchecked_mut(1),
            &mut 2usize
        );
        assert_eq!(
            vec3!(1usize, 2usize, 3usize).get_unchecked_mut(2),
            &mut 3usize
        );

        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).get_unchecked_mut(0),
            &mut 1usize
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).get_unchecked_mut(1),
            &mut 2usize
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).get_unchecked_mut(2),
            &mut 3usize
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).get_unchecked_mut(3),
            &mut 4usize
        );
    }

    assert_eq!(
        vec2!(1usize, 2usize).iter().collect::<Vec<usize>>(),
        vec![1usize, 2usize]
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).iter().collect::<Vec<usize>>(),
        vec![1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize)
            .iter()
            .collect::<Vec<usize>>(),
        vec![1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(
        vec2!(1usize, 2usize)
            .iter_mut()
            .collect::<Vec<&mut usize>>(),
        vec![&mut 1usize, &mut 2usize]
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize)
            .iter_mut()
            .collect::<Vec<&mut usize>>(),
        vec![&mut 1usize, &mut 2usize, &mut 3usize]
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize)
            .iter_mut()
            .collect::<Vec<&mut usize>>(),
        vec![&mut 1usize, &mut 2usize, &mut 3usize, &mut 4usize]
    );

    assert_eq!(
        vec2!(1usize, 2usize).map(|x| x == 2usize),
        vec2!(false, true)
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).map(|x| x == 2usize),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).map(|x| x == 2usize),
        vec4!(false, true, false, false)
    );

    assert_eq!(
        vec2!(1usize, 2usize).zip(vec2!(2usize, 1usize)),
        vec2!((1usize, 2usize), (2usize, 1usize))
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).zip(vec3!(2usize, 3usize, 1usize)),
        vec3!((1usize, 2usize), (2usize, 3usize), (3usize, 1usize))
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).zip(vec4!(2usize, 3usize, 4usize, 1usize)),
        vec4!(
            (1usize, 2usize),
            (2usize, 3usize),
            (3usize, 4usize),
            (4usize, 1usize)
        )
    );

    assert_eq!(vec2!(1usize, 2usize).reverse(), vec2!(2usize, 1usize));
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).reverse(),
        vec3!(3usize, 2usize, 1usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).reverse(),
        vec4!(4usize, 3usize, 2usize, 1usize)
    );

    assert_eq!(
        vec2!(1usize, 2usize).get_const_vec2::<0, 1>(),
        vec2!(1usize, 2usize)
    );
    assert_eq!(
        vec2!(1usize, 2usize).get_const_vec2::<1, 0>(),
        vec2!(2usize, 1usize)
    );
    assert_eq!(
        vec2!(1usize, 2usize).get_const_vec2::<1, 1>(),
        vec2!(2usize, 2usize)
    );

    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec2::<0, 1>(),
        vec2!(1usize, 2usize)
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec2::<0, 2>(),
        vec2!(1usize, 3usize)
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec2::<2, 1>(),
        vec2!(3usize, 2usize)
    );

    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec2::<0, 1>(),
        vec2!(1usize, 2usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec2::<1, 3>(),
        vec2!(2usize, 4usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec2::<3, 1>(),
        vec2!(4usize, 2usize)
    );

    assert_eq!(
        vec2!(1usize, 2usize).get_const_vec3::<0, 1, 1>(),
        vec3!(1usize, 2usize, 2usize)
    );
    assert_eq!(
        vec2!(1usize, 2usize).get_const_vec3::<1, 0, 1>(),
        vec3!(2usize, 1usize, 2usize)
    );

    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec3::<0, 1, 2>(),
        vec3!(1usize, 2usize, 3usize)
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec3::<1, 0, 2>(),
        vec3!(2usize, 1usize, 3usize)
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec3::<2, 1, 0>(),
        vec3!(3usize, 2usize, 1usize)
    );

    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec3::<0, 1, 2>(),
        vec3!(1usize, 2usize, 3usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec3::<1, 0, 2>(),
        vec3!(2usize, 1usize, 3usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec3::<2, 1, 0>(),
        vec3!(3usize, 2usize, 1usize)
    );

    assert_eq!(
        vec2!(1usize, 2usize).get_const_vec4::<0, 1, 1, 0>(),
        vec4!(1usize, 2usize, 2usize, 1usize)
    );
    assert_eq!(
        vec2!(1usize, 2usize).get_const_vec4::<1, 0, 1, 0>(),
        vec4!(2usize, 1usize, 2usize, 1usize)
    );
    assert_eq!(
        vec2!(1usize, 2usize).get_const_vec4::<1, 1, 0, 0>(),
        vec4!(2usize, 2usize, 1usize, 1usize)
    );

    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec4::<0, 1, 2, 0>(),
        vec4!(1usize, 2usize, 3usize, 1usize)
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec4::<1, 0, 2, 0>(),
        vec4!(2usize, 1usize, 3usize, 1usize)
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize).get_const_vec4::<2, 1, 0, 0>(),
        vec4!(3usize, 2usize, 1usize, 1usize)
    );

    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec4::<0, 1, 2, 3>(),
        vec4!(1usize, 2usize, 3usize, 4usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec4::<1, 0, 2, 3>(),
        vec4!(2usize, 1usize, 3usize, 4usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec4::<2, 1, 0, 3>(),
        vec4!(3usize, 2usize, 1usize, 4usize)
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).get_const_vec4::<3, 1, 2, 0>(),
        vec4!(4usize, 2usize, 3usize, 1usize)
    );

    assert_eq!(vec2!(1usize, 2usize)[0], 1usize);
    assert_eq!(vec2!(1usize, 2usize)[1], 2usize);

    assert_eq!(vec3!(1usize, 2usize, 3usize)[0], 1usize);
    assert_eq!(vec3!(1usize, 2usize, 3usize)[1], 2usize);
    assert_eq!(vec3!(1usize, 2usize, 3usize)[2], 3usize);

    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize)[0], 1usize);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize)[1], 2usize);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize)[2], 3usize);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize)[3], 4usize);

    assert_eq!(&mut vec2!(1usize, 2usize)[0], &mut 1usize);
    assert_eq!(&mut vec2!(1usize, 2usize)[1], &mut 2usize);

    assert_eq!(&mut vec3!(1usize, 2usize, 3usize)[0], &mut 1usize);
    assert_eq!(&mut vec3!(1usize, 2usize, 3usize)[1], &mut 2usize);
    assert_eq!(&mut vec3!(1usize, 2usize, 3usize)[2], &mut 3usize);

    assert_eq!(&mut vec4!(1usize, 2usize, 3usize, 4usize)[0], &mut 1usize);
    assert_eq!(&mut vec4!(1usize, 2usize, 3usize, 4usize)[1], &mut 2usize);
    assert_eq!(&mut vec4!(1usize, 2usize, 3usize, 4usize)[2], &mut 3usize);
    assert_eq!(&mut vec4!(1usize, 2usize, 3usize, 4usize)[3], &mut 4usize);

    assert_eq!(vec2!(1usize, 2usize) == vec2!(1usize, 2usize), true);
    assert_eq!(vec2!(1usize, 2usize) == vec2!(2usize, 1usize), false);
    assert_eq!(vec2!(1usize, 2usize) == vec2!(2usize, 2usize), false);

    assert_eq!(
        vec3!(1usize, 2usize, 3usize) == vec3!(1usize, 2usize, 3usize),
        true
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize) == vec3!(4usize, 3usize, 2usize),
        false
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize) == vec3!(2usize, 2usize, 3usize),
        false
    );

    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize) == vec4!(1usize, 2usize, 3usize, 4usize),
        true
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize) == vec4!(4usize, 3usize, 2usize, 1usize),
        false
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize) == vec4!(2usize, 2usize, 2usize, 4usize),
        false
    );

    assert_eq!(vec2!(1usize, 2usize) != vec2!(1usize, 2usize), false);
    assert_eq!(vec2!(1usize, 2usize) != vec2!(2usize, 1usize), true);
    assert_eq!(vec2!(1usize, 2usize) != vec2!(2usize, 2usize), true);

    assert_eq!(
        vec3!(1usize, 2usize, 3usize) != vec3!(1usize, 2usize, 3usize),
        false
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize) != vec3!(4usize, 3usize, 2usize),
        true
    );
    assert_eq!(
        vec3!(1usize, 2usize, 3usize) != vec3!(2usize, 2usize, 3usize),
        true
    );

    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize) != vec4!(1usize, 2usize, 3usize, 4usize),
        false
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize) != vec4!(4usize, 3usize, 2usize, 1usize),
        true
    );
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize) != vec4!(2usize, 2usize, 2usize, 4usize),
        true
    );

    assert_eq!(vec2!(1usize, 2usize).to_string(), "(1, 2)");
    assert_eq!(vec3!(1usize, 2usize, 3usize).to_string(), "(1, 2, 3)");
    assert_eq!(
        vec4!(1usize, 2usize, 3usize, 4usize).to_string(),
        "(1, 2, 3, 4)"
    );

    assert_eq!(format!("{:?}", vec2!(1usize, 2usize)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3!(1usize, 2usize, 3usize)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4!(1usize, 2usize, 3usize, 4usize)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2!(1usize, 2usize).x, 1usize);
    assert_eq!(vec2!(1usize, 2usize).y, 2usize);

    assert_eq!(vec3!(1usize, 2usize, 3usize).x, 1usize);
    assert_eq!(vec3!(1usize, 2usize, 3usize).y, 2usize);
    assert_eq!(vec3!(1usize, 2usize, 3usize).z, 3usize);

    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).x, 1usize);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).y, 2usize);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).z, 3usize);
    assert_eq!(vec4!(1usize, 2usize, 3usize, 4usize).w, 4usize);

    assert_eq!(&mut vec2!(1usize, 2usize).x, &mut 1usize);
    assert_eq!(&mut vec2!(1usize, 2usize).y, &mut 2usize);

    assert_eq!(&mut vec3!(1usize, 2usize, 3usize).x, &mut 1usize);
    assert_eq!(&mut vec3!(1usize, 2usize, 3usize).y, &mut 2usize);
    assert_eq!(&mut vec3!(1usize, 2usize, 3usize).z, &mut 3usize);

    assert_eq!(&mut vec4!(1usize, 2usize, 3usize, 4usize).x, &mut 1usize);
    assert_eq!(&mut vec4!(1usize, 2usize, 3usize, 4usize).y, &mut 2usize);
    assert_eq!(&mut vec4!(1usize, 2usize, 3usize, 4usize).z, &mut 3usize);
    assert_eq!(&mut vec4!(1usize, 2usize, 3usize, 4usize).w, &mut 4usize);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2!(1usize, 2usize).xy(), vec2!(1usize, 2usize));
        assert_eq!(vec2!(1usize, 2usize).yx(), vec2!(2usize, 1usize));
        assert_eq!(vec2!(1usize, 2usize).yy(), vec2!(2usize, 2usize));

        assert_eq!(vec3!(1usize, 2usize, 3usize).xy(), vec2!(1usize, 2usize));
        assert_eq!(vec3!(1usize, 2usize, 3usize).xz(), vec2!(1usize, 3usize));
        assert_eq!(vec3!(1usize, 2usize, 3usize).zy(), vec2!(3usize, 2usize));

        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).xy(),
            vec2!(1usize, 2usize)
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).yw(),
            vec2!(2usize, 4usize)
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).wy(),
            vec2!(4usize, 2usize)
        );

        assert_eq!(vec2!(1usize, 2usize).xyy(), vec3!(1usize, 2usize, 2usize));
        assert_eq!(vec2!(1usize, 2usize).yxy(), vec3!(2usize, 1usize, 2usize));

        assert_eq!(
            vec3!(1usize, 2usize, 3usize).xyz(),
            vec3!(1usize, 2usize, 3usize)
        );
        assert_eq!(
            vec3!(1usize, 2usize, 3usize).yxz(),
            vec3!(2usize, 1usize, 3usize)
        );
        assert_eq!(
            vec3!(1usize, 2usize, 3usize).zyx(),
            vec3!(3usize, 2usize, 1usize)
        );

        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).xyz(),
            vec3!(1usize, 2usize, 3usize)
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).yxz(),
            vec3!(2usize, 1usize, 3usize)
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).zyx(),
            vec3!(3usize, 2usize, 1usize)
        );

        assert_eq!(
            vec2!(1usize, 2usize).xyyx(),
            vec4!(1usize, 2usize, 2usize, 1usize)
        );
        assert_eq!(
            vec2!(1usize, 2usize).yxyx(),
            vec4!(2usize, 1usize, 2usize, 1usize)
        );
        assert_eq!(
            vec2!(1usize, 2usize).yyxx(),
            vec4!(2usize, 2usize, 1usize, 1usize)
        );

        assert_eq!(
            vec3!(1usize, 2usize, 3usize).xyzx(),
            vec4!(1usize, 2usize, 3usize, 1usize)
        );
        assert_eq!(
            vec3!(1usize, 2usize, 3usize).yxzx(),
            vec4!(2usize, 1usize, 3usize, 1usize)
        );
        assert_eq!(
            vec3!(1usize, 2usize, 3usize).zyxx(),
            vec4!(3usize, 2usize, 1usize, 1usize)
        );

        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).xyzw(),
            vec4!(1usize, 2usize, 3usize, 4usize)
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).yxzw(),
            vec4!(2usize, 1usize, 3usize, 4usize)
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).zyxw(),
            vec4!(3usize, 2usize, 1usize, 4usize)
        );
        assert_eq!(
            vec4!(1usize, 2usize, 3usize, 4usize).wyzx(),
            vec4!(4usize, 2usize, 3usize, 1usize)
        );
    }
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(1usize, 2usize)[2];
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(1usize, 2usize, 3usize)[3];
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(1usize, 2usize, 3usize, 4usize)[4];
}

#[test]
fn test_nonsimd_primitive_fns() {
    assert_eq!(size_of::<Vec2S<usize>>(), size_of::<usize>() * 2);
    assert_eq!(size_of::<Vec3S<usize>>(), size_of::<usize>() * 3);
    assert_eq!(size_of::<Vec4S<usize>>(), size_of::<usize>() * 4);

    assert_eq!(align_of::<Vec2S<usize>>(), align_of::<usize>());
    assert_eq!(align_of::<Vec3S<usize>>(), align_of::<usize>());
    assert_eq!(align_of::<Vec4S<usize>>(), align_of::<usize>());

    assert_eq!(
        Vec2S::from_array([1usize, 2usize]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3S::from_array([1usize, 2usize, 3usize]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4S::from_array([1usize, 2usize, 3usize, 4usize]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(
        Vec2S::from_fn(|i| [1usize, 2usize][i]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3S::from_fn(|i| [1usize, 2usize, 3usize][i]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1usize, 2usize, 3usize, 4usize][i]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(
        Vec2S::const_from_array([1usize, 2usize]).as_array(),
        [1usize, 2usize]
    );
    assert_eq!(
        Vec3S::const_from_array([1usize, 2usize, 3usize]).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        Vec4S::const_from_array([1usize, 2usize, 3usize, 4usize]).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2s!(1usize, 2usize).as_array(), [1usize, 2usize]);
    assert_eq!(vec2s!(vec2s!(1usize, 2usize)).as_array(), [1usize, 2usize]);
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec3s!(1usize, vec2s!(2usize, 3usize)).as_array(),
        [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
    assert_eq!(
        vec4s!(1usize, vec2s!(2usize, 3usize), 4usize).as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );
    assert_eq!(
        vec4s!(
            1usize,
            vec2s!(2usize, 3usize),
            Vector::<1, usize, NonSimd>::from_array([4usize])
        )
        .as_array(),
        [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2s!(1usize).as_array(), [1usize; 2]);
    assert_eq!(vec3s!(1usize).as_array(), [1usize; 3]);
    assert_eq!(vec4s!(1usize).as_array(), [1usize; 4]);

    assert_eq!(vec2s!(1usize, 2usize).as_array_ref(), &[1usize, 2usize]);
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).as_array_ref(),
        &[1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).as_array_ref(),
        &[1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2s!(1usize, 2usize).as_mut_array(), &mut [1usize, 2usize]);
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).as_mut_array(),
        &mut [1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).as_mut_array(),
        &mut [1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(vec2s!(1usize, 2usize).as_simd(), vec2!(1usize, 2usize));
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).as_simd(),
        vec3!(1usize, 2usize, 3usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).as_simd(),
        vec4!(1usize, 2usize, 3usize, 4usize)
    );

    assert_eq!(vec2s!(1usize, 2usize).as_nonsimd(), vec2s!(1usize, 2usize));
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).as_nonsimd(),
        vec3s!(1usize, 2usize, 3usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).as_nonsimd(),
        vec4s!(1usize, 2usize, 3usize, 4usize)
    );

    assert_eq!(vec2s!(1usize, 2usize).len(), 2);
    assert_eq!(vec3s!(1usize, 2usize, 3usize).len(), 3);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).len(), 4);

    assert_eq!(vec2s!(1usize, 2usize).is_simd(), false);
    assert_eq!(vec3s!(1usize, 2usize, 3usize).is_simd(), false);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).is_simd(), false);

    assert_eq!(vec2s!(1usize, 2usize).get(0), Some(1usize));
    assert_eq!(vec2s!(1usize, 2usize).get(1), Some(2usize));
    assert_eq!(vec2s!(1usize, 2usize).get(2), None);
    assert_eq!(vec2s!(1usize, 2usize).get(3), None);

    assert_eq!(vec3s!(1usize, 2usize, 3usize).get(0), Some(1usize));
    assert_eq!(vec3s!(1usize, 2usize, 3usize).get(1), Some(2usize));
    assert_eq!(vec3s!(1usize, 2usize, 3usize).get(2), Some(3usize));
    assert_eq!(vec3s!(1usize, 2usize, 3usize).get(3), None);
    assert_eq!(vec3s!(1usize, 2usize, 3usize).get(4), None);

    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).get(0), Some(1usize));
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).get(1), Some(2usize));
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).get(2), Some(3usize));
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).get(3), Some(4usize));
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).get(4), None);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).get(5), None);

    assert_eq!(vec2s!(1usize, 2usize).get_mut(0), Some(&mut 1usize));
    assert_eq!(vec2s!(1usize, 2usize).get_mut(1), Some(&mut 2usize));
    assert_eq!(vec2s!(1usize, 2usize).get_mut(2), None);
    assert_eq!(vec2s!(1usize, 2usize).get_mut(3), None);

    assert_eq!(vec3s!(1usize, 2usize, 3usize).get_mut(0), Some(&mut 1usize));
    assert_eq!(vec3s!(1usize, 2usize, 3usize).get_mut(1), Some(&mut 2usize));
    assert_eq!(vec3s!(1usize, 2usize, 3usize).get_mut(2), Some(&mut 3usize));
    assert_eq!(vec3s!(1usize, 2usize, 3usize).get_mut(3), None);
    assert_eq!(vec3s!(1usize, 2usize, 3usize).get_mut(4), None);

    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_mut(0),
        Some(&mut 1usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_mut(1),
        Some(&mut 2usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_mut(2),
        Some(&mut 3usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_mut(3),
        Some(&mut 4usize)
    );
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).get_mut(4), None);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).get_mut(5), None);

    unsafe {
        assert_eq!(vec2s!(1usize, 2usize).get_unchecked(0), 1usize);
        assert_eq!(vec2s!(1usize, 2usize).get_unchecked(1), 2usize);

        assert_eq!(vec3s!(1usize, 2usize, 3usize).get_unchecked(0), 1usize);
        assert_eq!(vec3s!(1usize, 2usize, 3usize).get_unchecked(1), 2usize);
        assert_eq!(vec3s!(1usize, 2usize, 3usize).get_unchecked(2), 3usize);

        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).get_unchecked(0),
            1usize
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).get_unchecked(1),
            2usize
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).get_unchecked(2),
            3usize
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).get_unchecked(3),
            4usize
        );

        assert_eq!(vec2s!(1usize, 2usize).get_unchecked_mut(0), &mut 1usize);
        assert_eq!(vec2s!(1usize, 2usize).get_unchecked_mut(1), &mut 2usize);

        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).get_unchecked_mut(0),
            &mut 1usize
        );
        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).get_unchecked_mut(1),
            &mut 2usize
        );
        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).get_unchecked_mut(2),
            &mut 3usize
        );

        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).get_unchecked_mut(0),
            &mut 1usize
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).get_unchecked_mut(1),
            &mut 2usize
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).get_unchecked_mut(2),
            &mut 3usize
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).get_unchecked_mut(3),
            &mut 4usize
        );
    }

    assert_eq!(
        vec2s!(1usize, 2usize).iter().collect::<Vec<usize>>(),
        vec![1usize, 2usize]
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize)
            .iter()
            .collect::<Vec<usize>>(),
        vec![1usize, 2usize, 3usize]
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize)
            .iter()
            .collect::<Vec<usize>>(),
        vec![1usize, 2usize, 3usize, 4usize]
    );

    assert_eq!(
        vec2s!(1usize, 2usize)
            .iter_mut()
            .collect::<Vec<&mut usize>>(),
        vec![&mut 1usize, &mut 2usize]
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize)
            .iter_mut()
            .collect::<Vec<&mut usize>>(),
        vec![&mut 1usize, &mut 2usize, &mut 3usize]
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize)
            .iter_mut()
            .collect::<Vec<&mut usize>>(),
        vec![&mut 1usize, &mut 2usize, &mut 3usize, &mut 4usize]
    );

    assert_eq!(
        vec2s!(1usize, 2usize).map(|x| x == 2usize),
        vec2s!(false, true)
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).map(|x| x == 2usize),
        vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).map(|x| x == 2usize),
        vec4s!(false, true, false, false)
    );

    assert_eq!(
        vec2s!(1usize, 2usize).zip(vec2s!(2usize, 1usize)),
        vec2s!((1usize, 2usize), (2usize, 1usize))
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).zip(vec3s!(2usize, 3usize, 1usize)),
        vec3s!((1usize, 2usize), (2usize, 3usize), (3usize, 1usize))
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).zip(vec4s!(2usize, 3usize, 4usize, 1usize)),
        vec4s!(
            (1usize, 2usize),
            (2usize, 3usize),
            (3usize, 4usize),
            (4usize, 1usize)
        )
    );

    assert_eq!(vec2s!(1usize, 2usize).reverse(), vec2s!(2usize, 1usize));
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).reverse(),
        vec3s!(3usize, 2usize, 1usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).reverse(),
        vec4s!(4usize, 3usize, 2usize, 1usize)
    );

    assert_eq!(
        vec2s!(1usize, 2usize).get_const_vec2::<0, 1>(),
        vec2s!(1usize, 2usize)
    );
    assert_eq!(
        vec2s!(1usize, 2usize).get_const_vec2::<1, 0>(),
        vec2s!(2usize, 1usize)
    );
    assert_eq!(
        vec2s!(1usize, 2usize).get_const_vec2::<1, 1>(),
        vec2s!(2usize, 2usize)
    );

    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec2::<0, 1>(),
        vec2s!(1usize, 2usize)
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec2::<0, 2>(),
        vec2s!(1usize, 3usize)
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec2::<2, 1>(),
        vec2s!(3usize, 2usize)
    );

    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec2::<0, 1>(),
        vec2s!(1usize, 2usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec2::<1, 3>(),
        vec2s!(2usize, 4usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec2::<3, 1>(),
        vec2s!(4usize, 2usize)
    );

    assert_eq!(
        vec2s!(1usize, 2usize).get_const_vec3::<0, 1, 1>(),
        vec3s!(1usize, 2usize, 2usize)
    );
    assert_eq!(
        vec2s!(1usize, 2usize).get_const_vec3::<1, 0, 1>(),
        vec3s!(2usize, 1usize, 2usize)
    );

    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec3::<0, 1, 2>(),
        vec3s!(1usize, 2usize, 3usize)
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec3::<1, 0, 2>(),
        vec3s!(2usize, 1usize, 3usize)
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec3::<2, 1, 0>(),
        vec3s!(3usize, 2usize, 1usize)
    );

    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec3::<0, 1, 2>(),
        vec3s!(1usize, 2usize, 3usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec3::<1, 0, 2>(),
        vec3s!(2usize, 1usize, 3usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec3::<2, 1, 0>(),
        vec3s!(3usize, 2usize, 1usize)
    );

    assert_eq!(
        vec2s!(1usize, 2usize).get_const_vec4::<0, 1, 1, 0>(),
        vec4s!(1usize, 2usize, 2usize, 1usize)
    );
    assert_eq!(
        vec2s!(1usize, 2usize).get_const_vec4::<1, 0, 1, 0>(),
        vec4s!(2usize, 1usize, 2usize, 1usize)
    );
    assert_eq!(
        vec2s!(1usize, 2usize).get_const_vec4::<1, 1, 0, 0>(),
        vec4s!(2usize, 2usize, 1usize, 1usize)
    );

    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec4::<0, 1, 2, 0>(),
        vec4s!(1usize, 2usize, 3usize, 1usize)
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec4::<1, 0, 2, 0>(),
        vec4s!(2usize, 1usize, 3usize, 1usize)
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize).get_const_vec4::<2, 1, 0, 0>(),
        vec4s!(3usize, 2usize, 1usize, 1usize)
    );

    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec4::<0, 1, 2, 3>(),
        vec4s!(1usize, 2usize, 3usize, 4usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec4::<1, 0, 2, 3>(),
        vec4s!(2usize, 1usize, 3usize, 4usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec4::<2, 1, 0, 3>(),
        vec4s!(3usize, 2usize, 1usize, 4usize)
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).get_const_vec4::<3, 1, 2, 0>(),
        vec4s!(4usize, 2usize, 3usize, 1usize)
    );

    assert_eq!(vec2s!(1usize, 2usize)[0], 1usize);
    assert_eq!(vec2s!(1usize, 2usize)[1], 2usize);

    assert_eq!(vec3s!(1usize, 2usize, 3usize)[0], 1usize);
    assert_eq!(vec3s!(1usize, 2usize, 3usize)[1], 2usize);
    assert_eq!(vec3s!(1usize, 2usize, 3usize)[2], 3usize);

    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize)[0], 1usize);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize)[1], 2usize);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize)[2], 3usize);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize)[3], 4usize);

    assert_eq!(&mut vec2s!(1usize, 2usize)[0], &mut 1usize);
    assert_eq!(&mut vec2s!(1usize, 2usize)[1], &mut 2usize);

    assert_eq!(&mut vec3s!(1usize, 2usize, 3usize)[0], &mut 1usize);
    assert_eq!(&mut vec3s!(1usize, 2usize, 3usize)[1], &mut 2usize);
    assert_eq!(&mut vec3s!(1usize, 2usize, 3usize)[2], &mut 3usize);

    assert_eq!(&mut vec4s!(1usize, 2usize, 3usize, 4usize)[0], &mut 1usize);
    assert_eq!(&mut vec4s!(1usize, 2usize, 3usize, 4usize)[1], &mut 2usize);
    assert_eq!(&mut vec4s!(1usize, 2usize, 3usize, 4usize)[2], &mut 3usize);
    assert_eq!(&mut vec4s!(1usize, 2usize, 3usize, 4usize)[3], &mut 4usize);

    assert_eq!(vec2s!(1usize, 2usize) == vec2s!(1usize, 2usize), true);
    assert_eq!(vec2s!(1usize, 2usize) == vec2s!(2usize, 1usize), false);
    assert_eq!(vec2s!(1usize, 2usize) == vec2s!(2usize, 2usize), false);

    assert_eq!(
        vec3s!(1usize, 2usize, 3usize) == vec3s!(1usize, 2usize, 3usize),
        true
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize) == vec3s!(4usize, 3usize, 2usize),
        false
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize) == vec3s!(2usize, 2usize, 3usize),
        false
    );

    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize) == vec4s!(1usize, 2usize, 3usize, 4usize),
        true
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize) == vec4s!(4usize, 3usize, 2usize, 1usize),
        false
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize) == vec4s!(2usize, 2usize, 2usize, 4usize),
        false
    );

    assert_eq!(vec2s!(1usize, 2usize) != vec2s!(1usize, 2usize), false);
    assert_eq!(vec2s!(1usize, 2usize) != vec2s!(2usize, 1usize), true);
    assert_eq!(vec2s!(1usize, 2usize) != vec2s!(2usize, 2usize), true);

    assert_eq!(
        vec3s!(1usize, 2usize, 3usize) != vec3s!(1usize, 2usize, 3usize),
        false
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize) != vec3s!(4usize, 3usize, 2usize),
        true
    );
    assert_eq!(
        vec3s!(1usize, 2usize, 3usize) != vec3s!(2usize, 2usize, 3usize),
        true
    );

    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize) != vec4s!(1usize, 2usize, 3usize, 4usize),
        false
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize) != vec4s!(4usize, 3usize, 2usize, 1usize),
        true
    );
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize) != vec4s!(2usize, 2usize, 2usize, 4usize),
        true
    );

    assert_eq!(vec2s!(1usize, 2usize).to_string(), "(1, 2)");
    assert_eq!(vec3s!(1usize, 2usize, 3usize).to_string(), "(1, 2, 3)");
    assert_eq!(
        vec4s!(1usize, 2usize, 3usize, 4usize).to_string(),
        "(1, 2, 3, 4)"
    );

    assert_eq!(format!("{:?}", vec2s!(1usize, 2usize)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3s!(1usize, 2usize, 3usize)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4s!(1usize, 2usize, 3usize, 4usize)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2s!(1usize, 2usize).x, 1usize);
    assert_eq!(vec2s!(1usize, 2usize).y, 2usize);

    assert_eq!(vec3s!(1usize, 2usize, 3usize).x, 1usize);
    assert_eq!(vec3s!(1usize, 2usize, 3usize).y, 2usize);
    assert_eq!(vec3s!(1usize, 2usize, 3usize).z, 3usize);

    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).x, 1usize);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).y, 2usize);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).z, 3usize);
    assert_eq!(vec4s!(1usize, 2usize, 3usize, 4usize).w, 4usize);

    assert_eq!(&mut vec2s!(1usize, 2usize).x, &mut 1usize);
    assert_eq!(&mut vec2s!(1usize, 2usize).y, &mut 2usize);

    assert_eq!(&mut vec3s!(1usize, 2usize, 3usize).x, &mut 1usize);
    assert_eq!(&mut vec3s!(1usize, 2usize, 3usize).y, &mut 2usize);
    assert_eq!(&mut vec3s!(1usize, 2usize, 3usize).z, &mut 3usize);

    assert_eq!(&mut vec4s!(1usize, 2usize, 3usize, 4usize).x, &mut 1usize);
    assert_eq!(&mut vec4s!(1usize, 2usize, 3usize, 4usize).y, &mut 2usize);
    assert_eq!(&mut vec4s!(1usize, 2usize, 3usize, 4usize).z, &mut 3usize);
    assert_eq!(&mut vec4s!(1usize, 2usize, 3usize, 4usize).w, &mut 4usize);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2s!(1usize, 2usize).xy(), vec2s!(1usize, 2usize));
        assert_eq!(vec2s!(1usize, 2usize).yx(), vec2s!(2usize, 1usize));
        assert_eq!(vec2s!(1usize, 2usize).yy(), vec2s!(2usize, 2usize));

        assert_eq!(vec3s!(1usize, 2usize, 3usize).xy(), vec2s!(1usize, 2usize));
        assert_eq!(vec3s!(1usize, 2usize, 3usize).xz(), vec2s!(1usize, 3usize));
        assert_eq!(vec3s!(1usize, 2usize, 3usize).zy(), vec2s!(3usize, 2usize));

        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).xy(),
            vec2s!(1usize, 2usize)
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).yw(),
            vec2s!(2usize, 4usize)
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).wy(),
            vec2s!(4usize, 2usize)
        );

        assert_eq!(vec2s!(1usize, 2usize).xyy(), vec3s!(1usize, 2usize, 2usize));
        assert_eq!(vec2s!(1usize, 2usize).yxy(), vec3s!(2usize, 1usize, 2usize));

        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).xyz(),
            vec3s!(1usize, 2usize, 3usize)
        );
        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).yxz(),
            vec3s!(2usize, 1usize, 3usize)
        );
        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).zyx(),
            vec3s!(3usize, 2usize, 1usize)
        );

        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).xyz(),
            vec3s!(1usize, 2usize, 3usize)
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).yxz(),
            vec3s!(2usize, 1usize, 3usize)
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).zyx(),
            vec3s!(3usize, 2usize, 1usize)
        );

        assert_eq!(
            vec2s!(1usize, 2usize).xyyx(),
            vec4s!(1usize, 2usize, 2usize, 1usize)
        );
        assert_eq!(
            vec2s!(1usize, 2usize).yxyx(),
            vec4s!(2usize, 1usize, 2usize, 1usize)
        );
        assert_eq!(
            vec2s!(1usize, 2usize).yyxx(),
            vec4s!(2usize, 2usize, 1usize, 1usize)
        );

        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).xyzx(),
            vec4s!(1usize, 2usize, 3usize, 1usize)
        );
        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).yxzx(),
            vec4s!(2usize, 1usize, 3usize, 1usize)
        );
        assert_eq!(
            vec3s!(1usize, 2usize, 3usize).zyxx(),
            vec4s!(3usize, 2usize, 1usize, 1usize)
        );

        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).xyzw(),
            vec4s!(1usize, 2usize, 3usize, 4usize)
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).yxzw(),
            vec4s!(2usize, 1usize, 3usize, 4usize)
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).zyxw(),
            vec4s!(3usize, 2usize, 1usize, 4usize)
        );
        assert_eq!(
            vec4s!(1usize, 2usize, 3usize, 4usize).wyzx(),
            vec4s!(4usize, 2usize, 3usize, 1usize)
        );
    }
}

#[test]
#[should_panic]
fn test_vec2s_index_panic() {
    vec2!(1usize, 2usize)[2];
}

#[test]
#[should_panic]
fn test_vec3s_index_panic() {
    vec3!(1usize, 2usize, 3usize)[3];
}

#[test]
#[should_panic]
fn test_vec4s_index_panic() {
    vec4!(1usize, 2usize, 3usize, 4usize)[4];
}

#[test]
fn test_simd_int_fns() {
    assert_eq!(!vec2!(5usize, 7usize), vec2!(!5usize, !7usize));
    assert_eq!(
        !vec3!(5usize, 7usize, 9usize),
        vec3!(!5usize, !7usize, !9usize)
    );
    assert_eq!(
        !vec4!(5usize, 7usize, 9usize, 11usize),
        vec4!(!5usize, !7usize, !9usize, !11usize)
    );

    assert_eq!(
        vec2!(5usize, 7usize) + vec2!(9usize, 11usize),
        vec2!(5usize + 9usize, 7usize + 11usize)
    );
    assert_eq!(
        vec3!(5usize, 7usize, 9usize) + vec3!(11usize, 13usize, 15usize),
        vec3!(5usize + 11usize, 7usize + 13usize, 9usize + 15usize)
    );
    assert_eq!(
        vec4!(5usize, 7usize, 9usize, 11usize) + vec4!(13usize, 15usize, 17usize, 19usize),
        vec4!(
            5usize + 13usize,
            7usize + 15usize,
            9usize + 17usize,
            11usize + 19usize
        )
    );

    assert_eq!(
        vec2!(9usize, 11usize) - vec2!(5usize, 7usize),
        vec2!(9usize - 5usize, 11usize - 7usize)
    );
    assert_eq!(
        vec3!(9usize, 11usize, 13usize) - vec3!(5usize, 7usize, 9usize),
        vec3!(9usize - 5usize, 11usize - 7usize, 13usize - 9usize)
    );
    assert_eq!(
        vec4!(9usize, 11usize, 13usize, 15usize) - vec4!(5usize, 7usize, 9usize, 11usize),
        vec4!(
            9usize - 5usize,
            11usize - 7usize,
            13usize - 9usize,
            15usize - 11usize
        )
    );

    assert_eq!(
        vec2!(2usize, 4usize) * vec2!(3usize, 5usize),
        vec2!(2usize * 3usize, 4usize * 5usize)
    );
    assert_eq!(
        vec3!(2usize, 4usize, 6usize) * vec3!(3usize, 5usize, 7usize),
        vec3!(2usize * 3usize, 4usize * 5usize, 6usize * 7usize)
    );
    assert_eq!(
        vec4!(2usize, 4usize, 6usize, 8usize) * vec4!(3usize, 5usize, 7usize, 9usize),
        vec4!(
            2usize * 3usize,
            4usize * 5usize,
            6usize * 7usize,
            8usize * 9usize
        )
    );

    assert_eq!(
        vec2!(21usize, 23usize) / vec2!(4usize, 50usize),
        vec2!(21usize / 4usize, 23usize / 50usize)
    );
    assert_eq!(
        vec3!(21usize, 23usize, 25usize) / vec3!(4usize, 50usize, 3usize),
        vec3!(21usize / 4usize, 23usize / 50usize, 25usize / 3usize)
    );
    assert_eq!(
        vec4!(21usize, 23usize, 25usize, 27usize) / vec4!(4usize, 50usize, 3usize, 10usize),
        vec4!(
            21usize / 4usize,
            23usize / 50usize,
            25usize / 3usize,
            27usize / 10usize
        )
    );

    assert_eq!(
        vec2!(16usize, 19usize) / vec2!(5usize, 5usize),
        vec2!(16usize / 5usize, 19usize / 5usize)
    );
    assert_eq!(
        vec3!(16usize, 19usize, 22usize) / vec3!(5usize, 5usize, 5usize),
        vec3!(16usize / 5usize, 19usize / 5usize, 22usize / 5usize)
    );
    assert_eq!(
        vec4!(16usize, 19usize, 22usize, 25usize) / vec4!(5usize, 5usize, 5usize, 5usize),
        vec4!(
            16usize / 5usize,
            19usize / 5usize,
            22usize / 5usize,
            25usize / 5usize
        )
    );

    assert_eq!(
        vec2!(21usize, 23usize) % vec2!(4usize, 50usize),
        vec2!(21usize % 4usize, 23usize % 50usize)
    );
    assert_eq!(
        vec3!(21usize, 23usize, 25usize) % vec3!(4usize, 50usize, 3usize),
        vec3!(21usize % 4usize, 23usize % 50usize, 25usize % 3usize)
    );
    assert_eq!(
        vec4!(21usize, 23usize, 25usize, 27usize) % vec4!(4usize, 50usize, 3usize, 10usize),
        vec4!(
            21usize % 4usize,
            23usize % 50usize,
            25usize % 3usize,
            27usize % 10usize
        )
    );

    assert_eq!(
        vec2!(21usize, 23usize) & vec2!(4usize, 50usize),
        vec2!(21usize & 4usize, 23usize & 50usize)
    );
    assert_eq!(
        vec3!(21usize, 23usize, 25usize) & vec3!(4usize, 50usize, 3usize),
        vec3!(21usize & 4usize, 23usize & 50usize, 25usize & 3usize)
    );
    assert_eq!(
        vec4!(21usize, 23usize, 25usize, 27usize) & vec4!(4usize, 50usize, 3usize, 10usize),
        vec4!(
            21usize & 4usize,
            23usize & 50usize,
            25usize & 3usize,
            27usize & 10usize
        )
    );

    assert_eq!(
        vec2!(21usize, 23usize) | vec2!(4usize, 50usize),
        vec2!(21usize | 4usize, 23usize | 50usize)
    );
    assert_eq!(
        vec3!(21usize, 23usize, 25usize) | vec3!(4usize, 50usize, 3usize),
        vec3!(21usize | 4usize, 23usize | 50usize, 25usize | 3usize)
    );
    assert_eq!(
        vec4!(21usize, 23usize, 25usize, 27usize) | vec4!(4usize, 50usize, 3usize, 10usize),
        vec4!(
            21usize | 4usize,
            23usize | 50usize,
            25usize | 3usize,
            27usize | 10usize
        )
    );

    assert_eq!(
        vec2!(21usize, 23usize) ^ vec2!(4usize, 50usize),
        vec2!(21usize ^ 4usize, 23usize ^ 50usize)
    );
    assert_eq!(
        vec3!(21usize, 23usize, 25usize) ^ vec3!(4usize, 50usize, 3usize),
        vec3!(21usize ^ 4usize, 23usize ^ 50usize, 25usize ^ 3usize)
    );
    assert_eq!(
        vec4!(21usize, 23usize, 25usize, 27usize) ^ vec4!(4usize, 50usize, 3usize, 10usize),
        vec4!(
            21usize ^ 4usize,
            23usize ^ 50usize,
            25usize ^ 3usize,
            27usize ^ 10usize
        )
    );

    assert_eq!(Vec2::ZERO, vec2!(0usize, 0usize));
    assert_eq!(Vec3::ZERO, vec3!(0usize, 0usize, 0usize));
    assert_eq!(Vec4::ZERO, vec4!(0usize, 0usize, 0usize, 0usize));

    assert_eq!(Vec2::ONE, vec2!(1usize, 1usize));
    assert_eq!(Vec3::ONE, vec3!(1usize, 1usize, 1usize));
    assert_eq!(Vec4::ONE, vec4!(1usize, 1usize, 1usize, 1usize));

    assert_eq!(Vec2::X, vec2!(1usize, 0usize));
    assert_eq!(Vec3::Y, vec3!(0usize, 1usize, 0usize));
    assert_eq!(Vec4::Z, vec4!(0usize, 0usize, 1usize, 0usize));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2::<usize>::RIGHT, Vec2::<usize>::X);
        assert_eq!(Vec3::<usize>::RIGHT, Vec3::<usize>::X);
        assert_eq!(Vec4::<usize>::RIGHT, Vec4::<usize>::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2::<usize>::LEFT, Vec2::<usize>::X);
        assert_eq!(Vec3::<usize>::LEFT, Vec3::<usize>::X);
        assert_eq!(Vec4::<usize>::LEFT, Vec4::<usize>::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3::<usize>::BACKWARDS, Vec3::<usize>::Z);
        assert_eq!(Vec4::<usize>::BACKWARDS, Vec4::<usize>::Z);
    }
}

macro_rules! test_simd_binop_edgecase {
    ( $(#[$attr:meta])* $vec2_fn:ident, $vec3_fn:ident, $vec4_fn:ident: $op:tt for $lhs:expr, $rhs:expr) => {
        #[test]
        $(#[$attr])*
        fn $vec2_fn() {
            assert_eq!(vec2!(1usize, $lhs) $op vec2!(1usize, $rhs), vec2!(1usize $op 1usize, $lhs $op $rhs));
        }

        #[test]
        $(#[$attr])*
        fn $vec3_fn() {
            assert_eq!(vec3!(1usize, $lhs, 1usize) $op vec3!(1usize, $rhs, 1usize), vec3!(1usize $op 1usize, $lhs $op $rhs, 1usize $op 1usize));
        }

        #[test]
        $(#[$attr])*
        fn $vec4_fn() {
            assert_eq!(vec4!(1usize, $lhs, 1usize, 1usize) $op vec4!(1usize, $rhs, 1usize, 1usize), vec4!(1usize $op 1usize, $lhs $op $rhs, 1usize $op 1usize, 1usize $op 1usize));
        }
    }
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2_add_overflow,
    test_usizevec3_add_overflow,
    test_usizevec4_add_overflow:

    + for usize::MAX, 3
}
test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2_add_exact_overflow,
    test_usizevec3_add_exact_overflow,
    test_usizevec4_add_exact_overflow:

    + for usize::MAX, 1
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2_sub_overflow,
    test_usizevec3_sub_overflow,
    test_usizevec4_sub_overflow:

    - for usize::MIN, 3
}
test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2_sub_exact_overflow,
    test_usizevec3_sub_exact_overflow,
    test_usizevec4_sub_exact_overflow:

    - for usize::MIN, 1
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2_mul_overflow,
    test_usizevec3_mul_overflow,
    test_usizevec4_mul_overflow:

    * for usize::MAX, 3
}

test_simd_binop_edgecase! {
    #[should_panic]
    test_usizevec2_div_by_zero,
    test_usizevec3_div_by_zero,
    test_usizevec4_div_by_zero:

    / for 5usize, 0usize
}

test_simd_binop_edgecase! {
    #[should_panic]
    test_usizevec2_rem_by_zero,
    test_usizevec3_rem_by_zero,
    test_usizevec4_rem_by_zero:

    % for 5usize, 0usize
}

#[test]
fn test_nonsimd_int_fns() {
    assert_eq!(!vec2s!(5usize, 7usize), vec2s!(!5usize, !7usize));
    assert_eq!(
        !vec3s!(5usize, 7usize, 9usize),
        vec3s!(!5usize, !7usize, !9usize)
    );
    assert_eq!(
        !vec4s!(5usize, 7usize, 9usize, 11usize),
        vec4s!(!5usize, !7usize, !9usize, !11usize)
    );

    assert_eq!(
        vec2s!(5usize, 7usize) + vec2s!(9usize, 11usize),
        vec2s!(5usize + 9usize, 7usize + 11usize)
    );
    assert_eq!(
        vec3s!(5usize, 7usize, 9usize) + vec3s!(11usize, 13usize, 15usize),
        vec3s!(5usize + 11usize, 7usize + 13usize, 9usize + 15usize)
    );
    assert_eq!(
        vec4s!(5usize, 7usize, 9usize, 11usize) + vec4s!(13usize, 15usize, 17usize, 19usize),
        vec4s!(
            5usize + 13usize,
            7usize + 15usize,
            9usize + 17usize,
            11usize + 19usize
        )
    );

    assert_eq!(
        vec2s!(9usize, 11usize) - vec2s!(5usize, 7usize),
        vec2s!(9usize - 5usize, 11usize - 7usize)
    );
    assert_eq!(
        vec3s!(9usize, 11usize, 13usize) - vec3s!(5usize, 7usize, 9usize),
        vec3s!(9usize - 5usize, 11usize - 7usize, 13usize - 9usize)
    );
    assert_eq!(
        vec4s!(9usize, 11usize, 13usize, 15usize) - vec4s!(5usize, 7usize, 9usize, 11usize),
        vec4s!(
            9usize - 5usize,
            11usize - 7usize,
            13usize - 9usize,
            15usize - 11usize
        )
    );

    assert_eq!(
        vec2s!(2usize, 4usize) * vec2s!(3usize, 5usize),
        vec2s!(2usize * 3usize, 4usize * 5usize)
    );
    assert_eq!(
        vec3s!(2usize, 4usize, 6usize) * vec3s!(3usize, 5usize, 7usize),
        vec3s!(2usize * 3usize, 4usize * 5usize, 6usize * 7usize)
    );
    assert_eq!(
        vec4s!(2usize, 4usize, 6usize, 8usize) * vec4s!(3usize, 5usize, 7usize, 9usize),
        vec4s!(
            2usize * 3usize,
            4usize * 5usize,
            6usize * 7usize,
            8usize * 9usize
        )
    );

    assert_eq!(
        vec2s!(21usize, 23usize) / vec2s!(4usize, 50usize),
        vec2s!(21usize / 4usize, 23usize / 50usize)
    );
    assert_eq!(
        vec3s!(21usize, 23usize, 25usize) / vec3s!(4usize, 50usize, 3usize),
        vec3s!(21usize / 4usize, 23usize / 50usize, 25usize / 3usize)
    );
    assert_eq!(
        vec4s!(21usize, 23usize, 25usize, 27usize) / vec4s!(4usize, 50usize, 3usize, 10usize),
        vec4s!(
            21usize / 4usize,
            23usize / 50usize,
            25usize / 3usize,
            27usize / 10usize
        )
    );

    assert_eq!(
        vec2s!(16usize, 19usize) / vec2s!(5usize, 5usize),
        vec2s!(16usize / 5usize, 19usize / 5usize)
    );
    assert_eq!(
        vec3s!(16usize, 19usize, 22usize) / vec3s!(5usize, 5usize, 5usize),
        vec3s!(16usize / 5usize, 19usize / 5usize, 22usize / 5usize)
    );
    assert_eq!(
        vec4s!(16usize, 19usize, 22usize, 25usize) / vec4s!(5usize, 5usize, 5usize, 5usize),
        vec4s!(
            16usize / 5usize,
            19usize / 5usize,
            22usize / 5usize,
            25usize / 5usize
        )
    );

    assert_eq!(
        vec2s!(21usize, 23usize) % vec2s!(4usize, 50usize),
        vec2s!(21usize % 4usize, 23usize % 50usize)
    );
    assert_eq!(
        vec3s!(21usize, 23usize, 25usize) % vec3s!(4usize, 50usize, 3usize),
        vec3s!(21usize % 4usize, 23usize % 50usize, 25usize % 3usize)
    );
    assert_eq!(
        vec4s!(21usize, 23usize, 25usize, 27usize) % vec4s!(4usize, 50usize, 3usize, 10usize),
        vec4s!(
            21usize % 4usize,
            23usize % 50usize,
            25usize % 3usize,
            27usize % 10usize
        )
    );

    assert_eq!(
        vec2s!(21usize, 23usize) & vec2s!(4usize, 50usize),
        vec2s!(21usize & 4usize, 23usize & 50usize)
    );
    assert_eq!(
        vec3s!(21usize, 23usize, 25usize) & vec3s!(4usize, 50usize, 3usize),
        vec3s!(21usize & 4usize, 23usize & 50usize, 25usize & 3usize)
    );
    assert_eq!(
        vec4s!(21usize, 23usize, 25usize, 27usize) & vec4s!(4usize, 50usize, 3usize, 10usize),
        vec4s!(
            21usize & 4usize,
            23usize & 50usize,
            25usize & 3usize,
            27usize & 10usize
        )
    );

    assert_eq!(
        vec2s!(21usize, 23usize) | vec2s!(4usize, 50usize),
        vec2s!(21usize | 4usize, 23usize | 50usize)
    );
    assert_eq!(
        vec3s!(21usize, 23usize, 25usize) | vec3s!(4usize, 50usize, 3usize),
        vec3s!(21usize | 4usize, 23usize | 50usize, 25usize | 3usize)
    );
    assert_eq!(
        vec4s!(21usize, 23usize, 25usize, 27usize) | vec4s!(4usize, 50usize, 3usize, 10usize),
        vec4s!(
            21usize | 4usize,
            23usize | 50usize,
            25usize | 3usize,
            27usize | 10usize
        )
    );

    assert_eq!(
        vec2s!(21usize, 23usize) ^ vec2s!(4usize, 50usize),
        vec2s!(21usize ^ 4usize, 23usize ^ 50usize)
    );
    assert_eq!(
        vec3s!(21usize, 23usize, 25usize) ^ vec3s!(4usize, 50usize, 3usize),
        vec3s!(21usize ^ 4usize, 23usize ^ 50usize, 25usize ^ 3usize)
    );
    assert_eq!(
        vec4s!(21usize, 23usize, 25usize, 27usize) ^ vec4s!(4usize, 50usize, 3usize, 10usize),
        vec4s!(
            21usize ^ 4usize,
            23usize ^ 50usize,
            25usize ^ 3usize,
            27usize ^ 10usize
        )
    );

    assert_eq!(Vec2S::ZERO, vec2s!(0usize, 0usize));
    assert_eq!(Vec3S::ZERO, vec3s!(0usize, 0usize, 0usize));
    assert_eq!(Vec4S::ZERO, vec4s!(0usize, 0usize, 0usize, 0usize));

    assert_eq!(Vec2S::ONE, vec2s!(1usize, 1usize));
    assert_eq!(Vec3S::ONE, vec3s!(1usize, 1usize, 1usize));
    assert_eq!(Vec4S::ONE, vec4s!(1usize, 1usize, 1usize, 1usize));

    assert_eq!(Vec2S::X, vec2s!(1usize, 0usize));
    assert_eq!(Vec3S::Y, vec3s!(0usize, 1usize, 0usize));
    assert_eq!(Vec4S::Z, vec4s!(0usize, 0usize, 1usize, 0usize));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2S::<usize>::RIGHT, Vec2S::<usize>::X);
        assert_eq!(Vec3S::<usize>::RIGHT, Vec3S::<usize>::X);
        assert_eq!(Vec4S::<usize>::RIGHT, Vec4S::<usize>::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2S::<usize>::LEFT, Vec2S::<usize>::X);
        assert_eq!(Vec3S::<usize>::LEFT, Vec3S::<usize>::X);
        assert_eq!(Vec4S::<usize>::LEFT, Vec4S::<usize>::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3S::<usize>::BACKWARDS, Vec3S::<usize>::Z);
        assert_eq!(Vec4S::<usize>::BACKWARDS, Vec4S::<usize>::Z);
    }
}

macro_rules! test_nonsimd_binop_edgecase {
    ( $(#[$attr:meta])* $vec2_fn:ident, $vec3_fn:ident, $vec4_fn:ident: $op:tt for $lhs:expr, $rhs:expr) => {
        #[test]
        $(#[$attr])*
        fn $vec2_fn() {
            assert_eq!(vec2s!(1usize, $lhs) $op vec2s!(1usize, $rhs), vec2s!(1usize $op 1usize, $lhs $op $rhs));
        }

        #[test]
        $(#[$attr])*
        fn $vec3_fn() {
            assert_eq!(vec3s!(1usize, $lhs, 1usize) $op vec3s!(1usize, $rhs, 1usize), vec3s!(1usize $op 1usize, $lhs $op $rhs, 1usize $op 1usize));
        }

        #[test]
        $(#[$attr])*
        fn $vec4_fn() {
            assert_eq!(vec4s!(1usize, $lhs, 1usize, 1usize) $op vec4s!(1usize, $rhs, 1usize, 1usize), vec4s!(1usize $op 1usize, $lhs $op $rhs, 1usize $op 1usize, 1usize $op 1usize));
        }
    }
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2s_add_overflow,
    test_usizevec3s_add_overflow,
    test_usizevec4s_add_overflow:

    + for usize::MAX, 3
}
test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2s_add_exact_overflow,
    test_usizevec3s_add_exact_overflow,
    test_usizevec4s_add_exact_overflow:

    + for usize::MAX, 1
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2s_sub_overflow,
    test_usizevec3s_sub_overflow,
    test_usizevec4s_sub_overflow:

    - for usize::MIN, 3
}
test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2s_sub_exact_overflow,
    test_usizevec3s_sub_exact_overflow,
    test_usizevec4s_sub_exact_overflow:

    - for usize::MIN, 1
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_usizevec2s_mul_overflow,
    test_usizevec3s_mul_overflow,
    test_usizevec4s_mul_overflow:

    * for usize::MAX, 3
}

test_nonsimd_binop_edgecase! {
    #[should_panic]
    test_usizevec2s_div_by_zero,
    test_usizevec3s_div_by_zero,
    test_usizevec4s_div_by_zero:

    / for 5usize, 0usize
}

test_nonsimd_binop_edgecase! {
    #[should_panic]
    test_usizevec2s_rem_by_zero,
    test_usizevec3s_rem_by_zero,
    test_usizevec4s_rem_by_zero:

    % for 5usize, 0usize
}
