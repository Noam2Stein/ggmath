// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use ggmath::*;

#[test]
fn test_vec4_constructor() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize),
        Vec4::from_array([0usize, 1usize, 2usize, 3usize])
    );
    assert_eq!(
        vec4!(0usize, vec2!(1usize, 2usize), 3usize),
        Vec4::from_array([0usize, 1usize, 2usize, 3usize])
    );
    assert_eq!(
        vec4!(vec4!(0usize, 1usize, 2usize, 3usize)),
        Vec4::from_array([0usize, 1usize, 2usize, 3usize])
    );
}

#[test]
fn test_vec4_as_simd() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).as_simd(),
        vec4!(0usize, 1usize, 2usize, 3usize)
    );
}

#[test]
fn test_vec4_as_non_simd() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).as_non_simd(),
        vec4s!(0usize, 1usize, 2usize, 3usize)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0usize, 1usize, 2usize, 3usize]).as_array(),
        [0usize, 1usize, 2usize, 3usize]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0usize), vec4!(0usize, 0usize, 0usize, 0usize));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).index(0), 0usize);
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).index(1), 1usize);
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).index(2), 2usize);
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).index(3), 3usize);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0usize, 1usize, 2usize, 3usize).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).get(0), Some(0usize));
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).get(1), Some(1usize));
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).get(2), Some(2usize));
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).get(3), Some(3usize));

    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4!(0usize, 1usize, 2usize, 3usize).get_unchecked(0),
            0usize
        );
        assert_eq!(
            vec4!(0usize, 1usize, 2usize, 3usize).get_unchecked(1),
            1usize
        );
        assert_eq!(
            vec4!(0usize, 1usize, 2usize, 3usize).get_unchecked(2),
            2usize
        );
        assert_eq!(
            vec4!(0usize, 1usize, 2usize, 3usize).get_unchecked(3),
            3usize
        );
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
        vec.set(0, 50usize);

        assert_eq!(vec, vec4!(50usize, 1usize, 2usize, 3usize));
    }
    {
        let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
        vec.set(1, 50usize);

        assert_eq!(vec, vec4!(0usize, 50usize, 2usize, 3usize));
    }
    {
        let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
        vec.set(2, 50usize);

        assert_eq!(vec, vec4!(0usize, 1usize, 50usize, 3usize));
    }
    {
        let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
        vec.set(3, 50usize);

        assert_eq!(vec, vec4!(0usize, 1usize, 2usize, 50usize));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
    vec.set(4, 0usize);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
        vec.try_set(0, 50usize).unwrap();

        assert_eq!(vec, vec4!(50usize, 1usize, 2usize, 3usize));
    }
    {
        let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
        vec.try_set(1, 50usize).unwrap();

        assert_eq!(vec, vec4!(0usize, 50usize, 2usize, 3usize));
    }
    {
        let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
        vec.try_set(2, 50usize).unwrap();

        assert_eq!(vec, vec4!(0usize, 1usize, 50usize, 3usize));
    }
    {
        let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
        vec.try_set(3, 50usize).unwrap();

        assert_eq!(vec, vec4!(0usize, 1usize, 2usize, 50usize));
    }

    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).try_set(4, 0usize),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
            vec.set_unchecked(0, 50usize);

            assert_eq!(vec, vec4!(50usize, 1usize, 2usize, 3usize));
        }
        {
            let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
            vec.set_unchecked(1, 50usize);

            assert_eq!(vec, vec4!(0usize, 50usize, 2usize, 3usize));
        }
        {
            let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
            vec.set_unchecked(2, 50usize);

            assert_eq!(vec, vec4!(0usize, 1usize, 50usize, 3usize));
        }
        {
            let mut vec = vec4!(0usize, 1usize, 2usize, 3usize);
            vec.set_unchecked(3, 50usize);

            assert_eq!(vec, vec4!(0usize, 1usize, 2usize, 50usize));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0usize, 1usize, 2usize, 3usize).z(), 2usize);
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).zw(),
        vec2!(2usize, 3usize)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).zwy(),
        vec3!(2usize, 3usize, 1usize)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).zwyz(),
        vec4!(2usize, 3usize, 1usize, 2usize)
    );
}

#[test]
fn test_vec4_with_swizzle() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).with_y(0usize),
        vec4!(0usize, 0usize, 2usize, 3usize)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).with_yx(vec2!(0usize, 1usize)),
        vec4!(1usize, 0usize, 2usize, 3usize)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).with_yxz(vec3!(0usize, 2usize, 1usize)),
        vec4!(2usize, 0usize, 1usize, 3usize)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).with_yxzw(vec4!(0usize, 2usize, 1usize, 0usize)),
        vec4!(2usize, 0usize, 1usize, 0usize)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).fold(13, |acc, x| acc + x),
        13 + 0usize + 1usize + 2usize + 3usize
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).reduce(|acc, x| acc + x),
        0usize + 1usize + 2usize + 3usize
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).eq_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).eq_mask(vec4!(0usize, 0usize, 2usize, 3usize)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).eq_mask(vec4!(4usize, 5usize, 6usize, 7usize)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).ne_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).ne_mask(vec4!(0usize, 0usize, 2usize, 3usize)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).ne_mask(vec4!(4usize, 5usize, 6usize, 7usize)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).lt_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).lt_mask(vec4!(1usize, 0usize, 2usize, 3usize)),
        vec4!(true, false, false, false),
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).lt_mask(vec4!(4usize, 5usize, 6usize, 7usize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4usize, 5usize, 6usize, 7usize).lt_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).gt_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).gt_mask(vec4!(1usize, 0usize, 2usize, 3usize)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).gt_mask(vec4!(4usize, 5usize, 6usize, 7usize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4usize, 5usize, 6usize, 7usize).gt_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).le_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).le_mask(vec4!(1usize, 0usize, 2usize, 3usize)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).le_mask(vec4!(4usize, 5usize, 6usize, 7usize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4usize, 5usize, 6usize, 7usize).le_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).ge_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).ge_mask(vec4!(1usize, 0usize, 2usize, 3usize)),
        vec4!(false, true, true, true),
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize).ge_mask(vec4!(4usize, 5usize, 6usize, 7usize)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4usize, 5usize, 6usize, 7usize).ge_mask(vec4!(0usize, 1usize, 2usize, 3usize)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize) == vec4!(0usize, 1usize, 2usize, 3usize),
        true
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize) == vec4!(0usize, 0usize, 2usize, 3usize),
        false
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize) == vec4!(4usize, 5usize, 6usize, 7usize),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize) != vec4!(0usize, 1usize, 2usize, 3usize),
        false
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize) != vec4!(0usize, 0usize, 2usize, 3usize),
        true
    );
    assert_eq!(
        vec4!(0usize, 1usize, 2usize, 3usize) != vec4!(4usize, 5usize, 6usize, 7usize),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0usize, 1usize, 2usize, 3usize)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(
        format!("{}", vec4!(0usize, 1usize, 2usize, 3usize)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4_const_from_array() {
    assert_eq!(
        Vec4::<usize>::const_from_array([0usize, 1usize, 2usize, 3usize]),
        Vec4::from_array([0usize, 1usize, 2usize, 3usize])
    );
}
