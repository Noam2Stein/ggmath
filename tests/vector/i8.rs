// This file was automatically generated by ggmath's codegen tool.
// Do not modify this file directly!

use ggmath::*;

use crate::assert_panic;

#[test]
fn test_simd_primitive_fns() {
    assert_eq!(Vec2::from_array([1i8, 2i8]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3::from_array([1i8, 2i8, 3i8]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4::from_array([1i8, 2i8, 3i8, 4i8]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(Vec2::from_fn(|i| [1i8, 2i8][i]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3::from_fn(|i| [1i8, 2i8, 3i8][i]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1i8, 2i8, 3i8, 4i8][i]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(Vec2::const_from_array([1i8, 2i8]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3::const_from_array([1i8, 2i8, 3i8]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4::const_from_array([1i8, 2i8, 3i8, 4i8]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2!(1i8, 2i8).as_array(), [1i8, 2i8]);
    assert_eq!(vec2!(vec2!(1i8, 2i8)).as_array(), [1i8, 2i8]);
    assert_eq!(vec3!(1i8, 2i8, 3i8).as_array(), [1i8, 2i8, 3i8]);
    assert_eq!(vec3!(1i8, vec2!(2i8, 3i8)).as_array(), [1i8, 2i8, 3i8]);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).as_array(), [1i8, 2i8, 3i8, 4i8]);
    assert_eq!(
        vec4!(1i8, vec2!(2i8, 3i8), 4i8).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2!(1i8).as_array(), [1i8; 2]);
    assert_eq!(vec3!(1i8).as_array(), [1i8; 3]);
    assert_eq!(vec4!(1i8).as_array(), [1i8; 4]);

    assert_eq!(vec2!(1i8, 2i8).as_array_ref(), &[1i8, 2i8]);
    assert_eq!(vec3!(1i8, 2i8, 3i8).as_array_ref(), &[1i8, 2i8, 3i8]);
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).as_array_ref(),
        &[1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2!(1i8, 2i8).as_mut_array(), &mut [1i8, 2i8]);
    assert_eq!(vec3!(1i8, 2i8, 3i8).as_mut_array(), &mut [1i8, 2i8, 3i8]);
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).as_mut_array(),
        &mut [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2!(1i8, 2i8).as_simd(), vec2!(1i8, 2i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).as_simd(), vec3!(1i8, 2i8, 3i8));
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).as_simd(),
        vec4!(1i8, 2i8, 3i8, 4i8)
    );

    assert_eq!(vec2!(1i8, 2i8).as_nonsimd(), vec2s!(1i8, 2i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).as_nonsimd(), vec3s!(1i8, 2i8, 3i8));
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).as_nonsimd(),
        vec4s!(1i8, 2i8, 3i8, 4i8)
    );

    assert_eq!(vec2!(1i8, 2i8).len(), 2);
    assert_eq!(vec3!(1i8, 2i8, 3i8).len(), 3);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).len(), 4);

    assert_eq!(vec2!(1i8, 2i8).is_simd(), true);
    assert_eq!(vec3!(1i8, 2i8, 3i8).is_simd(), true);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).is_simd(), true);

    assert_eq!(vec2!(1i8, 2i8).get(0), Some(1i8));
    assert_eq!(vec2!(1i8, 2i8).get(1), Some(2i8));
    assert_eq!(vec2!(1i8, 2i8).get(2), None);
    assert_eq!(vec2!(1i8, 2i8).get(3), None);

    assert_eq!(vec3!(1i8, 2i8, 3i8).get(0), Some(1i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).get(1), Some(2i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).get(2), Some(3i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).get(3), None);
    assert_eq!(vec3!(1i8, 2i8, 3i8).get(4), None);

    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get(0), Some(1i8));
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get(1), Some(2i8));
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get(2), Some(3i8));
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get(3), Some(4i8));
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get(4), None);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get(5), None);

    assert_eq!(vec2!(1i8, 2i8).get_mut(0), Some(&mut 1i8));
    assert_eq!(vec2!(1i8, 2i8).get_mut(1), Some(&mut 2i8));
    assert_eq!(vec2!(1i8, 2i8).get_mut(2), None);
    assert_eq!(vec2!(1i8, 2i8).get_mut(3), None);

    assert_eq!(vec3!(1i8, 2i8, 3i8).get_mut(0), Some(&mut 1i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).get_mut(1), Some(&mut 2i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).get_mut(2), Some(&mut 3i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).get_mut(3), None);
    assert_eq!(vec3!(1i8, 2i8, 3i8).get_mut(4), None);

    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_mut(0), Some(&mut 1i8));
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_mut(1), Some(&mut 2i8));
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_mut(2), Some(&mut 3i8));
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_mut(3), Some(&mut 4i8));
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_mut(4), None);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_mut(5), None);

    unsafe {
        assert_eq!(vec2!(1i8, 2i8).get_unchecked(0), 1i8);
        assert_eq!(vec2!(1i8, 2i8).get_unchecked(1), 2i8);

        assert_eq!(vec3!(1i8, 2i8, 3i8).get_unchecked(0), 1i8);
        assert_eq!(vec3!(1i8, 2i8, 3i8).get_unchecked(1), 2i8);
        assert_eq!(vec3!(1i8, 2i8, 3i8).get_unchecked(2), 3i8);

        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_unchecked(0), 1i8);
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_unchecked(1), 2i8);
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_unchecked(2), 3i8);
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_unchecked(3), 4i8);

        assert_eq!(vec2!(1i8, 2i8).get_unchecked_mut(0), &mut 1i8);
        assert_eq!(vec2!(1i8, 2i8).get_unchecked_mut(1), &mut 2i8);

        assert_eq!(vec3!(1i8, 2i8, 3i8).get_unchecked_mut(0), &mut 1i8);
        assert_eq!(vec3!(1i8, 2i8, 3i8).get_unchecked_mut(1), &mut 2i8);
        assert_eq!(vec3!(1i8, 2i8, 3i8).get_unchecked_mut(2), &mut 3i8);

        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_unchecked_mut(0), &mut 1i8);
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_unchecked_mut(1), &mut 2i8);
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_unchecked_mut(2), &mut 3i8);
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).get_unchecked_mut(3), &mut 4i8);
    }

    assert_eq!(vec2!(1i8, 2i8).iter().collect::<Vec<i8>>(), vec![1i8, 2i8]);
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).iter().collect::<Vec<i8>>(),
        vec![1i8, 2i8, 3i8]
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).iter().collect::<Vec<i8>>(),
        vec![1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(
        vec2!(1i8, 2i8).iter_mut().collect::<Vec<&mut i8>>(),
        vec![&mut 1i8, &mut 2i8]
    );
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).iter_mut().collect::<Vec<&mut i8>>(),
        vec![&mut 1i8, &mut 2i8, &mut 3i8]
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8)
            .iter_mut()
            .collect::<Vec<&mut i8>>(),
        vec![&mut 1i8, &mut 2i8, &mut 3i8, &mut 4i8]
    );

    assert_eq!(vec2!(1i8, 2i8).map(|x| x == 2i8), vec2!(false, true));
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).map(|x| x == 2i8),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).map(|x| x == 2i8),
        vec4!(false, true, false, false)
    );

    assert_eq!(vec2!(1i8, 2i8).reverse(), vec2!(2i8, 1i8));
    assert_eq!(vec3!(1i8, 2i8, 3i8).reverse(), vec3!(3i8, 2i8, 1i8));
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).reverse(),
        vec4!(4i8, 3i8, 2i8, 1i8)
    );

    assert_eq!(vec2!(1i8, 2i8).get_const_vec2::<0, 1>(), vec2!(1i8, 2i8));
    assert_eq!(vec2!(1i8, 2i8).get_const_vec2::<1, 0>(), vec2!(2i8, 1i8));
    assert_eq!(vec2!(1i8, 2i8).get_const_vec2::<1, 1>(), vec2!(2i8, 2i8));

    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec2::<0, 1>(),
        vec2!(1i8, 2i8)
    );
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec2::<0, 2>(),
        vec2!(1i8, 3i8)
    );
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec2::<2, 1>(),
        vec2!(3i8, 2i8)
    );

    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec2::<0, 1>(),
        vec2!(1i8, 2i8)
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec2::<1, 3>(),
        vec2!(2i8, 4i8)
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec2::<3, 1>(),
        vec2!(4i8, 2i8)
    );

    assert_eq!(
        vec2!(1i8, 2i8).get_const_vec3::<0, 1, 1>(),
        vec3!(1i8, 2i8, 2i8)
    );
    assert_eq!(
        vec2!(1i8, 2i8).get_const_vec3::<1, 0, 1>(),
        vec3!(2i8, 1i8, 2i8)
    );

    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec3::<0, 1, 2>(),
        vec3!(1i8, 2i8, 3i8)
    );
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec3::<1, 0, 2>(),
        vec3!(2i8, 1i8, 3i8)
    );
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec3::<2, 1, 0>(),
        vec3!(3i8, 2i8, 1i8)
    );

    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec3::<0, 1, 2>(),
        vec3!(1i8, 2i8, 3i8)
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec3::<1, 0, 2>(),
        vec3!(2i8, 1i8, 3i8)
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec3::<2, 1, 0>(),
        vec3!(3i8, 2i8, 1i8)
    );

    assert_eq!(
        vec2!(1i8, 2i8).get_const_vec4::<0, 1, 1, 0>(),
        vec4!(1i8, 2i8, 2i8, 1i8)
    );
    assert_eq!(
        vec2!(1i8, 2i8).get_const_vec4::<1, 0, 1, 0>(),
        vec4!(2i8, 1i8, 2i8, 1i8)
    );
    assert_eq!(
        vec2!(1i8, 2i8).get_const_vec4::<1, 1, 0, 0>(),
        vec4!(2i8, 2i8, 1i8, 1i8)
    );

    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec4::<0, 1, 2, 0>(),
        vec4!(1i8, 2i8, 3i8, 1i8)
    );
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec4::<1, 0, 2, 0>(),
        vec4!(2i8, 1i8, 3i8, 1i8)
    );
    assert_eq!(
        vec3!(1i8, 2i8, 3i8).get_const_vec4::<2, 1, 0, 0>(),
        vec4!(3i8, 2i8, 1i8, 1i8)
    );

    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec4::<0, 1, 2, 3>(),
        vec4!(1i8, 2i8, 3i8, 4i8)
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec4::<1, 0, 2, 3>(),
        vec4!(2i8, 1i8, 3i8, 4i8)
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec4::<2, 1, 0, 3>(),
        vec4!(3i8, 2i8, 1i8, 4i8)
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8).get_const_vec4::<3, 1, 2, 0>(),
        vec4!(4i8, 2i8, 3i8, 1i8)
    );

    assert_eq!(vec2!(1i8, 2i8)[0], 1i8);
    assert_eq!(vec2!(1i8, 2i8)[1], 2i8);

    assert_eq!(vec3!(1i8, 2i8, 3i8)[0], 1i8);
    assert_eq!(vec3!(1i8, 2i8, 3i8)[1], 2i8);
    assert_eq!(vec3!(1i8, 2i8, 3i8)[2], 3i8);

    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8)[0], 1i8);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8)[1], 2i8);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8)[2], 3i8);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8)[3], 4i8);

    assert_panic!(vec2!(1i8, 2i8)[2]);
    assert_panic!(vec3!(1i8, 2i8, 3i8)[3]);
    assert_panic!(vec4!(1i8, 2i8, 3i8, 4i8)[4]);

    assert_eq!(&mut vec2!(1i8, 2i8)[0], &mut 1i8);
    assert_eq!(&mut vec2!(1i8, 2i8)[1], &mut 2i8);

    assert_eq!(&mut vec3!(1i8, 2i8, 3i8)[0], &mut 1i8);
    assert_eq!(&mut vec3!(1i8, 2i8, 3i8)[1], &mut 2i8);
    assert_eq!(&mut vec3!(1i8, 2i8, 3i8)[2], &mut 3i8);

    assert_eq!(&mut vec4!(1i8, 2i8, 3i8, 4i8)[0], &mut 1i8);
    assert_eq!(&mut vec4!(1i8, 2i8, 3i8, 4i8)[1], &mut 2i8);
    assert_eq!(&mut vec4!(1i8, 2i8, 3i8, 4i8)[2], &mut 3i8);
    assert_eq!(&mut vec4!(1i8, 2i8, 3i8, 4i8)[3], &mut 4i8);

    assert_panic!(&mut vec2!(1i8, 2i8)[2]);
    assert_panic!(&mut vec3!(1i8, 2i8, 3i8)[3]);
    assert_panic!(&mut vec4!(1i8, 2i8, 3i8, 4i8)[4]);

    assert_eq!(vec2!(1i8, 2i8) == vec2!(1i8, 2i8), true);
    assert_eq!(vec2!(1i8, 2i8) == vec2!(2i8, 1i8), false);
    assert_eq!(vec2!(1i8, 2i8) == vec2!(2i8, 2i8), false);

    assert_eq!(vec3!(1i8, 2i8, 3i8) == vec3!(1i8, 2i8, 3i8), true);
    assert_eq!(vec3!(1i8, 2i8, 3i8) == vec3!(4i8, 3i8, 2i8), false);
    assert_eq!(vec3!(1i8, 2i8, 3i8) == vec3!(2i8, 2i8, 3i8), false);

    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8) == vec4!(1i8, 2i8, 3i8, 4i8), true);
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8) == vec4!(4i8, 3i8, 2i8, 1i8),
        false
    );
    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8) == vec4!(2i8, 2i8, 2i8, 4i8),
        false
    );

    assert_eq!(vec2!(1i8, 2i8) != vec2!(1i8, 2i8), false);
    assert_eq!(vec2!(1i8, 2i8) != vec2!(2i8, 1i8), true);
    assert_eq!(vec2!(1i8, 2i8) != vec2!(2i8, 2i8), true);

    assert_eq!(vec3!(1i8, 2i8, 3i8) != vec3!(1i8, 2i8, 3i8), false);
    assert_eq!(vec3!(1i8, 2i8, 3i8) != vec3!(4i8, 3i8, 2i8), true);
    assert_eq!(vec3!(1i8, 2i8, 3i8) != vec3!(2i8, 2i8, 3i8), true);

    assert_eq!(
        vec4!(1i8, 2i8, 3i8, 4i8) != vec4!(1i8, 2i8, 3i8, 4i8),
        false
    );
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8) != vec4!(4i8, 3i8, 2i8, 1i8), true);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8) != vec4!(2i8, 2i8, 2i8, 4i8), true);

    assert_eq!(vec2!(1i8, 2i8).to_string(), "(1, 2)");
    assert_eq!(vec3!(1i8, 2i8, 3i8).to_string(), "(1, 2, 3)");
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2!(1i8, 2i8)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3!(1i8, 2i8, 3i8)), "(1, 2, 3)");
    assert_eq!(format!("{:?}", vec4!(1i8, 2i8, 3i8, 4i8)), "(1, 2, 3, 4)");

    assert_eq!(vec2!(1i8, 2i8).x, 1i8);
    assert_eq!(vec2!(1i8, 2i8).y, 2i8);

    assert_eq!(vec3!(1i8, 2i8, 3i8).x, 1i8);
    assert_eq!(vec3!(1i8, 2i8, 3i8).y, 2i8);
    assert_eq!(vec3!(1i8, 2i8, 3i8).z, 3i8);

    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).x, 1i8);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).y, 2i8);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).z, 3i8);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).w, 4i8);

    assert_eq!(&mut vec2!(1i8, 2i8).x, &mut 1i8);
    assert_eq!(&mut vec2!(1i8, 2i8).y, &mut 2i8);

    assert_eq!(&mut vec3!(1i8, 2i8, 3i8).x, &mut 1i8);
    assert_eq!(&mut vec3!(1i8, 2i8, 3i8).y, &mut 2i8);
    assert_eq!(&mut vec3!(1i8, 2i8, 3i8).z, &mut 3i8);

    assert_eq!(&mut vec4!(1i8, 2i8, 3i8, 4i8).x, &mut 1i8);
    assert_eq!(&mut vec4!(1i8, 2i8, 3i8, 4i8).y, &mut 2i8);
    assert_eq!(&mut vec4!(1i8, 2i8, 3i8, 4i8).z, &mut 3i8);
    assert_eq!(&mut vec4!(1i8, 2i8, 3i8, 4i8).w, &mut 4i8);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2!(1i8, 2i8).xy(), vec2!(1i8, 2i8));
        assert_eq!(vec2!(1i8, 2i8).yx(), vec2!(2i8, 1i8));
        assert_eq!(vec2!(1i8, 2i8).yy(), vec2!(2i8, 2i8));

        assert_eq!(vec3!(1i8, 2i8, 3i8).xy(), vec2!(1i8, 2i8));
        assert_eq!(vec3!(1i8, 2i8, 3i8).xz(), vec2!(1i8, 3i8));
        assert_eq!(vec3!(1i8, 2i8, 3i8).zy(), vec2!(3i8, 2i8));

        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).xy(), vec2!(1i8, 2i8));
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).yw(), vec2!(2i8, 4i8));
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).wy(), vec2!(4i8, 2i8));

        assert_eq!(vec2!(1i8, 2i8).xyy(), vec3!(1i8, 2i8, 2i8));
        assert_eq!(vec2!(1i8, 2i8).yxy(), vec3!(2i8, 1i8, 2i8));

        assert_eq!(vec3!(1i8, 2i8, 3i8).xyz(), vec3!(1i8, 2i8, 3i8));
        assert_eq!(vec3!(1i8, 2i8, 3i8).yxz(), vec3!(2i8, 1i8, 3i8));
        assert_eq!(vec3!(1i8, 2i8, 3i8).zyx(), vec3!(3i8, 2i8, 1i8));

        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).xyz(), vec3!(1i8, 2i8, 3i8));
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).yxz(), vec3!(2i8, 1i8, 3i8));
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).zyx(), vec3!(3i8, 2i8, 1i8));

        assert_eq!(vec2!(1i8, 2i8).xyyx(), vec4!(1i8, 2i8, 2i8, 1i8));
        assert_eq!(vec2!(1i8, 2i8).yxyx(), vec4!(2i8, 1i8, 2i8, 1i8));
        assert_eq!(vec2!(1i8, 2i8).yyxx(), vec4!(2i8, 2i8, 1i8, 1i8));

        assert_eq!(vec3!(1i8, 2i8, 3i8).xyzx(), vec4!(1i8, 2i8, 3i8, 1i8));
        assert_eq!(vec3!(1i8, 2i8, 3i8).yxzx(), vec4!(2i8, 1i8, 3i8, 1i8));
        assert_eq!(vec3!(1i8, 2i8, 3i8).zyxx(), vec4!(3i8, 2i8, 1i8, 1i8));

        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).xyzw(), vec4!(1i8, 2i8, 3i8, 4i8));
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).yxzw(), vec4!(2i8, 1i8, 3i8, 4i8));
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).zyxw(), vec4!(3i8, 2i8, 1i8, 4i8));
        assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).wyzx(), vec4!(4i8, 2i8, 3i8, 1i8));
    }
}

#[test]
fn test_nonsimd_primitive_fns() {
    assert_eq!(size_of::<Vec2S<i8>>(), size_of::<i8>() * 2);
    assert_eq!(size_of::<Vec3S<i8>>(), size_of::<i8>() * 3);
    assert_eq!(size_of::<Vec4S<i8>>(), size_of::<i8>() * 4);

    assert_eq!(align_of::<Vec2S<i8>>(), align_of::<i8>());
    assert_eq!(align_of::<Vec3S<i8>>(), align_of::<i8>());
    assert_eq!(align_of::<Vec4S<i8>>(), align_of::<i8>());

    assert_eq!(Vec2S::from_array([1i8, 2i8]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3S::from_array([1i8, 2i8, 3i8]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4S::from_array([1i8, 2i8, 3i8, 4i8]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(Vec2S::from_fn(|i| [1i8, 2i8][i]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3S::from_fn(|i| [1i8, 2i8, 3i8][i]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1i8, 2i8, 3i8, 4i8][i]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(Vec2S::const_from_array([1i8, 2i8]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3S::const_from_array([1i8, 2i8, 3i8]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4S::const_from_array([1i8, 2i8, 3i8, 4i8]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2s!(1i8, 2i8).as_array(), [1i8, 2i8]);
    assert_eq!(vec2s!(vec2s!(1i8, 2i8)).as_array(), [1i8, 2i8]);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).as_array(), [1i8, 2i8, 3i8]);
    assert_eq!(vec3s!(1i8, vec2s!(2i8, 3i8)).as_array(), [1i8, 2i8, 3i8]);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).as_array(), [1i8, 2i8, 3i8, 4i8]);
    assert_eq!(
        vec4s!(1i8, vec2s!(2i8, 3i8), 4i8).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2s!(1i8).as_array(), [1i8; 2]);
    assert_eq!(vec3s!(1i8).as_array(), [1i8; 3]);
    assert_eq!(vec4s!(1i8).as_array(), [1i8; 4]);

    assert_eq!(vec2s!(1i8, 2i8).as_array_ref(), &[1i8, 2i8]);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).as_array_ref(), &[1i8, 2i8, 3i8]);
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).as_array_ref(),
        &[1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2s!(1i8, 2i8).as_mut_array(), &mut [1i8, 2i8]);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).as_mut_array(), &mut [1i8, 2i8, 3i8]);
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).as_mut_array(),
        &mut [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2s!(1i8, 2i8).as_simd(), vec2!(1i8, 2i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).as_simd(), vec3!(1i8, 2i8, 3i8));
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).as_simd(),
        vec4!(1i8, 2i8, 3i8, 4i8)
    );

    assert_eq!(vec2s!(1i8, 2i8).as_nonsimd(), vec2s!(1i8, 2i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).as_nonsimd(), vec3s!(1i8, 2i8, 3i8));
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).as_nonsimd(),
        vec4s!(1i8, 2i8, 3i8, 4i8)
    );

    assert_eq!(vec2s!(1i8, 2i8).len(), 2);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).len(), 3);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).len(), 4);

    assert_eq!(vec2s!(1i8, 2i8).is_simd(), false);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).is_simd(), false);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).is_simd(), false);

    assert_eq!(vec2s!(1i8, 2i8).get(0), Some(1i8));
    assert_eq!(vec2s!(1i8, 2i8).get(1), Some(2i8));
    assert_eq!(vec2s!(1i8, 2i8).get(2), None);
    assert_eq!(vec2s!(1i8, 2i8).get(3), None);

    assert_eq!(vec3s!(1i8, 2i8, 3i8).get(0), Some(1i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).get(1), Some(2i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).get(2), Some(3i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).get(3), None);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).get(4), None);

    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get(0), Some(1i8));
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get(1), Some(2i8));
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get(2), Some(3i8));
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get(3), Some(4i8));
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get(4), None);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get(5), None);

    assert_eq!(vec2s!(1i8, 2i8).get_mut(0), Some(&mut 1i8));
    assert_eq!(vec2s!(1i8, 2i8).get_mut(1), Some(&mut 2i8));
    assert_eq!(vec2s!(1i8, 2i8).get_mut(2), None);
    assert_eq!(vec2s!(1i8, 2i8).get_mut(3), None);

    assert_eq!(vec3s!(1i8, 2i8, 3i8).get_mut(0), Some(&mut 1i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).get_mut(1), Some(&mut 2i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).get_mut(2), Some(&mut 3i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).get_mut(3), None);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).get_mut(4), None);

    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_mut(0), Some(&mut 1i8));
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_mut(1), Some(&mut 2i8));
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_mut(2), Some(&mut 3i8));
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_mut(3), Some(&mut 4i8));
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_mut(4), None);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_mut(5), None);

    unsafe {
        assert_eq!(vec2s!(1i8, 2i8).get_unchecked(0), 1i8);
        assert_eq!(vec2s!(1i8, 2i8).get_unchecked(1), 2i8);

        assert_eq!(vec3s!(1i8, 2i8, 3i8).get_unchecked(0), 1i8);
        assert_eq!(vec3s!(1i8, 2i8, 3i8).get_unchecked(1), 2i8);
        assert_eq!(vec3s!(1i8, 2i8, 3i8).get_unchecked(2), 3i8);

        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_unchecked(0), 1i8);
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_unchecked(1), 2i8);
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_unchecked(2), 3i8);
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_unchecked(3), 4i8);

        assert_eq!(vec2s!(1i8, 2i8).get_unchecked_mut(0), &mut 1i8);
        assert_eq!(vec2s!(1i8, 2i8).get_unchecked_mut(1), &mut 2i8);

        assert_eq!(vec3s!(1i8, 2i8, 3i8).get_unchecked_mut(0), &mut 1i8);
        assert_eq!(vec3s!(1i8, 2i8, 3i8).get_unchecked_mut(1), &mut 2i8);
        assert_eq!(vec3s!(1i8, 2i8, 3i8).get_unchecked_mut(2), &mut 3i8);

        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_unchecked_mut(0), &mut 1i8);
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_unchecked_mut(1), &mut 2i8);
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_unchecked_mut(2), &mut 3i8);
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).get_unchecked_mut(3), &mut 4i8);
    }

    assert_eq!(vec2s!(1i8, 2i8).iter().collect::<Vec<i8>>(), vec![1i8, 2i8]);
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).iter().collect::<Vec<i8>>(),
        vec![1i8, 2i8, 3i8]
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).iter().collect::<Vec<i8>>(),
        vec![1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(
        vec2s!(1i8, 2i8).iter_mut().collect::<Vec<&mut i8>>(),
        vec![&mut 1i8, &mut 2i8]
    );
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).iter_mut().collect::<Vec<&mut i8>>(),
        vec![&mut 1i8, &mut 2i8, &mut 3i8]
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8)
            .iter_mut()
            .collect::<Vec<&mut i8>>(),
        vec![&mut 1i8, &mut 2i8, &mut 3i8, &mut 4i8]
    );

    assert_eq!(vec2s!(1i8, 2i8).map(|x| x == 2i8), vec2s!(false, true));
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).map(|x| x == 2i8),
        vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).map(|x| x == 2i8),
        vec4s!(false, true, false, false)
    );

    assert_eq!(vec2s!(1i8, 2i8).reverse(), vec2s!(2i8, 1i8));
    assert_eq!(vec3s!(1i8, 2i8, 3i8).reverse(), vec3s!(3i8, 2i8, 1i8));
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).reverse(),
        vec4s!(4i8, 3i8, 2i8, 1i8)
    );

    assert_eq!(vec2s!(1i8, 2i8).get_const_vec2::<0, 1>(), vec2s!(1i8, 2i8));
    assert_eq!(vec2s!(1i8, 2i8).get_const_vec2::<1, 0>(), vec2s!(2i8, 1i8));
    assert_eq!(vec2s!(1i8, 2i8).get_const_vec2::<1, 1>(), vec2s!(2i8, 2i8));

    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec2::<0, 1>(),
        vec2s!(1i8, 2i8)
    );
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec2::<0, 2>(),
        vec2s!(1i8, 3i8)
    );
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec2::<2, 1>(),
        vec2s!(3i8, 2i8)
    );

    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec2::<0, 1>(),
        vec2s!(1i8, 2i8)
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec2::<1, 3>(),
        vec2s!(2i8, 4i8)
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec2::<3, 1>(),
        vec2s!(4i8, 2i8)
    );

    assert_eq!(
        vec2s!(1i8, 2i8).get_const_vec3::<0, 1, 1>(),
        vec3s!(1i8, 2i8, 2i8)
    );
    assert_eq!(
        vec2s!(1i8, 2i8).get_const_vec3::<1, 0, 1>(),
        vec3s!(2i8, 1i8, 2i8)
    );

    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec3::<0, 1, 2>(),
        vec3s!(1i8, 2i8, 3i8)
    );
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec3::<1, 0, 2>(),
        vec3s!(2i8, 1i8, 3i8)
    );
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec3::<2, 1, 0>(),
        vec3s!(3i8, 2i8, 1i8)
    );

    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec3::<0, 1, 2>(),
        vec3s!(1i8, 2i8, 3i8)
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec3::<1, 0, 2>(),
        vec3s!(2i8, 1i8, 3i8)
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec3::<2, 1, 0>(),
        vec3s!(3i8, 2i8, 1i8)
    );

    assert_eq!(
        vec2s!(1i8, 2i8).get_const_vec4::<0, 1, 1, 0>(),
        vec4s!(1i8, 2i8, 2i8, 1i8)
    );
    assert_eq!(
        vec2s!(1i8, 2i8).get_const_vec4::<1, 0, 1, 0>(),
        vec4s!(2i8, 1i8, 2i8, 1i8)
    );
    assert_eq!(
        vec2s!(1i8, 2i8).get_const_vec4::<1, 1, 0, 0>(),
        vec4s!(2i8, 2i8, 1i8, 1i8)
    );

    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec4::<0, 1, 2, 0>(),
        vec4s!(1i8, 2i8, 3i8, 1i8)
    );
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec4::<1, 0, 2, 0>(),
        vec4s!(2i8, 1i8, 3i8, 1i8)
    );
    assert_eq!(
        vec3s!(1i8, 2i8, 3i8).get_const_vec4::<2, 1, 0, 0>(),
        vec4s!(3i8, 2i8, 1i8, 1i8)
    );

    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec4::<0, 1, 2, 3>(),
        vec4s!(1i8, 2i8, 3i8, 4i8)
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec4::<1, 0, 2, 3>(),
        vec4s!(2i8, 1i8, 3i8, 4i8)
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec4::<2, 1, 0, 3>(),
        vec4s!(3i8, 2i8, 1i8, 4i8)
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8).get_const_vec4::<3, 1, 2, 0>(),
        vec4s!(4i8, 2i8, 3i8, 1i8)
    );

    assert_eq!(vec2s!(1i8, 2i8)[0], 1i8);
    assert_eq!(vec2s!(1i8, 2i8)[1], 2i8);

    assert_eq!(vec3s!(1i8, 2i8, 3i8)[0], 1i8);
    assert_eq!(vec3s!(1i8, 2i8, 3i8)[1], 2i8);
    assert_eq!(vec3s!(1i8, 2i8, 3i8)[2], 3i8);

    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8)[0], 1i8);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8)[1], 2i8);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8)[2], 3i8);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8)[3], 4i8);

    assert_panic!(vec2!(1i8, 2i8)[2]);
    assert_panic!(vec3!(1i8, 2i8, 3i8)[3]);
    assert_panic!(vec4!(1i8, 2i8, 3i8, 4i8)[4]);

    assert_eq!(&mut vec2s!(1i8, 2i8)[0], &mut 1i8);
    assert_eq!(&mut vec2s!(1i8, 2i8)[1], &mut 2i8);

    assert_eq!(&mut vec3s!(1i8, 2i8, 3i8)[0], &mut 1i8);
    assert_eq!(&mut vec3s!(1i8, 2i8, 3i8)[1], &mut 2i8);
    assert_eq!(&mut vec3s!(1i8, 2i8, 3i8)[2], &mut 3i8);

    assert_eq!(&mut vec4s!(1i8, 2i8, 3i8, 4i8)[0], &mut 1i8);
    assert_eq!(&mut vec4s!(1i8, 2i8, 3i8, 4i8)[1], &mut 2i8);
    assert_eq!(&mut vec4s!(1i8, 2i8, 3i8, 4i8)[2], &mut 3i8);
    assert_eq!(&mut vec4s!(1i8, 2i8, 3i8, 4i8)[3], &mut 4i8);

    assert_panic!(&mut vec2!(1i8, 2i8)[2]);
    assert_panic!(&mut vec3!(1i8, 2i8, 3i8)[3]);
    assert_panic!(&mut vec4!(1i8, 2i8, 3i8, 4i8)[4]);

    assert_eq!(vec2s!(1i8, 2i8) == vec2s!(1i8, 2i8), true);
    assert_eq!(vec2s!(1i8, 2i8) == vec2s!(2i8, 1i8), false);
    assert_eq!(vec2s!(1i8, 2i8) == vec2s!(2i8, 2i8), false);

    assert_eq!(vec3s!(1i8, 2i8, 3i8) == vec3s!(1i8, 2i8, 3i8), true);
    assert_eq!(vec3s!(1i8, 2i8, 3i8) == vec3s!(4i8, 3i8, 2i8), false);
    assert_eq!(vec3s!(1i8, 2i8, 3i8) == vec3s!(2i8, 2i8, 3i8), false);

    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8) == vec4s!(1i8, 2i8, 3i8, 4i8),
        true
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8) == vec4s!(4i8, 3i8, 2i8, 1i8),
        false
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8) == vec4s!(2i8, 2i8, 2i8, 4i8),
        false
    );

    assert_eq!(vec2s!(1i8, 2i8) != vec2s!(1i8, 2i8), false);
    assert_eq!(vec2s!(1i8, 2i8) != vec2s!(2i8, 1i8), true);
    assert_eq!(vec2s!(1i8, 2i8) != vec2s!(2i8, 2i8), true);

    assert_eq!(vec3s!(1i8, 2i8, 3i8) != vec3s!(1i8, 2i8, 3i8), false);
    assert_eq!(vec3s!(1i8, 2i8, 3i8) != vec3s!(4i8, 3i8, 2i8), true);
    assert_eq!(vec3s!(1i8, 2i8, 3i8) != vec3s!(2i8, 2i8, 3i8), true);

    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8) != vec4s!(1i8, 2i8, 3i8, 4i8),
        false
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8) != vec4s!(4i8, 3i8, 2i8, 1i8),
        true
    );
    assert_eq!(
        vec4s!(1i8, 2i8, 3i8, 4i8) != vec4s!(2i8, 2i8, 2i8, 4i8),
        true
    );

    assert_eq!(vec2s!(1i8, 2i8).to_string(), "(1, 2)");
    assert_eq!(vec3s!(1i8, 2i8, 3i8).to_string(), "(1, 2, 3)");
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2s!(1i8, 2i8)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3s!(1i8, 2i8, 3i8)), "(1, 2, 3)");
    assert_eq!(format!("{:?}", vec4s!(1i8, 2i8, 3i8, 4i8)), "(1, 2, 3, 4)");

    assert_eq!(vec2s!(1i8, 2i8).x, 1i8);
    assert_eq!(vec2s!(1i8, 2i8).y, 2i8);

    assert_eq!(vec3s!(1i8, 2i8, 3i8).x, 1i8);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).y, 2i8);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).z, 3i8);

    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).x, 1i8);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).y, 2i8);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).z, 3i8);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).w, 4i8);

    assert_eq!(&mut vec2s!(1i8, 2i8).x, &mut 1i8);
    assert_eq!(&mut vec2s!(1i8, 2i8).y, &mut 2i8);

    assert_eq!(&mut vec3s!(1i8, 2i8, 3i8).x, &mut 1i8);
    assert_eq!(&mut vec3s!(1i8, 2i8, 3i8).y, &mut 2i8);
    assert_eq!(&mut vec3s!(1i8, 2i8, 3i8).z, &mut 3i8);

    assert_eq!(&mut vec4s!(1i8, 2i8, 3i8, 4i8).x, &mut 1i8);
    assert_eq!(&mut vec4s!(1i8, 2i8, 3i8, 4i8).y, &mut 2i8);
    assert_eq!(&mut vec4s!(1i8, 2i8, 3i8, 4i8).z, &mut 3i8);
    assert_eq!(&mut vec4s!(1i8, 2i8, 3i8, 4i8).w, &mut 4i8);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2s!(1i8, 2i8).xy(), vec2s!(1i8, 2i8));
        assert_eq!(vec2s!(1i8, 2i8).yx(), vec2s!(2i8, 1i8));
        assert_eq!(vec2s!(1i8, 2i8).yy(), vec2s!(2i8, 2i8));

        assert_eq!(vec3s!(1i8, 2i8, 3i8).xy(), vec2s!(1i8, 2i8));
        assert_eq!(vec3s!(1i8, 2i8, 3i8).xz(), vec2s!(1i8, 3i8));
        assert_eq!(vec3s!(1i8, 2i8, 3i8).zy(), vec2s!(3i8, 2i8));

        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).xy(), vec2s!(1i8, 2i8));
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).yw(), vec2s!(2i8, 4i8));
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).wy(), vec2s!(4i8, 2i8));

        assert_eq!(vec2s!(1i8, 2i8).xyy(), vec3s!(1i8, 2i8, 2i8));
        assert_eq!(vec2s!(1i8, 2i8).yxy(), vec3s!(2i8, 1i8, 2i8));

        assert_eq!(vec3s!(1i8, 2i8, 3i8).xyz(), vec3s!(1i8, 2i8, 3i8));
        assert_eq!(vec3s!(1i8, 2i8, 3i8).yxz(), vec3s!(2i8, 1i8, 3i8));
        assert_eq!(vec3s!(1i8, 2i8, 3i8).zyx(), vec3s!(3i8, 2i8, 1i8));

        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).xyz(), vec3s!(1i8, 2i8, 3i8));
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).yxz(), vec3s!(2i8, 1i8, 3i8));
        assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).zyx(), vec3s!(3i8, 2i8, 1i8));

        assert_eq!(vec2s!(1i8, 2i8).xyyx(), vec4s!(1i8, 2i8, 2i8, 1i8));
        assert_eq!(vec2s!(1i8, 2i8).yxyx(), vec4s!(2i8, 1i8, 2i8, 1i8));
        assert_eq!(vec2s!(1i8, 2i8).yyxx(), vec4s!(2i8, 2i8, 1i8, 1i8));

        assert_eq!(vec3s!(1i8, 2i8, 3i8).xyzx(), vec4s!(1i8, 2i8, 3i8, 1i8));
        assert_eq!(vec3s!(1i8, 2i8, 3i8).yxzx(), vec4s!(2i8, 1i8, 3i8, 1i8));
        assert_eq!(vec3s!(1i8, 2i8, 3i8).zyxx(), vec4s!(3i8, 2i8, 1i8, 1i8));

        assert_eq!(
            vec4s!(1i8, 2i8, 3i8, 4i8).xyzw(),
            vec4s!(1i8, 2i8, 3i8, 4i8)
        );
        assert_eq!(
            vec4s!(1i8, 2i8, 3i8, 4i8).yxzw(),
            vec4s!(2i8, 1i8, 3i8, 4i8)
        );
        assert_eq!(
            vec4s!(1i8, 2i8, 3i8, 4i8).zyxw(),
            vec4s!(3i8, 2i8, 1i8, 4i8)
        );
        assert_eq!(
            vec4s!(1i8, 2i8, 3i8, 4i8).wyzx(),
            vec4s!(4i8, 2i8, 3i8, 1i8)
        );
    }
}
use crate::assert_debug_panic;

#[test]
fn test_simd_int_fns() {
    assert_eq!(Vec2::ZERO, vec2!(0i8, 0i8));
    assert_eq!(Vec3::ZERO, vec3!(0i8, 0i8, 0i8));
    assert_eq!(Vec4::ZERO, vec4!(0i8, 0i8, 0i8, 0i8));

    assert_eq!(Vec2::ONE, vec2!(1i8, 1i8));
    assert_eq!(Vec3::ONE, vec3!(1i8, 1i8, 1i8));
    assert_eq!(Vec4::ONE, vec4!(1i8, 1i8, 1i8, 1i8));

    assert_eq!(Vec2::X, vec2!(1i8, 0i8));
    assert_eq!(Vec3::Y, vec3!(0i8, 1i8, 0i8));
    assert_eq!(Vec4::Z, vec4!(0i8, 0i8, 1i8, 0i8));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2::<i8>::RIGHT, Vec2::<i8>::X);
        assert_eq!(Vec3::<i8>::RIGHT, Vec3::<i8>::X);
        assert_eq!(Vec4::<i8>::RIGHT, Vec4::<i8>::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2::<i8>::LEFT, Vec2::<i8>::X);
        assert_eq!(Vec3::<i8>::LEFT, Vec3::<i8>::X);
        assert_eq!(Vec4::<i8>::LEFT, Vec4::<i8>::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3::<i8>::BACKWARDS, Vec3::<i8>::Z);
        assert_eq!(Vec4::<i8>::BACKWARDS, Vec4::<i8>::Z);
    }

    assert_eq!(!vec2!(5i8, 7i8), vec2!(!5i8, !7i8));
    assert_eq!(!vec3!(5i8, 7i8, 9i8), vec3!(!5i8, !7i8, !9i8));
    assert_eq!(!vec4!(5i8, 7i8, 9i8, 11i8), vec4!(!5i8, !7i8, !9i8, !11i8));

    assert_eq!(
        vec2!(5i8, 7i8) + vec2!(9i8, 11i8),
        vec2!(5i8 + 9i8, 7i8 + 11i8)
    );
    assert_eq!(
        vec3!(5i8, 7i8, 9i8) + vec3!(11i8, 13i8, 15i8),
        vec3!(5i8 + 11i8, 7i8 + 13i8, 9i8 + 15i8)
    );
    assert_eq!(
        vec4!(5i8, 7i8, 9i8, 11i8) + vec4!(13i8, 15i8, 17i8, 19i8),
        vec4!(5i8 + 13i8, 7i8 + 15i8, 9i8 + 17i8, 11i8 + 19i8)
    );

    assert_eq!(
        vec2!(9i8, 11i8) - vec2!(5i8, 7i8),
        vec2!(9i8 - 5i8, 11i8 - 7i8)
    );
    assert_eq!(
        vec3!(9i8, 11i8, 13i8) - vec3!(5i8, 7i8, 9i8),
        vec3!(9i8 - 5i8, 11i8 - 7i8, 13i8 - 9i8)
    );
    assert_eq!(
        vec4!(9i8, 11i8, 13i8, 15i8) - vec4!(5i8, 7i8, 9i8, 11i8),
        vec4!(9i8 - 5i8, 11i8 - 7i8, 13i8 - 9i8, 15i8 - 11i8)
    );

    assert_eq!(
        vec2!(2i8, 4i8) * vec2!(3i8, 5i8),
        vec2!(2i8 * 3i8, 4i8 * 5i8)
    );
    assert_eq!(
        vec3!(2i8, 4i8, 6i8) * vec3!(3i8, 5i8, 7i8),
        vec3!(2i8 * 3i8, 4i8 * 5i8, 6i8 * 7i8)
    );
    assert_eq!(
        vec4!(2i8, 4i8, 6i8, 8i8) * vec4!(3i8, 5i8, 7i8, 9i8),
        vec4!(2i8 * 3i8, 4i8 * 5i8, 6i8 * 7i8, 8i8 * 9i8)
    );

    assert_eq!(
        vec2!(21i8, 23i8) / vec2!(4i8, 50i8),
        vec2!(21i8 / 4i8, 23i8 / 50i8)
    );
    assert_eq!(
        vec3!(21i8, 23i8, 25i8) / vec3!(4i8, 50i8, 3i8),
        vec3!(21i8 / 4i8, 23i8 / 50i8, 25i8 / 3i8)
    );
    assert_eq!(
        vec4!(21i8, 23i8, 25i8, 27i8) / vec4!(4i8, 50i8, 3i8, 10i8),
        vec4!(21i8 / 4i8, 23i8 / 50i8, 25i8 / 3i8, 27i8 / 10i8)
    );

    assert_eq!(
        vec2!(16i8, 19i8) / vec2!(5i8, 5i8),
        vec2!(16i8 / 5i8, 19i8 / 5i8)
    );
    assert_eq!(
        vec3!(16i8, 19i8, 22i8) / vec3!(5i8, 5i8, 5i8),
        vec3!(16i8 / 5i8, 19i8 / 5i8, 22i8 / 5i8)
    );
    assert_eq!(
        vec4!(16i8, 19i8, 22i8, 25i8) / vec4!(5i8, 5i8, 5i8, 5i8),
        vec4!(16i8 / 5i8, 19i8 / 5i8, 22i8 / 5i8, 25i8 / 5i8)
    );

    assert_eq!(
        vec2!(21i8, 23i8) % vec2!(4i8, 50i8),
        vec2!(21i8 % 4i8, 23i8 % 50i8)
    );
    assert_eq!(
        vec3!(21i8, 23i8, 25i8) % vec3!(4i8, 50i8, 3i8),
        vec3!(21i8 % 4i8, 23i8 % 50i8, 25i8 % 3i8)
    );
    assert_eq!(
        vec4!(21i8, 23i8, 25i8, 27i8) % vec4!(4i8, 50i8, 3i8, 10i8),
        vec4!(21i8 % 4i8, 23i8 % 50i8, 25i8 % 3i8, 27i8 % 10i8)
    );

    assert_eq!(
        vec2!(21i8, 23i8) & vec2!(4i8, 50i8),
        vec2!(21i8 & 4i8, 23i8 & 50i8)
    );
    assert_eq!(
        vec3!(21i8, 23i8, 25i8) & vec3!(4i8, 50i8, 3i8),
        vec3!(21i8 & 4i8, 23i8 & 50i8, 25i8 & 3i8)
    );
    assert_eq!(
        vec4!(21i8, 23i8, 25i8, 27i8) & vec4!(4i8, 50i8, 3i8, 10i8),
        vec4!(21i8 & 4i8, 23i8 & 50i8, 25i8 & 3i8, 27i8 & 10i8)
    );

    assert_eq!(
        vec2!(21i8, 23i8) | vec2!(4i8, 50i8),
        vec2!(21i8 | 4i8, 23i8 | 50i8)
    );
    assert_eq!(
        vec3!(21i8, 23i8, 25i8) | vec3!(4i8, 50i8, 3i8),
        vec3!(21i8 | 4i8, 23i8 | 50i8, 25i8 | 3i8)
    );
    assert_eq!(
        vec4!(21i8, 23i8, 25i8, 27i8) | vec4!(4i8, 50i8, 3i8, 10i8),
        vec4!(21i8 | 4i8, 23i8 | 50i8, 25i8 | 3i8, 27i8 | 10i8)
    );

    assert_eq!(
        vec2!(21i8, 23i8) ^ vec2!(4i8, 50i8),
        vec2!(21i8 ^ 4i8, 23i8 ^ 50i8)
    );
    assert_eq!(
        vec3!(21i8, 23i8, 25i8) ^ vec3!(4i8, 50i8, 3i8),
        vec3!(21i8 ^ 4i8, 23i8 ^ 50i8, 25i8 ^ 3i8)
    );
    assert_eq!(
        vec4!(21i8, 23i8, 25i8, 27i8) ^ vec4!(4i8, 50i8, 3i8, 10i8),
        vec4!(21i8 ^ 4i8, 23i8 ^ 50i8, 25i8 ^ 3i8, 27i8 ^ 10i8)
    );

    assert_debug_panic!(assert_eq!(
        vec2!(1i8, i8::MAX) + vec2!(1i8, 3i8),
        vec2!(2i8, i8::MAX + 3i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1i8, i8::MAX, 1i8) + vec3!(1i8, 3i8, 1i8),
        vec3!(2i8, i8::MAX + 3i8, 2i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1i8, i8::MAX, 1i8, 1i8) + vec4!(1i8, 3i8, 1i8, 1i8),
        vec4!(2i8, i8::MAX + 3i8, 2i8, 2i8)
    ));

    assert_debug_panic!(assert_eq!(
        vec2!(1i8, i8::MAX) + vec2!(1i8),
        vec2!(2i8, i8::MAX + 1i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1i8, i8::MAX, 1i8) + vec3!(1i8),
        vec3!(2i8, i8::MAX + 1i8, 2i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1i8, i8::MAX, 1i8, 1i8) + vec4!(1i8),
        vec4!(2i8, i8::MAX + 1i8, 2i8, 2i8)
    ));

    assert_debug_panic!(assert_eq!(
        vec2!(1i8, i8::MIN) - vec2!(1i8, 3i8),
        vec2!(0i8, i8::MIN - 3i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1i8, i8::MIN, 1i8) - vec3!(1i8, 3i8, 1i8),
        vec3!(0i8, i8::MIN - 3i8, 0i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1i8, i8::MIN, 1i8, 1i8) - vec4!(1i8, 3i8, 1i8, 1i8),
        vec4!(0i8, i8::MIN - 3i8, 0i8, 0i8)
    ));

    assert_debug_panic!(assert_eq!(
        vec2!(1i8, i8::MIN) - vec2!(1i8),
        vec2!(0i8, i8::MIN - 1i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1i8, i8::MIN, 1i8) - vec3!(1i8),
        vec3!(0i8, i8::MIN - 1i8, 0i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1i8, i8::MIN, 1i8, 1i8) - vec4!(1i8),
        vec4!(0i8, i8::MIN - 1i8, 0i8, 0i8)
    ));

    assert_debug_panic!(assert_eq!(
        vec2!(1i8, i8::MAX) * vec2!(1i8, 3i8),
        vec2!(1i8, i8::MAX * 3i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3!(1i8, i8::MAX, 1i8) * vec3!(1i8, 3i8, 1i8),
        vec3!(1i8, i8::MAX * 3i8, 1i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4!(1i8, i8::MAX, 1i8, 1i8) * vec4!(1i8, 3i8, 1i8, 1i8),
        vec4!(1i8, i8::MAX * 3i8, 1i8, 1i8)
    ));

    assert_panic!(vec2!(5i8) / vec2!(1i8, 0i8));
    assert_panic!(vec3!(5i8) / vec3!(1i8, 0i8, 1i8));
    assert_panic!(vec4!(5i8) / vec4!(1i8, 0i8, 1i8, 1i8));

    assert_panic!(vec2!(5i8) % vec2!(1i8, 0i8));
    assert_panic!(vec3!(5i8) % vec3!(1i8, 0i8, 1i8));
    assert_panic!(vec4!(5i8) % vec4!(1i8, 0i8, 1i8, 1i8));
}

#[test]
fn test_nonsimd_int_fns() {
    assert_eq!(Vec2S::ZERO, vec2s!(0i8, 0i8));
    assert_eq!(Vec3S::ZERO, vec3s!(0i8, 0i8, 0i8));
    assert_eq!(Vec4S::ZERO, vec4s!(0i8, 0i8, 0i8, 0i8));

    assert_eq!(Vec2S::ONE, vec2s!(1i8, 1i8));
    assert_eq!(Vec3S::ONE, vec3s!(1i8, 1i8, 1i8));
    assert_eq!(Vec4S::ONE, vec4s!(1i8, 1i8, 1i8, 1i8));

    assert_eq!(Vec2S::X, vec2s!(1i8, 0i8));
    assert_eq!(Vec3S::Y, vec3s!(0i8, 1i8, 0i8));
    assert_eq!(Vec4S::Z, vec4s!(0i8, 0i8, 1i8, 0i8));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2S::<i8>::RIGHT, Vec2S::<i8>::X);
        assert_eq!(Vec3S::<i8>::RIGHT, Vec3S::<i8>::X);
        assert_eq!(Vec4S::<i8>::RIGHT, Vec4S::<i8>::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2S::<i8>::LEFT, Vec2S::<i8>::X);
        assert_eq!(Vec3S::<i8>::LEFT, Vec3S::<i8>::X);
        assert_eq!(Vec4S::<i8>::LEFT, Vec4S::<i8>::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3S::<i8>::BACKWARDS, Vec3S::<i8>::Z);
        assert_eq!(Vec4S::<i8>::BACKWARDS, Vec4S::<i8>::Z);
    }

    assert_eq!(!vec2s!(5i8, 7i8), vec2s!(!5i8, !7i8));
    assert_eq!(!vec3s!(5i8, 7i8, 9i8), vec3s!(!5i8, !7i8, !9i8));
    assert_eq!(
        !vec4s!(5i8, 7i8, 9i8, 11i8),
        vec4s!(!5i8, !7i8, !9i8, !11i8)
    );

    assert_eq!(
        vec2s!(5i8, 7i8) + vec2s!(9i8, 11i8),
        vec2s!(5i8 + 9i8, 7i8 + 11i8)
    );
    assert_eq!(
        vec3s!(5i8, 7i8, 9i8) + vec3s!(11i8, 13i8, 15i8),
        vec3s!(5i8 + 11i8, 7i8 + 13i8, 9i8 + 15i8)
    );
    assert_eq!(
        vec4s!(5i8, 7i8, 9i8, 11i8) + vec4s!(13i8, 15i8, 17i8, 19i8),
        vec4s!(5i8 + 13i8, 7i8 + 15i8, 9i8 + 17i8, 11i8 + 19i8)
    );

    assert_eq!(
        vec2s!(9i8, 11i8) - vec2s!(5i8, 7i8),
        vec2s!(9i8 - 5i8, 11i8 - 7i8)
    );
    assert_eq!(
        vec3s!(9i8, 11i8, 13i8) - vec3s!(5i8, 7i8, 9i8),
        vec3s!(9i8 - 5i8, 11i8 - 7i8, 13i8 - 9i8)
    );
    assert_eq!(
        vec4s!(9i8, 11i8, 13i8, 15i8) - vec4s!(5i8, 7i8, 9i8, 11i8),
        vec4s!(9i8 - 5i8, 11i8 - 7i8, 13i8 - 9i8, 15i8 - 11i8)
    );

    assert_eq!(
        vec2s!(2i8, 4i8) * vec2s!(3i8, 5i8),
        vec2s!(2i8 * 3i8, 4i8 * 5i8)
    );
    assert_eq!(
        vec3s!(2i8, 4i8, 6i8) * vec3s!(3i8, 5i8, 7i8),
        vec3s!(2i8 * 3i8, 4i8 * 5i8, 6i8 * 7i8)
    );
    assert_eq!(
        vec4s!(2i8, 4i8, 6i8, 8i8) * vec4s!(3i8, 5i8, 7i8, 9i8),
        vec4s!(2i8 * 3i8, 4i8 * 5i8, 6i8 * 7i8, 8i8 * 9i8)
    );

    assert_eq!(
        vec2s!(21i8, 23i8) / vec2s!(4i8, 50i8),
        vec2s!(21i8 / 4i8, 23i8 / 50i8)
    );
    assert_eq!(
        vec3s!(21i8, 23i8, 25i8) / vec3s!(4i8, 50i8, 3i8),
        vec3s!(21i8 / 4i8, 23i8 / 50i8, 25i8 / 3i8)
    );
    assert_eq!(
        vec4s!(21i8, 23i8, 25i8, 27i8) / vec4s!(4i8, 50i8, 3i8, 10i8),
        vec4s!(21i8 / 4i8, 23i8 / 50i8, 25i8 / 3i8, 27i8 / 10i8)
    );

    assert_eq!(
        vec2s!(16i8, 19i8) / vec2s!(5i8, 5i8),
        vec2s!(16i8 / 5i8, 19i8 / 5i8)
    );
    assert_eq!(
        vec3s!(16i8, 19i8, 22i8) / vec3s!(5i8, 5i8, 5i8),
        vec3s!(16i8 / 5i8, 19i8 / 5i8, 22i8 / 5i8)
    );
    assert_eq!(
        vec4s!(16i8, 19i8, 22i8, 25i8) / vec4s!(5i8, 5i8, 5i8, 5i8),
        vec4s!(16i8 / 5i8, 19i8 / 5i8, 22i8 / 5i8, 25i8 / 5i8)
    );

    assert_eq!(
        vec2s!(21i8, 23i8) % vec2s!(4i8, 50i8),
        vec2s!(21i8 % 4i8, 23i8 % 50i8)
    );
    assert_eq!(
        vec3s!(21i8, 23i8, 25i8) % vec3s!(4i8, 50i8, 3i8),
        vec3s!(21i8 % 4i8, 23i8 % 50i8, 25i8 % 3i8)
    );
    assert_eq!(
        vec4s!(21i8, 23i8, 25i8, 27i8) % vec4s!(4i8, 50i8, 3i8, 10i8),
        vec4s!(21i8 % 4i8, 23i8 % 50i8, 25i8 % 3i8, 27i8 % 10i8)
    );

    assert_eq!(
        vec2s!(21i8, 23i8) & vec2s!(4i8, 50i8),
        vec2s!(21i8 & 4i8, 23i8 & 50i8)
    );
    assert_eq!(
        vec3s!(21i8, 23i8, 25i8) & vec3s!(4i8, 50i8, 3i8),
        vec3s!(21i8 & 4i8, 23i8 & 50i8, 25i8 & 3i8)
    );
    assert_eq!(
        vec4s!(21i8, 23i8, 25i8, 27i8) & vec4s!(4i8, 50i8, 3i8, 10i8),
        vec4s!(21i8 & 4i8, 23i8 & 50i8, 25i8 & 3i8, 27i8 & 10i8)
    );

    assert_eq!(
        vec2s!(21i8, 23i8) | vec2s!(4i8, 50i8),
        vec2s!(21i8 | 4i8, 23i8 | 50i8)
    );
    assert_eq!(
        vec3s!(21i8, 23i8, 25i8) | vec3s!(4i8, 50i8, 3i8),
        vec3s!(21i8 | 4i8, 23i8 | 50i8, 25i8 | 3i8)
    );
    assert_eq!(
        vec4s!(21i8, 23i8, 25i8, 27i8) | vec4s!(4i8, 50i8, 3i8, 10i8),
        vec4s!(21i8 | 4i8, 23i8 | 50i8, 25i8 | 3i8, 27i8 | 10i8)
    );

    assert_eq!(
        vec2s!(21i8, 23i8) ^ vec2s!(4i8, 50i8),
        vec2s!(21i8 ^ 4i8, 23i8 ^ 50i8)
    );
    assert_eq!(
        vec3s!(21i8, 23i8, 25i8) ^ vec3s!(4i8, 50i8, 3i8),
        vec3s!(21i8 ^ 4i8, 23i8 ^ 50i8, 25i8 ^ 3i8)
    );
    assert_eq!(
        vec4s!(21i8, 23i8, 25i8, 27i8) ^ vec4s!(4i8, 50i8, 3i8, 10i8),
        vec4s!(21i8 ^ 4i8, 23i8 ^ 50i8, 25i8 ^ 3i8, 27i8 ^ 10i8)
    );

    assert_debug_panic!(assert_eq!(
        vec2s!(1i8, i8::MAX) + vec2s!(1i8, 3i8),
        vec2s!(2i8, i8::MAX + 3i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1i8, i8::MAX, 1i8) + vec3s!(1i8, 3i8, 1i8),
        vec3s!(2i8, i8::MAX + 3i8, 2i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1i8, i8::MAX, 1i8, 1i8) + vec4s!(1i8, 3i8, 1i8, 1i8),
        vec4s!(2i8, i8::MAX + 3i8, 2i8, 2i8)
    ));

    assert_debug_panic!(assert_eq!(
        vec2s!(1i8, i8::MAX) + vec2s!(1i8),
        vec2s!(2i8, i8::MAX + 1i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1i8, i8::MAX, 1i8) + vec3s!(1i8),
        vec3s!(2i8, i8::MAX + 1i8, 2i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1i8, i8::MAX, 1i8, 1i8) + vec4s!(1i8),
        vec4s!(2i8, i8::MAX + 1i8, 2i8, 2i8)
    ));

    assert_debug_panic!(assert_eq!(
        vec2s!(1i8, i8::MIN) - vec2s!(1i8, 3i8),
        vec2s!(0i8, i8::MIN - 3i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1i8, i8::MIN, 1i8) - vec3s!(1i8, 3i8, 1i8),
        vec3s!(0i8, i8::MIN - 3i8, 0i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1i8, i8::MIN, 1i8, 1i8) - vec4s!(1i8, 3i8, 1i8, 1i8),
        vec4s!(0i8, i8::MIN - 3i8, 0i8, 0i8)
    ));

    assert_debug_panic!(assert_eq!(
        vec2s!(1i8, i8::MIN) - vec2s!(1i8),
        vec2s!(0i8, i8::MIN - 1i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1i8, i8::MIN, 1i8) - vec3s!(1i8),
        vec3s!(0i8, i8::MIN - 1i8, 0i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1i8, i8::MIN, 1i8, 1i8) - vec4s!(1i8),
        vec4s!(0i8, i8::MIN - 1i8, 0i8, 0i8)
    ));

    assert_debug_panic!(assert_eq!(
        vec2s!(1i8, i8::MAX) * vec2s!(1i8, 3i8),
        vec2s!(1i8, i8::MAX * 3i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec3s!(1i8, i8::MAX, 1i8) * vec3s!(1i8, 3i8, 1i8),
        vec3s!(1i8, i8::MAX * 3i8, 1i8)
    ));
    assert_debug_panic!(assert_eq!(
        vec4s!(1i8, i8::MAX, 1i8, 1i8) * vec4s!(1i8, 3i8, 1i8, 1i8),
        vec4s!(1i8, i8::MAX * 3i8, 1i8, 1i8)
    ));

    assert_panic!(vec2s!(5i8) / vec2s!(1i8, 0i8));
    assert_panic!(vec3s!(5i8) / vec3s!(1i8, 0i8, 1i8));
    assert_panic!(vec4s!(5i8) / vec4s!(1i8, 0i8, 1i8, 1i8));

    assert_panic!(vec2s!(5i8) % vec2s!(1i8, 0i8));
    assert_panic!(vec3s!(5i8) % vec3s!(1i8, 0i8, 1i8));
    assert_panic!(vec4s!(5i8) % vec4s!(1i8, 0i8, 1i8, 1i8));
}
