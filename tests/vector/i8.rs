// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_nonsimd_i8_vec_layout() {
    assert_eq!(size_of::<Vec2S<i8>>(), size_of::<i8>() * 2);
    assert_eq!(size_of::<Vec3S<i8>>(), size_of::<i8>() * 3);
    assert_eq!(size_of::<Vec4S<i8>>(), size_of::<i8>() * 4);

    assert_eq!(align_of::<Vec2S<i8>>(), align_of::<i8>());
    assert_eq!(align_of::<Vec3S<i8>>(), align_of::<i8>());
    assert_eq!(align_of::<Vec4S<i8>>(), align_of::<i8>());
}

#[test]
fn test_simd_i8_vec_constructors() {
    assert_eq!(Vec2::from_array([1i8, 2i8]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3::from_array([1i8, 2i8, 3i8]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4::from_array([1i8, 2i8, 3i8, 4i8]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(Vec2::splat(1i8).as_array(), [1i8; 2]);
    assert_eq!(Vec3::splat(1i8).as_array(), [1i8; 3]);
    assert_eq!(Vec4::splat(1i8).as_array(), [1i8; 4]);

    assert_eq!(Vec2::from_fn(|i| [1i8, 2i8][i]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3::from_fn(|i| [1i8, 2i8, 3i8][i]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1i8, 2i8, 3i8, 4i8][i]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(Vec2::const_from_array([1i8, 2i8]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3::const_from_array([1i8, 2i8, 3i8]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4::const_from_array([1i8, 2i8, 3i8, 4i8]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2!(1i8, 2i8).as_array(), [1i8, 2i8]);
    assert_eq!(vec2!(vec2!(1i8, 2i8)).as_array(), [1i8, 2i8]);
    assert_eq!(vec3!(1i8, 2i8, 3i8).as_array(), [1i8, 2i8, 3i8]);
    assert_eq!(vec3!(1i8, vec2!(2i8, 3i8)).as_array(), [1i8, 2i8, 3i8]);
    assert_eq!(vec4!(1i8, 2i8, 3i8, 4i8).as_array(), [1i8, 2i8, 3i8, 4i8]);
    assert_eq!(
        vec4!(1i8, vec2!(2i8, 3i8), 4i8).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );
    assert_eq!(
        vec4!(
            1i8,
            vec2!(2i8, 3i8),
            Vector::<1, i8, Simd>::from_array([4i8])
        )
        .as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );
}

#[test]
fn test_nonsimd_i8_vec_constructors() {
    assert_eq!(Vec2S::from_array([1i8, 2i8]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3S::from_array([1i8, 2i8, 3i8]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4S::from_array([1i8, 2i8, 3i8, 4i8]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(Vec2S::splat(1i8).as_array(), [1i8; 2]);
    assert_eq!(Vec3S::splat(1i8).as_array(), [1i8; 3]);
    assert_eq!(Vec4S::splat(1i8).as_array(), [1i8; 4]);

    assert_eq!(Vec2S::from_fn(|i| [1i8, 2i8][i]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3S::from_fn(|i| [1i8, 2i8, 3i8][i]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1i8, 2i8, 3i8, 4i8][i]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(Vec2S::const_from_array([1i8, 2i8]).as_array(), [1i8, 2i8]);
    assert_eq!(
        Vec3S::const_from_array([1i8, 2i8, 3i8]).as_array(),
        [1i8, 2i8, 3i8]
    );
    assert_eq!(
        Vec4S::const_from_array([1i8, 2i8, 3i8, 4i8]).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );

    assert_eq!(vec2s!(1i8, 2i8).as_array(), [1i8, 2i8]);
    assert_eq!(vec2s!(vec2s!(1i8, 2i8)).as_array(), [1i8, 2i8]);
    assert_eq!(vec3s!(1i8, 2i8, 3i8).as_array(), [1i8, 2i8, 3i8]);
    assert_eq!(vec3s!(1i8, vec2s!(2i8, 3i8)).as_array(), [1i8, 2i8, 3i8]);
    assert_eq!(vec4s!(1i8, 2i8, 3i8, 4i8).as_array(), [1i8, 2i8, 3i8, 4i8]);
    assert_eq!(
        vec4s!(1i8, vec2s!(2i8, 3i8), 4i8).as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );
    assert_eq!(
        vec4s!(
            1i8,
            vec2s!(2i8, 3i8),
            Vector::<1, i8, NonSimd>::from_array([4i8])
        )
        .as_array(),
        [1i8, 2i8, 3i8, 4i8]
    );
}
