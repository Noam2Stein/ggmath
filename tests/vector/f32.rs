// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

#[test]
fn test_vec2_constructor() {
    assert_eq!(vec2!(0.0f32, 1.0f32), Vec2::from_array([0.0f32, 1.0f32]));
    assert_eq!(
        vec2!(vec2!(0.0f32, 1.0f32)),
        Vec2::from_array([0.0f32, 1.0f32])
    );
}

#[test]
fn test_vec2_as_simd() {
    assert_eq!(vec2!(0.0f32, 1.0f32).as_simd(), vec2!(0.0f32, 1.0f32));
}

#[test]
fn test_vec2_as_non_simd() {
    assert_eq!(vec2!(0.0f32, 1.0f32).as_non_simd(), vec2s!(0.0f32, 1.0f32));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(
        Vec2::from_array([0.0f32, 1.0f32]).as_array(),
        [0.0f32, 1.0f32]
    );
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(0.0f32), vec2!(0.0f32, 0.0f32));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(0.0f32, 1.0f32).index(0), 0.0f32);
    assert_eq!(vec2!(0.0f32, 1.0f32).index(1), 1.0f32);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(0.0f32, 1.0f32).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(0.0f32, 1.0f32).get(0), Some(0.0f32));
    assert_eq!(vec2!(0.0f32, 1.0f32).get(1), Some(1.0f32));

    assert_eq!(vec2!(0.0f32, 1.0f32).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(0.0f32, 1.0f32).get_unchecked(0), 0.0f32);
        assert_eq!(vec2!(0.0f32, 1.0f32).get_unchecked(1), 1.0f32);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(0.0f32, 1.0f32);
        vec.set(0, 50.0f32);

        assert_eq!(vec, vec2!(50.0f32, 1.0f32));
    }
    {
        let mut vec = vec2!(0.0f32, 1.0f32);
        vec.set(1, 50.0f32);

        assert_eq!(vec, vec2!(0.0f32, 50.0f32));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(0.0f32, 1.0f32);
    vec.set(2, 0.0f32);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(0.0f32, 1.0f32);
        vec.try_set(0, 50.0f32).unwrap();

        assert_eq!(vec, vec2!(50.0f32, 1.0f32));
    }
    {
        let mut vec = vec2!(0.0f32, 1.0f32);
        vec.try_set(1, 50.0f32).unwrap();

        assert_eq!(vec, vec2!(0.0f32, 50.0f32));
    }

    assert_eq!(
        vec2!(0.0f32, 1.0f32).try_set(2, 0.0f32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(0.0f32, 1.0f32);
            vec.set_unchecked(0, 50.0f32);

            assert_eq!(vec, vec2!(50.0f32, 1.0f32));
        }
        {
            let mut vec = vec2!(0.0f32, 1.0f32);
            vec.set_unchecked(1, 50.0f32);

            assert_eq!(vec, vec2!(0.0f32, 50.0f32));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(0.0f32, 1.0f32).y(), 1.0f32);
    assert_eq!(vec2!(0.0f32, 1.0f32).yx(), vec2!(1.0f32, 0.0f32));
    assert_eq!(vec2!(0.0f32, 1.0f32).yxy(), vec3!(1.0f32, 0.0f32, 1.0f32));
    assert_eq!(
        vec2!(0.0f32, 1.0f32).yxyy(),
        vec4!(1.0f32, 0.0f32, 1.0f32, 1.0f32)
    );
}

#[test]
fn test_vec2_with_swizzle() {
    assert_eq!(vec2!(0.0f32, 1.0f32).with_y(0.0f32), vec2!(0.0f32, 0.0f32));
    assert_eq!(
        vec2!(0.0f32, 1.0f32).with_yx(vec2!(0.0f32, 1.0f32)),
        vec2!(1.0f32, 0.0f32)
    );
}

#[test]
fn test_vec2_fold() {
    assert_eq!(
        vec2!(0.0f32, 1.0f32).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f32 + 1.0f32
    );
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(
        vec2!(0.0f32, 1.0f32).reduce(|acc, x| acc + x),
        0.0f32 + 1.0f32
    );
}

#[test]
fn test_vec2_eq_mask() {
    assert_eq!(
        vec2!(0.0f32, 1.0f32).eq_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).eq_mask(vec2!(0.0f32, 0.0f32)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).eq_mask(vec2!(2.0f32, 3.0f32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(f32::NAN, f32::NAN).eq_mask(vec2!(f32::NAN, f32::NAN)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ne_mask() {
    assert_eq!(
        vec2!(0.0f32, 1.0f32).ne_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).ne_mask(vec2!(0.0f32, 0.0f32)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).ne_mask(vec2!(2.0f32, 3.0f32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(f32::NAN, f32::NAN).ne_mask(vec2!(f32::NAN, f32::NAN)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_lt_mask() {
    assert_eq!(
        vec2!(0.0f32, 1.0f32).lt_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).lt_mask(vec2!(1.0f32, 0.0f32)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).lt_mask(vec2!(2.0f32, 3.0f32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2.0f32, 3.0f32).lt_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_gt_mask() {
    assert_eq!(
        vec2!(0.0f32, 1.0f32).gt_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).gt_mask(vec2!(1.0f32, 0.0f32)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).gt_mask(vec2!(2.0f32, 3.0f32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2.0f32, 3.0f32).gt_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_le_mask() {
    assert_eq!(
        vec2!(0.0f32, 1.0f32).le_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).le_mask(vec2!(1.0f32, 0.0f32)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).le_mask(vec2!(2.0f32, 3.0f32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2.0f32, 3.0f32).le_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ge_mask() {
    assert_eq!(
        vec2!(0.0f32, 1.0f32).ge_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).ge_mask(vec2!(1.0f32, 0.0f32)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0.0f32, 1.0f32).ge_mask(vec2!(2.0f32, 3.0f32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2.0f32, 3.0f32).ge_mask(vec2!(0.0f32, 1.0f32)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_eq() {
    assert_eq!(vec2!(0.0f32, 1.0f32) == vec2!(0.0f32, 1.0f32), true);
    assert_eq!(vec2!(0.0f32, 1.0f32) == vec2!(0.0f32, 0.0f32), false);
    assert_eq!(vec2!(0.0f32, 1.0f32) == vec2!(2.0f32, 3.0f32), false);
}

#[test]
fn test_vec2_ne() {
    assert_eq!(vec2!(0.0f32, 1.0f32) != vec2!(0.0f32, 1.0f32), false);
    assert_eq!(vec2!(0.0f32, 1.0f32) != vec2!(0.0f32, 0.0f32), true);
    assert_eq!(vec2!(0.0f32, 1.0f32) != vec2!(2.0f32, 3.0f32), true);
}

#[test]
fn test_vec2_debug() {
    assert_eq!(format!("{:?}", vec2!(0.0f32, 1.0f32)), "(0.0, 1.0)");
}

#[test]
fn test_vec2_display() {
    assert_eq!(format!("{}", vec2!(0.0f32, 1.0f32)), "(0, 1)");
}

#[test]
fn test_vec2_const_from_array() {
    assert_eq!(
        Vec2::<f32>::const_from_array([0.0f32, 1.0f32]),
        Vec2::from_array([0.0f32, 1.0f32])
    );
}

#[test]
fn test_vec2_add() {
    assert_eq!(
        vec2!(0.0f32, 1.3f32) + vec2!(10.8f32, 16.200000000000003f32),
        vec2!(10.8f32, 17.500000000000004f32)
    );
}

const _: () = assert!(size_of::<Vec2S<f32>>() == size_of::<[f32; 2]>());

#[test]
fn test_vec2s_constructor() {
    assert_eq!(vec2s!(0.0f32, 1.0f32), Vec2S::from_array([0.0f32, 1.0f32]));
    assert_eq!(
        vec2s!(vec2s!(0.0f32, 1.0f32)),
        Vec2S::from_array([0.0f32, 1.0f32])
    );
}

#[test]
fn test_vec2s_as_simd() {
    assert_eq!(vec2s!(0.0f32, 1.0f32).as_simd(), vec2!(0.0f32, 1.0f32));
}

#[test]
fn test_vec2s_as_non_simd() {
    assert_eq!(vec2s!(0.0f32, 1.0f32).as_non_simd(), vec2s!(0.0f32, 1.0f32));
}

#[test]
fn test_vec2s_from_array_as_array() {
    assert_eq!(
        Vec2S::from_array([0.0f32, 1.0f32]).as_array(),
        [0.0f32, 1.0f32]
    );
}

#[test]
fn test_vec2s_splat() {
    assert_eq!(Vec2S::splat(0.0f32), vec2s!(0.0f32, 0.0f32));
}

#[test]
fn test_vec2s_index() {
    assert_eq!(vec2s!(0.0f32, 1.0f32).index(0), 0.0f32);
    assert_eq!(vec2s!(0.0f32, 1.0f32).index(1), 1.0f32);
}

#[test]
#[should_panic]
fn test_vec2s_index_panic() {
    vec2s!(0.0f32, 1.0f32).index(2);
}

#[test]
fn test_vec2s_get() {
    assert_eq!(vec2s!(0.0f32, 1.0f32).get(0), Some(0.0f32));
    assert_eq!(vec2s!(0.0f32, 1.0f32).get(1), Some(1.0f32));

    assert_eq!(vec2s!(0.0f32, 1.0f32).get(2), None);
}

#[test]
fn test_vec2s_get_unchecked() {
    unsafe {
        assert_eq!(vec2s!(0.0f32, 1.0f32).get_unchecked(0), 0.0f32);
        assert_eq!(vec2s!(0.0f32, 1.0f32).get_unchecked(1), 1.0f32);
    }
}

#[test]
fn test_vec2s_set() {
    {
        let mut vec = vec2s!(0.0f32, 1.0f32);
        vec.set(0, 50.0f32);

        assert_eq!(vec, vec2s!(50.0f32, 1.0f32));
    }
    {
        let mut vec = vec2s!(0.0f32, 1.0f32);
        vec.set(1, 50.0f32);

        assert_eq!(vec, vec2s!(0.0f32, 50.0f32));
    }
}

#[test]
#[should_panic]
fn test_vec2s_set_panic() {
    let mut vec = vec2s!(0.0f32, 1.0f32);
    vec.set(2, 0.0f32);
}

#[test]
fn test_vec2s_try_set() {
    {
        let mut vec = vec2s!(0.0f32, 1.0f32);
        vec.try_set(0, 50.0f32).unwrap();

        assert_eq!(vec, vec2s!(50.0f32, 1.0f32));
    }
    {
        let mut vec = vec2s!(0.0f32, 1.0f32);
        vec.try_set(1, 50.0f32).unwrap();

        assert_eq!(vec, vec2s!(0.0f32, 50.0f32));
    }

    assert_eq!(
        vec2s!(0.0f32, 1.0f32).try_set(2, 0.0f32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2s_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2s!(0.0f32, 1.0f32);
            vec.set_unchecked(0, 50.0f32);

            assert_eq!(vec, vec2s!(50.0f32, 1.0f32));
        }
        {
            let mut vec = vec2s!(0.0f32, 1.0f32);
            vec.set_unchecked(1, 50.0f32);

            assert_eq!(vec, vec2s!(0.0f32, 50.0f32));
        }
    }
}

#[test]
fn test_vec2s_swizzle() {
    assert_eq!(vec2s!(0.0f32, 1.0f32).y(), 1.0f32);
    assert_eq!(vec2s!(0.0f32, 1.0f32).yx(), vec2s!(1.0f32, 0.0f32));
    assert_eq!(vec2s!(0.0f32, 1.0f32).yxy(), vec3s!(1.0f32, 0.0f32, 1.0f32));
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).yxyy(),
        vec4s!(1.0f32, 0.0f32, 1.0f32, 1.0f32)
    );
}

#[test]
fn test_vec2s_with_swizzle() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).with_y(0.0f32),
        vec2s!(0.0f32, 0.0f32)
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).with_yx(vec2s!(0.0f32, 1.0f32)),
        vec2s!(1.0f32, 0.0f32)
    );
}

#[test]
fn test_vec2s_swizzle_ref() {
    assert_eq!(vec2s!(0.0f32, 1.0f32).y_ref(), &1.0f32);
    assert_eq!(vec2s!(0.0f32, 1.0f32).xy_ref(), &vec2s!(0.0f32, 1.0f32));
}

#[test]
fn test_vec2s_swizzle_mut() {
    assert_eq!(vec2s!(0.0f32, 1.0f32).y_mut(), &mut 1.0f32);
    assert_eq!(vec2s!(0.0f32, 1.0f32).xy_mut(), &mut vec2s!(0.0f32, 1.0f32));

    assert_eq!(vec2s!(0.0f32, 1.0f32).x_y_mut(), (&mut 0.0f32, &mut 1.0f32));
}

#[test]
fn test_vec2s_fold() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f32 + 1.0f32
    );
}

#[test]
fn test_vec2s_reduce() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).reduce(|acc, x| acc + x),
        0.0f32 + 1.0f32
    );
}

#[test]
fn test_vec2s_eq_mask() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).eq_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).eq_mask(vec2s!(0.0f32, 0.0f32)),
        vec2s!(true, false),
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).eq_mask(vec2s!(2.0f32, 3.0f32)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(f32::NAN, f32::NAN).eq_mask(vec2s!(f32::NAN, f32::NAN)),
        vec2s!(false, false)
    );
}

#[test]
fn test_vec2s_ne_mask() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).ne_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).ne_mask(vec2s!(0.0f32, 0.0f32)),
        vec2s!(false, true),
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).ne_mask(vec2s!(2.0f32, 3.0f32)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(f32::NAN, f32::NAN).ne_mask(vec2s!(f32::NAN, f32::NAN)),
        vec2s!(true, true)
    );
}

#[test]
fn test_vec2s_lt_mask() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).lt_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).lt_mask(vec2s!(1.0f32, 0.0f32)),
        vec2s!(true, false),
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).lt_mask(vec2s!(2.0f32, 3.0f32)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(2.0f32, 3.0f32).lt_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(false, false)
    );
}

#[test]
fn test_vec2s_gt_mask() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).gt_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).gt_mask(vec2s!(1.0f32, 0.0f32)),
        vec2s!(false, true),
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).gt_mask(vec2s!(2.0f32, 3.0f32)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(2.0f32, 3.0f32).gt_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(true, true)
    );
}

#[test]
fn test_vec2s_le_mask() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).le_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).le_mask(vec2s!(1.0f32, 0.0f32)),
        vec2s!(true, false),
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).le_mask(vec2s!(2.0f32, 3.0f32)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(2.0f32, 3.0f32).le_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(false, false)
    );
}

#[test]
fn test_vec2s_ge_mask() {
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).ge_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).ge_mask(vec2s!(1.0f32, 0.0f32)),
        vec2s!(false, true),
    );
    assert_eq!(
        vec2s!(0.0f32, 1.0f32).ge_mask(vec2s!(2.0f32, 3.0f32)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(2.0f32, 3.0f32).ge_mask(vec2s!(0.0f32, 1.0f32)),
        vec2s!(true, true)
    );
}

#[test]
fn test_vec2s_eq() {
    assert_eq!(vec2s!(0.0f32, 1.0f32) == vec2s!(0.0f32, 1.0f32), true);
    assert_eq!(vec2s!(0.0f32, 1.0f32) == vec2s!(0.0f32, 0.0f32), false);
    assert_eq!(vec2s!(0.0f32, 1.0f32) == vec2s!(2.0f32, 3.0f32), false);
}

#[test]
fn test_vec2s_ne() {
    assert_eq!(vec2s!(0.0f32, 1.0f32) != vec2s!(0.0f32, 1.0f32), false);
    assert_eq!(vec2s!(0.0f32, 1.0f32) != vec2s!(0.0f32, 0.0f32), true);
    assert_eq!(vec2s!(0.0f32, 1.0f32) != vec2s!(2.0f32, 3.0f32), true);
}

#[test]
fn test_vec2s_debug() {
    assert_eq!(format!("{:?}", vec2s!(0.0f32, 1.0f32)), "(0.0, 1.0)");
}

#[test]
fn test_vec2s_display() {
    assert_eq!(format!("{}", vec2s!(0.0f32, 1.0f32)), "(0, 1)");
}

#[test]
fn test_vec2s_const_from_array() {
    assert_eq!(
        Vec2S::<f32>::const_from_array([0.0f32, 1.0f32]),
        Vec2S::from_array([0.0f32, 1.0f32])
    );
}

#[test]
fn test_vec2s_add() {
    assert_eq!(
        vec2s!(0.0f32, 1.3f32) + vec2s!(10.8f32, 16.200000000000003f32),
        vec2s!(10.8f32, 17.500000000000004f32)
    );
}

#[test]
fn test_vec3_constructor() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32),
        Vec3::from_array([0.0f32, 1.0f32, 2.0f32])
    );
    assert_eq!(
        vec3!(0.0f32, vec2!(1.0f32, 2.0f32)),
        Vec3::from_array([0.0f32, 1.0f32, 2.0f32])
    );
    assert_eq!(
        vec3!(vec3!(0.0f32, 1.0f32, 2.0f32)),
        Vec3::from_array([0.0f32, 1.0f32, 2.0f32])
    );
}

#[test]
fn test_vec3_as_simd() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).as_simd(),
        vec3!(0.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec3_as_non_simd() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).as_non_simd(),
        vec3s!(0.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([0.0f32, 1.0f32, 2.0f32]).as_array(),
        [0.0f32, 1.0f32, 2.0f32]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(0.0f32), vec3!(0.0f32, 0.0f32, 0.0f32));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).index(0), 0.0f32);
    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).index(1), 1.0f32);
    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).index(2), 2.0f32);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(0.0f32, 1.0f32, 2.0f32).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).get(0), Some(0.0f32));
    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).get(1), Some(1.0f32));
    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).get(2), Some(2.0f32));

    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).get_unchecked(0), 0.0f32);
        assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).get_unchecked(1), 1.0f32);
        assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).get_unchecked(2), 2.0f32);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
        vec.set(0, 50.0f32);

        assert_eq!(vec, vec3!(50.0f32, 1.0f32, 2.0f32));
    }
    {
        let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
        vec.set(1, 50.0f32);

        assert_eq!(vec, vec3!(0.0f32, 50.0f32, 2.0f32));
    }
    {
        let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
        vec.set(2, 50.0f32);

        assert_eq!(vec, vec3!(0.0f32, 1.0f32, 50.0f32));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
    vec.set(3, 0.0f32);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
        vec.try_set(0, 50.0f32).unwrap();

        assert_eq!(vec, vec3!(50.0f32, 1.0f32, 2.0f32));
    }
    {
        let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
        vec.try_set(1, 50.0f32).unwrap();

        assert_eq!(vec, vec3!(0.0f32, 50.0f32, 2.0f32));
    }
    {
        let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
        vec.try_set(2, 50.0f32).unwrap();

        assert_eq!(vec, vec3!(0.0f32, 1.0f32, 50.0f32));
    }

    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).try_set(3, 0.0f32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
            vec.set_unchecked(0, 50.0f32);

            assert_eq!(vec, vec3!(50.0f32, 1.0f32, 2.0f32));
        }
        {
            let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
            vec.set_unchecked(1, 50.0f32);

            assert_eq!(vec, vec3!(0.0f32, 50.0f32, 2.0f32));
        }
        {
            let mut vec = vec3!(0.0f32, 1.0f32, 2.0f32);
            vec.set_unchecked(2, 50.0f32);

            assert_eq!(vec, vec3!(0.0f32, 1.0f32, 50.0f32));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).z(), 2.0f32);
    assert_eq!(vec3!(0.0f32, 1.0f32, 2.0f32).zx(), vec2!(2.0f32, 0.0f32));
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).zxy(),
        vec3!(2.0f32, 0.0f32, 1.0f32)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).zxyz(),
        vec4!(2.0f32, 0.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec3_with_swizzle() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).with_y(0.0f32),
        vec3!(0.0f32, 0.0f32, 2.0f32)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).with_yx(vec2!(0.0f32, 1.0f32)),
        vec3!(1.0f32, 0.0f32, 2.0f32)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).with_yxz(vec3!(0.0f32, 2.0f32, 1.0f32)),
        vec3!(2.0f32, 0.0f32, 1.0f32)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f32 + 1.0f32 + 2.0f32
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).reduce(|acc, x| acc + x),
        0.0f32 + 1.0f32 + 2.0f32
    );
}

#[test]
fn test_vec3_eq_mask() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).eq_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).eq_mask(vec3!(0.0f32, 0.0f32, 2.0f32)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).eq_mask(vec3!(3.0f32, 4.0f32, 5.0f32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(f32::NAN, f32::NAN, f32::NAN).eq_mask(vec3!(f32::NAN, f32::NAN, f32::NAN)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ne_mask() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).ne_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).ne_mask(vec3!(0.0f32, 0.0f32, 2.0f32)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).ne_mask(vec3!(3.0f32, 4.0f32, 5.0f32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(f32::NAN, f32::NAN, f32::NAN).ne_mask(vec3!(f32::NAN, f32::NAN, f32::NAN)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_lt_mask() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).lt_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).lt_mask(vec3!(1.0f32, 0.0f32, 2.0f32)),
        vec3!(true, false, false),
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).lt_mask(vec3!(3.0f32, 4.0f32, 5.0f32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3.0f32, 4.0f32, 5.0f32).lt_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_gt_mask() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).gt_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).gt_mask(vec3!(1.0f32, 0.0f32, 2.0f32)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).gt_mask(vec3!(3.0f32, 4.0f32, 5.0f32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3.0f32, 4.0f32, 5.0f32).gt_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_le_mask() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).le_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).le_mask(vec3!(1.0f32, 0.0f32, 2.0f32)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).le_mask(vec3!(3.0f32, 4.0f32, 5.0f32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3.0f32, 4.0f32, 5.0f32).le_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ge_mask() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).ge_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).ge_mask(vec3!(1.0f32, 0.0f32, 2.0f32)),
        vec3!(false, true, true),
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32).ge_mask(vec3!(3.0f32, 4.0f32, 5.0f32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3.0f32, 4.0f32, 5.0f32).ge_mask(vec3!(0.0f32, 1.0f32, 2.0f32)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_eq() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32) == vec3!(0.0f32, 1.0f32, 2.0f32),
        true
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32) == vec3!(0.0f32, 0.0f32, 2.0f32),
        false
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32) == vec3!(3.0f32, 4.0f32, 5.0f32),
        false
    );
}

#[test]
fn test_vec3_ne() {
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32) != vec3!(0.0f32, 1.0f32, 2.0f32),
        false
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32) != vec3!(0.0f32, 0.0f32, 2.0f32),
        true
    );
    assert_eq!(
        vec3!(0.0f32, 1.0f32, 2.0f32) != vec3!(3.0f32, 4.0f32, 5.0f32),
        true
    );
}

#[test]
fn test_vec3_debug() {
    assert_eq!(
        format!("{:?}", vec3!(0.0f32, 1.0f32, 2.0f32)),
        "(0.0, 1.0, 2.0)"
    );
}

#[test]
fn test_vec3_display() {
    assert_eq!(format!("{}", vec3!(0.0f32, 1.0f32, 2.0f32)), "(0, 1, 2)");
}

#[test]
fn test_vec3_const_from_array() {
    assert_eq!(
        Vec3::<f32>::const_from_array([0.0f32, 1.0f32, 2.0f32]),
        Vec3::from_array([0.0f32, 1.0f32, 2.0f32])
    );
}

#[test]
fn test_vec3_add() {
    assert_eq!(
        vec3!(0.0f32, 1.3f32, 2.6f32) + vec3!(16.200000000000003f32, 21.6f32, 27.0f32),
        vec3!(16.200000000000003f32, 22.900000000000002f32, 29.6f32)
    );
}

const _: () = assert!(size_of::<Vec3S<f32>>() == size_of::<[f32; 3]>());

#[test]
fn test_vec3s_constructor() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32),
        Vec3S::from_array([0.0f32, 1.0f32, 2.0f32])
    );
    assert_eq!(
        vec3s!(0.0f32, vec2s!(1.0f32, 2.0f32)),
        Vec3S::from_array([0.0f32, 1.0f32, 2.0f32])
    );
    assert_eq!(
        vec3s!(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        Vec3S::from_array([0.0f32, 1.0f32, 2.0f32])
    );
}

#[test]
fn test_vec3s_as_simd() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).as_simd(),
        vec3!(0.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec3s_as_non_simd() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).as_non_simd(),
        vec3s!(0.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec3s_from_array_as_array() {
    assert_eq!(
        Vec3S::from_array([0.0f32, 1.0f32, 2.0f32]).as_array(),
        [0.0f32, 1.0f32, 2.0f32]
    );
}

#[test]
fn test_vec3s_splat() {
    assert_eq!(Vec3S::splat(0.0f32), vec3s!(0.0f32, 0.0f32, 0.0f32));
}

#[test]
fn test_vec3s_index() {
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).index(0), 0.0f32);
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).index(1), 1.0f32);
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).index(2), 2.0f32);
}

#[test]
#[should_panic]
fn test_vec3s_index_panic() {
    vec3s!(0.0f32, 1.0f32, 2.0f32).index(3);
}

#[test]
fn test_vec3s_get() {
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).get(0), Some(0.0f32));
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).get(1), Some(1.0f32));
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).get(2), Some(2.0f32));

    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).get(3), None);
}

#[test]
fn test_vec3s_get_unchecked() {
    unsafe {
        assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).get_unchecked(0), 0.0f32);
        assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).get_unchecked(1), 1.0f32);
        assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).get_unchecked(2), 2.0f32);
    }
}

#[test]
fn test_vec3s_set() {
    {
        let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
        vec.set(0, 50.0f32);

        assert_eq!(vec, vec3s!(50.0f32, 1.0f32, 2.0f32));
    }
    {
        let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
        vec.set(1, 50.0f32);

        assert_eq!(vec, vec3s!(0.0f32, 50.0f32, 2.0f32));
    }
    {
        let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
        vec.set(2, 50.0f32);

        assert_eq!(vec, vec3s!(0.0f32, 1.0f32, 50.0f32));
    }
}

#[test]
#[should_panic]
fn test_vec3s_set_panic() {
    let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
    vec.set(3, 0.0f32);
}

#[test]
fn test_vec3s_try_set() {
    {
        let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
        vec.try_set(0, 50.0f32).unwrap();

        assert_eq!(vec, vec3s!(50.0f32, 1.0f32, 2.0f32));
    }
    {
        let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
        vec.try_set(1, 50.0f32).unwrap();

        assert_eq!(vec, vec3s!(0.0f32, 50.0f32, 2.0f32));
    }
    {
        let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
        vec.try_set(2, 50.0f32).unwrap();

        assert_eq!(vec, vec3s!(0.0f32, 1.0f32, 50.0f32));
    }

    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).try_set(3, 0.0f32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3s_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
            vec.set_unchecked(0, 50.0f32);

            assert_eq!(vec, vec3s!(50.0f32, 1.0f32, 2.0f32));
        }
        {
            let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
            vec.set_unchecked(1, 50.0f32);

            assert_eq!(vec, vec3s!(0.0f32, 50.0f32, 2.0f32));
        }
        {
            let mut vec = vec3s!(0.0f32, 1.0f32, 2.0f32);
            vec.set_unchecked(2, 50.0f32);

            assert_eq!(vec, vec3s!(0.0f32, 1.0f32, 50.0f32));
        }
    }
}

#[test]
fn test_vec3s_swizzle() {
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).z(), 2.0f32);
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).zx(), vec2s!(2.0f32, 0.0f32));
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).zxy(),
        vec3s!(2.0f32, 0.0f32, 1.0f32)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).zxyz(),
        vec4s!(2.0f32, 0.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec3s_with_swizzle() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).with_y(0.0f32),
        vec3s!(0.0f32, 0.0f32, 2.0f32)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).with_yx(vec2s!(0.0f32, 1.0f32)),
        vec3s!(1.0f32, 0.0f32, 2.0f32)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).with_yxz(vec3s!(0.0f32, 2.0f32, 1.0f32)),
        vec3s!(2.0f32, 0.0f32, 1.0f32)
    );
}

#[test]
fn test_vec3s_swizzle_ref() {
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).y_ref(), &1.0f32);
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).yz_ref(),
        &vec2s!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).xyz_ref(),
        &vec3s!(0.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec3s_swizzle_mut() {
    assert_eq!(vec3s!(0.0f32, 1.0f32, 2.0f32).y_mut(), &mut 1.0f32);
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).yz_mut(),
        &mut vec2s!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).xyz_mut(),
        &mut vec3s!(0.0f32, 1.0f32, 2.0f32)
    );

    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).x_yz_mut(),
        (&mut 0.0f32, &mut vec2s!(1.0f32, 2.0f32))
    );
}

#[test]
fn test_vec3s_fold() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f32 + 1.0f32 + 2.0f32
    );
}

#[test]
fn test_vec3s_reduce() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).reduce(|acc, x| acc + x),
        0.0f32 + 1.0f32 + 2.0f32
    );
}

#[test]
fn test_vec3s_eq_mask() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).eq_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).eq_mask(vec3s!(0.0f32, 0.0f32, 2.0f32)),
        vec3s!(true, false, true),
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).eq_mask(vec3s!(3.0f32, 4.0f32, 5.0f32)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(f32::NAN, f32::NAN, f32::NAN).eq_mask(vec3s!(f32::NAN, f32::NAN, f32::NAN)),
        vec3s!(false, false, false)
    );
}

#[test]
fn test_vec3s_ne_mask() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).ne_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).ne_mask(vec3s!(0.0f32, 0.0f32, 2.0f32)),
        vec3s!(false, true, false),
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).ne_mask(vec3s!(3.0f32, 4.0f32, 5.0f32)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(f32::NAN, f32::NAN, f32::NAN).ne_mask(vec3s!(f32::NAN, f32::NAN, f32::NAN)),
        vec3s!(true, true, true)
    );
}

#[test]
fn test_vec3s_lt_mask() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).lt_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).lt_mask(vec3s!(1.0f32, 0.0f32, 2.0f32)),
        vec3s!(true, false, false),
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).lt_mask(vec3s!(3.0f32, 4.0f32, 5.0f32)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(3.0f32, 4.0f32, 5.0f32).lt_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(false, false, false)
    );
}

#[test]
fn test_vec3s_gt_mask() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).gt_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).gt_mask(vec3s!(1.0f32, 0.0f32, 2.0f32)),
        vec3s!(false, true, false),
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).gt_mask(vec3s!(3.0f32, 4.0f32, 5.0f32)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(3.0f32, 4.0f32, 5.0f32).gt_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(true, true, true)
    );
}

#[test]
fn test_vec3s_le_mask() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).le_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).le_mask(vec3s!(1.0f32, 0.0f32, 2.0f32)),
        vec3s!(true, false, true),
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).le_mask(vec3s!(3.0f32, 4.0f32, 5.0f32)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(3.0f32, 4.0f32, 5.0f32).le_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(false, false, false)
    );
}

#[test]
fn test_vec3s_ge_mask() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).ge_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).ge_mask(vec3s!(1.0f32, 0.0f32, 2.0f32)),
        vec3s!(false, true, true),
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32).ge_mask(vec3s!(3.0f32, 4.0f32, 5.0f32)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(3.0f32, 4.0f32, 5.0f32).ge_mask(vec3s!(0.0f32, 1.0f32, 2.0f32)),
        vec3s!(true, true, true)
    );
}

#[test]
fn test_vec3s_eq() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32) == vec3s!(0.0f32, 1.0f32, 2.0f32),
        true
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32) == vec3s!(0.0f32, 0.0f32, 2.0f32),
        false
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32) == vec3s!(3.0f32, 4.0f32, 5.0f32),
        false
    );
}

#[test]
fn test_vec3s_ne() {
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32) != vec3s!(0.0f32, 1.0f32, 2.0f32),
        false
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32) != vec3s!(0.0f32, 0.0f32, 2.0f32),
        true
    );
    assert_eq!(
        vec3s!(0.0f32, 1.0f32, 2.0f32) != vec3s!(3.0f32, 4.0f32, 5.0f32),
        true
    );
}

#[test]
fn test_vec3s_debug() {
    assert_eq!(
        format!("{:?}", vec3s!(0.0f32, 1.0f32, 2.0f32)),
        "(0.0, 1.0, 2.0)"
    );
}

#[test]
fn test_vec3s_display() {
    assert_eq!(format!("{}", vec3s!(0.0f32, 1.0f32, 2.0f32)), "(0, 1, 2)");
}

#[test]
fn test_vec3s_const_from_array() {
    assert_eq!(
        Vec3S::<f32>::const_from_array([0.0f32, 1.0f32, 2.0f32]),
        Vec3S::from_array([0.0f32, 1.0f32, 2.0f32])
    );
}

#[test]
fn test_vec3s_add() {
    assert_eq!(
        vec3s!(0.0f32, 1.3f32, 2.6f32) + vec3s!(16.200000000000003f32, 21.6f32, 27.0f32),
        vec3s!(16.200000000000003f32, 22.900000000000002f32, 29.6f32)
    );
}

#[test]
fn test_vec4_constructor() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32),
        Vec4::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32])
    );
    assert_eq!(
        vec4!(0.0f32, vec2!(1.0f32, 2.0f32), 3.0f32),
        Vec4::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32])
    );
    assert_eq!(
        vec4!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        Vec4::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32])
    );
}

#[test]
fn test_vec4_as_simd() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).as_simd(),
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)
    );
}

#[test]
fn test_vec4_as_non_simd() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).as_non_simd(),
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32]).as_array(),
        [0.0f32, 1.0f32, 2.0f32, 3.0f32]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0.0f32), vec4!(0.0f32, 0.0f32, 0.0f32, 0.0f32));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(0), 0.0f32);
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(1), 1.0f32);
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(2), 2.0f32);
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(3), 3.0f32);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(0), Some(0.0f32));
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(1), Some(1.0f32));
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(2), Some(2.0f32));
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(3), Some(3.0f32));

    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get_unchecked(0),
            0.0f32
        );
        assert_eq!(
            vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get_unchecked(1),
            1.0f32
        );
        assert_eq!(
            vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get_unchecked(2),
            2.0f32
        );
        assert_eq!(
            vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get_unchecked(3),
            3.0f32
        );
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.set(0, 50.0f32);

        assert_eq!(vec, vec4!(50.0f32, 1.0f32, 2.0f32, 3.0f32));
    }
    {
        let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.set(1, 50.0f32);

        assert_eq!(vec, vec4!(0.0f32, 50.0f32, 2.0f32, 3.0f32));
    }
    {
        let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.set(2, 50.0f32);

        assert_eq!(vec, vec4!(0.0f32, 1.0f32, 50.0f32, 3.0f32));
    }
    {
        let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.set(3, 50.0f32);

        assert_eq!(vec, vec4!(0.0f32, 1.0f32, 2.0f32, 50.0f32));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
    vec.set(4, 0.0f32);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.try_set(0, 50.0f32).unwrap();

        assert_eq!(vec, vec4!(50.0f32, 1.0f32, 2.0f32, 3.0f32));
    }
    {
        let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.try_set(1, 50.0f32).unwrap();

        assert_eq!(vec, vec4!(0.0f32, 50.0f32, 2.0f32, 3.0f32));
    }
    {
        let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.try_set(2, 50.0f32).unwrap();

        assert_eq!(vec, vec4!(0.0f32, 1.0f32, 50.0f32, 3.0f32));
    }
    {
        let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.try_set(3, 50.0f32).unwrap();

        assert_eq!(vec, vec4!(0.0f32, 1.0f32, 2.0f32, 50.0f32));
    }

    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).try_set(4, 0.0f32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
            vec.set_unchecked(0, 50.0f32);

            assert_eq!(vec, vec4!(50.0f32, 1.0f32, 2.0f32, 3.0f32));
        }
        {
            let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
            vec.set_unchecked(1, 50.0f32);

            assert_eq!(vec, vec4!(0.0f32, 50.0f32, 2.0f32, 3.0f32));
        }
        {
            let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
            vec.set_unchecked(2, 50.0f32);

            assert_eq!(vec, vec4!(0.0f32, 1.0f32, 50.0f32, 3.0f32));
        }
        {
            let mut vec = vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
            vec.set_unchecked(3, 50.0f32);

            assert_eq!(vec, vec4!(0.0f32, 1.0f32, 2.0f32, 50.0f32));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).z(), 2.0f32);
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).zw(),
        vec2!(2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).zwy(),
        vec3!(2.0f32, 3.0f32, 1.0f32)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).zwyz(),
        vec4!(2.0f32, 3.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec4_with_swizzle() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).with_y(0.0f32),
        vec4!(0.0f32, 0.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).with_yx(vec2!(0.0f32, 1.0f32)),
        vec4!(1.0f32, 0.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).with_yxz(vec3!(0.0f32, 2.0f32, 1.0f32)),
        vec4!(2.0f32, 0.0f32, 1.0f32, 3.0f32)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).with_yxzw(vec4!(0.0f32, 2.0f32, 1.0f32, 0.0f32)),
        vec4!(2.0f32, 0.0f32, 1.0f32, 0.0f32)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f32 + 1.0f32 + 2.0f32 + 3.0f32
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).reduce(|acc, x| acc + x),
        0.0f32 + 1.0f32 + 2.0f32 + 3.0f32
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).eq_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).eq_mask(vec4!(0.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).eq_mask(vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(f32::NAN, f32::NAN, f32::NAN, f32::NAN).eq_mask(vec4!(
            f32::NAN,
            f32::NAN,
            f32::NAN,
            f32::NAN
        )),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ne_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ne_mask(vec4!(0.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ne_mask(vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(f32::NAN, f32::NAN, f32::NAN, f32::NAN).ne_mask(vec4!(
            f32::NAN,
            f32::NAN,
            f32::NAN,
            f32::NAN
        )),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).lt_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).lt_mask(vec4!(1.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4!(true, false, false, false),
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).lt_mask(vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32).lt_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).gt_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).gt_mask(vec4!(1.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).gt_mask(vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32).gt_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).le_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).le_mask(vec4!(1.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).le_mask(vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32).le_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ge_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ge_mask(vec4!(1.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4!(false, true, true, true),
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ge_mask(vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32).ge_mask(vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32) == vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32),
        true
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32) == vec4!(0.0f32, 0.0f32, 2.0f32, 3.0f32),
        false
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32) == vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32) != vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32),
        false
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32) != vec4!(0.0f32, 0.0f32, 2.0f32, 3.0f32),
        true
    );
    assert_eq!(
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32) != vec4!(4.0f32, 5.0f32, 6.0f32, 7.0f32),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        "(0.0, 1.0, 2.0, 3.0)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(
        format!("{}", vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4_const_from_array() {
    assert_eq!(
        Vec4::<f32>::const_from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32]),
        Vec4::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32])
    );
}

#[test]
fn test_vec4_add() {
    assert_eq!(
        vec4!(0.0f32, 1.3f32, 2.6f32, 3.9000000000000004f32)
            + vec4!(
                21.6f32,
                27.0f32,
                32.400000000000006f32,
                37.800000000000004f32
            ),
        vec4!(21.6f32, 28.3f32, 35.00000000000001f32, 41.7f32)
    );
}

const _: () = assert!(size_of::<Vec4S<f32>>() == size_of::<[f32; 4]>());

#[test]
fn test_vec4s_constructor() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32),
        Vec4S::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32])
    );
    assert_eq!(
        vec4s!(0.0f32, vec2s!(1.0f32, 2.0f32), 3.0f32),
        Vec4S::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32])
    );
    assert_eq!(
        vec4s!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        Vec4S::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32])
    );
}

#[test]
fn test_vec4s_as_simd() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).as_simd(),
        vec4!(0.0f32, 1.0f32, 2.0f32, 3.0f32)
    );
}

#[test]
fn test_vec4s_as_non_simd() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).as_non_simd(),
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)
    );
}

#[test]
fn test_vec4s_from_array_as_array() {
    assert_eq!(
        Vec4S::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32]).as_array(),
        [0.0f32, 1.0f32, 2.0f32, 3.0f32]
    );
}

#[test]
fn test_vec4s_splat() {
    assert_eq!(Vec4S::splat(0.0f32), vec4s!(0.0f32, 0.0f32, 0.0f32, 0.0f32));
}

#[test]
fn test_vec4s_index() {
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(0), 0.0f32);
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(1), 1.0f32);
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(2), 2.0f32);
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(3), 3.0f32);
}

#[test]
#[should_panic]
fn test_vec4s_index_panic() {
    vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).index(4);
}

#[test]
fn test_vec4s_get() {
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(0), Some(0.0f32));
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(1), Some(1.0f32));
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(2), Some(2.0f32));
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(3), Some(3.0f32));

    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get(4), None);
}

#[test]
fn test_vec4s_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get_unchecked(0),
            0.0f32
        );
        assert_eq!(
            vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get_unchecked(1),
            1.0f32
        );
        assert_eq!(
            vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get_unchecked(2),
            2.0f32
        );
        assert_eq!(
            vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).get_unchecked(3),
            3.0f32
        );
    }
}

#[test]
fn test_vec4s_set() {
    {
        let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.set(0, 50.0f32);

        assert_eq!(vec, vec4s!(50.0f32, 1.0f32, 2.0f32, 3.0f32));
    }
    {
        let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.set(1, 50.0f32);

        assert_eq!(vec, vec4s!(0.0f32, 50.0f32, 2.0f32, 3.0f32));
    }
    {
        let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.set(2, 50.0f32);

        assert_eq!(vec, vec4s!(0.0f32, 1.0f32, 50.0f32, 3.0f32));
    }
    {
        let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.set(3, 50.0f32);

        assert_eq!(vec, vec4s!(0.0f32, 1.0f32, 2.0f32, 50.0f32));
    }
}

#[test]
#[should_panic]
fn test_vec4s_set_panic() {
    let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
    vec.set(4, 0.0f32);
}

#[test]
fn test_vec4s_try_set() {
    {
        let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.try_set(0, 50.0f32).unwrap();

        assert_eq!(vec, vec4s!(50.0f32, 1.0f32, 2.0f32, 3.0f32));
    }
    {
        let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.try_set(1, 50.0f32).unwrap();

        assert_eq!(vec, vec4s!(0.0f32, 50.0f32, 2.0f32, 3.0f32));
    }
    {
        let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.try_set(2, 50.0f32).unwrap();

        assert_eq!(vec, vec4s!(0.0f32, 1.0f32, 50.0f32, 3.0f32));
    }
    {
        let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
        vec.try_set(3, 50.0f32).unwrap();

        assert_eq!(vec, vec4s!(0.0f32, 1.0f32, 2.0f32, 50.0f32));
    }

    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).try_set(4, 0.0f32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4s_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
            vec.set_unchecked(0, 50.0f32);

            assert_eq!(vec, vec4s!(50.0f32, 1.0f32, 2.0f32, 3.0f32));
        }
        {
            let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
            vec.set_unchecked(1, 50.0f32);

            assert_eq!(vec, vec4s!(0.0f32, 50.0f32, 2.0f32, 3.0f32));
        }
        {
            let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
            vec.set_unchecked(2, 50.0f32);

            assert_eq!(vec, vec4s!(0.0f32, 1.0f32, 50.0f32, 3.0f32));
        }
        {
            let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
            vec.set_unchecked(3, 50.0f32);

            assert_eq!(vec, vec4s!(0.0f32, 1.0f32, 2.0f32, 50.0f32));
        }
    }
}

#[test]
fn test_vec4s_swizzle() {
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).z(), 2.0f32);
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).zw(),
        vec2s!(2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).zwy(),
        vec3s!(2.0f32, 3.0f32, 1.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).zwyz(),
        vec4s!(2.0f32, 3.0f32, 1.0f32, 2.0f32)
    );
}

#[test]
fn test_vec4s_with_swizzle() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).with_y(0.0f32),
        vec4s!(0.0f32, 0.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).with_yx(vec2s!(0.0f32, 1.0f32)),
        vec4s!(1.0f32, 0.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).with_yxz(vec3s!(0.0f32, 2.0f32, 1.0f32)),
        vec4s!(2.0f32, 0.0f32, 1.0f32, 3.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).with_yxzw(vec4s!(0.0f32, 2.0f32, 1.0f32, 0.0f32)),
        vec4s!(2.0f32, 0.0f32, 1.0f32, 0.0f32)
    );
}

#[test]
fn test_vec4s_swizzle_set() {
    let mut vec = vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32);
    vec.set_yxz(vec3s!(0.0f32, 2.0f32, 1.0f32));

    assert_eq!(vec, vec4s!(2.0f32, 0.0f32, 1.0f32, 3.0f32));
}

#[test]
fn test_vec4s_swizzle_ref() {
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).y_ref(), &1.0f32);
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).yz_ref(),
        &vec2s!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).xyz_ref(),
        &vec3s!(0.0f32, 1.0f32, 2.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).xyzw_ref(),
        &vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)
    );
}

#[test]
fn test_vec4s_swizzle_mut() {
    assert_eq!(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).y_mut(), &mut 1.0f32);
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).yz_mut(),
        &mut vec2s!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).xyz_mut(),
        &mut vec3s!(0.0f32, 1.0f32, 2.0f32)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).xyzw_mut(),
        &mut vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)
    );

    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).x_yz_mut(),
        (&mut 0.0f32, &mut vec2s!(1.0f32, 2.0f32))
    );
}

#[test]
fn test_vec4s_fold() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f32 + 1.0f32 + 2.0f32 + 3.0f32
    );
}

#[test]
fn test_vec4s_reduce() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).reduce(|acc, x| acc + x),
        0.0f32 + 1.0f32 + 2.0f32 + 3.0f32
    );
}

#[test]
fn test_vec4s_eq_mask() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).eq_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).eq_mask(vec4s!(0.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4s!(true, false, true, true),
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).eq_mask(vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(f32::NAN, f32::NAN, f32::NAN, f32::NAN).eq_mask(vec4s!(
            f32::NAN,
            f32::NAN,
            f32::NAN,
            f32::NAN
        )),
        vec4s!(false, false, false, false)
    );
}

#[test]
fn test_vec4s_ne_mask() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ne_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ne_mask(vec4s!(0.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4s!(false, true, false, false),
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ne_mask(vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(f32::NAN, f32::NAN, f32::NAN, f32::NAN).ne_mask(vec4s!(
            f32::NAN,
            f32::NAN,
            f32::NAN,
            f32::NAN
        )),
        vec4s!(true, true, true, true)
    );
}

#[test]
fn test_vec4s_lt_mask() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).lt_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).lt_mask(vec4s!(1.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4s!(true, false, false, false),
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).lt_mask(vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32).lt_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(false, false, false, false)
    );
}

#[test]
fn test_vec4s_gt_mask() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).gt_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).gt_mask(vec4s!(1.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4s!(false, true, false, false),
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).gt_mask(vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32).gt_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(true, true, true, true)
    );
}

#[test]
fn test_vec4s_le_mask() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).le_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).le_mask(vec4s!(1.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4s!(true, false, true, true),
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).le_mask(vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32).le_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(false, false, false, false)
    );
}

#[test]
fn test_vec4s_ge_mask() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ge_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ge_mask(vec4s!(1.0f32, 0.0f32, 2.0f32, 3.0f32)),
        vec4s!(false, true, true, true),
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32).ge_mask(vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32).ge_mask(vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        vec4s!(true, true, true, true)
    );
}

#[test]
fn test_vec4s_eq() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32) == vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32),
        true
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32) == vec4s!(0.0f32, 0.0f32, 2.0f32, 3.0f32),
        false
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32) == vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32),
        false
    );
}

#[test]
fn test_vec4s_ne() {
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32) != vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32),
        false
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32) != vec4s!(0.0f32, 0.0f32, 2.0f32, 3.0f32),
        true
    );
    assert_eq!(
        vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32) != vec4s!(4.0f32, 5.0f32, 6.0f32, 7.0f32),
        true
    );
}

#[test]
fn test_vec4s_debug() {
    assert_eq!(
        format!("{:?}", vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        "(0.0, 1.0, 2.0, 3.0)"
    );
}

#[test]
fn test_vec4s_display() {
    assert_eq!(
        format!("{}", vec4s!(0.0f32, 1.0f32, 2.0f32, 3.0f32)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4s_const_from_array() {
    assert_eq!(
        Vec4S::<f32>::const_from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32]),
        Vec4S::from_array([0.0f32, 1.0f32, 2.0f32, 3.0f32])
    );
}

#[test]
fn test_vec4s_add() {
    assert_eq!(
        vec4s!(0.0f32, 1.3f32, 2.6f32, 3.9000000000000004f32)
            + vec4s!(
                21.6f32,
                27.0f32,
                32.400000000000006f32,
                37.800000000000004f32
            ),
        vec4s!(21.6f32, 28.3f32, 35.00000000000001f32, 41.7f32)
    );
}
