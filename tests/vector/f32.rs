// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_nonsimd_f32_vec_layout() {
    assert_eq!(size_of::<Vec2S<f32>>(), size_of::<f32>() * 2);
    assert_eq!(size_of::<Vec3S<f32>>(), size_of::<f32>() * 3);
    assert_eq!(size_of::<Vec4S<f32>>(), size_of::<f32>() * 4);

    assert_eq!(align_of::<Vec2S<f32>>(), align_of::<f32>());
    assert_eq!(align_of::<Vec3S<f32>>(), align_of::<f32>());
    assert_eq!(align_of::<Vec4S<f32>>(), align_of::<f32>());
}

#[test]
fn test_simd_f32_vec_constructors() {
    assert_eq!(
        Vec2::from_array([1.0f32, 2.0f32]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3::from_array([1.0f32, 2.0f32, 3.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4::from_array([1.0f32, 2.0f32, 3.0f32, 4.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(Vec2::splat(1.0f32).as_array(), [1.0f32; 2]);
    assert_eq!(Vec3::splat(1.0f32).as_array(), [1.0f32; 3]);
    assert_eq!(Vec4::splat(1.0f32).as_array(), [1.0f32; 4]);

    assert_eq!(
        Vec2::from_fn(|i| [1.0f32, 2.0f32][i]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3::from_fn(|i| [1.0f32, 2.0f32, 3.0f32][i]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1.0f32, 2.0f32, 3.0f32, 4.0f32][i]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(
        Vec2::const_from_array([1.0f32, 2.0f32]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3::const_from_array([1.0f32, 2.0f32, 3.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4::const_from_array([1.0f32, 2.0f32, 3.0f32, 4.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).as_array(), [1.0f32, 2.0f32]);
    assert_eq!(vec2!(vec2!(1.0f32, 2.0f32)).as_array(), [1.0f32, 2.0f32]);
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec3!(1.0f32, vec2!(2.0f32, 3.0f32)).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
    assert_eq!(
        vec4!(1.0f32, vec2!(2.0f32, 3.0f32), 4.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
    assert_eq!(
        vec4!(
            1.0f32,
            vec2!(2.0f32, 3.0f32),
            Vector::<1, f32, Simd>::from_array([4.0f32])
        )
        .as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
}

#[test]
fn test_nonsimd_f32_vec_constructors() {
    assert_eq!(
        Vec2S::from_array([1.0f32, 2.0f32]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3S::from_array([1.0f32, 2.0f32, 3.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4S::from_array([1.0f32, 2.0f32, 3.0f32, 4.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(Vec2S::splat(1.0f32).as_array(), [1.0f32; 2]);
    assert_eq!(Vec3S::splat(1.0f32).as_array(), [1.0f32; 3]);
    assert_eq!(Vec4S::splat(1.0f32).as_array(), [1.0f32; 4]);

    assert_eq!(
        Vec2S::from_fn(|i| [1.0f32, 2.0f32][i]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3S::from_fn(|i| [1.0f32, 2.0f32, 3.0f32][i]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1.0f32, 2.0f32, 3.0f32, 4.0f32][i]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(
        Vec2S::const_from_array([1.0f32, 2.0f32]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3S::const_from_array([1.0f32, 2.0f32, 3.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4S::const_from_array([1.0f32, 2.0f32, 3.0f32, 4.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).as_array(), [1.0f32, 2.0f32]);
    assert_eq!(vec2s!(vec2s!(1.0f32, 2.0f32)).as_array(), [1.0f32, 2.0f32]);
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec3s!(1.0f32, vec2s!(2.0f32, 3.0f32)).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
    assert_eq!(
        vec4s!(1.0f32, vec2s!(2.0f32, 3.0f32), 4.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
    assert_eq!(
        vec4s!(
            1.0f32,
            vec2s!(2.0f32, 3.0f32),
            Vector::<1, f32, NonSimd>::from_array([4.0f32])
        )
        .as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
}
