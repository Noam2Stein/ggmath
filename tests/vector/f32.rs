// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_simd_f32_vec() {
    assert_eq!(
        Vec2::from_array([1.0f32, 2.0f32]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3::from_array([1.0f32, 2.0f32, 3.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4::from_array([1.0f32, 2.0f32, 3.0f32, 4.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(Vec2::splat(1.0f32).as_array(), [1.0f32; 2]);
    assert_eq!(Vec3::splat(1.0f32).as_array(), [1.0f32; 3]);
    assert_eq!(Vec4::splat(1.0f32).as_array(), [1.0f32; 4]);

    assert_eq!(
        Vec2::from_fn(|i| [1.0f32, 2.0f32][i]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3::from_fn(|i| [1.0f32, 2.0f32, 3.0f32][i]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1.0f32, 2.0f32, 3.0f32, 4.0f32][i]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(
        Vec2::const_from_array([1.0f32, 2.0f32]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3::const_from_array([1.0f32, 2.0f32, 3.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4::const_from_array([1.0f32, 2.0f32, 3.0f32, 4.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).as_array(), [1.0f32, 2.0f32]);
    assert_eq!(vec2!(vec2!(1.0f32, 2.0f32)).as_array(), [1.0f32, 2.0f32]);
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec3!(1.0f32, vec2!(2.0f32, 3.0f32)).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
    assert_eq!(
        vec4!(1.0f32, vec2!(2.0f32, 3.0f32), 4.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
    assert_eq!(
        vec4!(
            1.0f32,
            vec2!(2.0f32, 3.0f32),
            Vector::<1, f32, Simd>::from_array([4.0f32])
        )
        .as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).as_array_ref(), &[1.0f32, 2.0f32]);
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).as_array_ref(),
        &[1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_array_ref(),
        &[1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).as_mut_array(), &mut [1.0f32, 2.0f32]);
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).as_mut_array(),
        &mut [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_mut_array(),
        &mut [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).as_simd(), vec2!(1.0f32, 2.0f32));
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).as_simd(),
        vec3!(1.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_simd(),
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).as_nonsimd(), vec2s!(1.0f32, 2.0f32));
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).as_nonsimd(),
        vec3s!(1.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_nonsimd(),
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).len(), 2);
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).len(), 3);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).len(), 4);

    assert_eq!(vec2!(1.0f32, 2.0f32).is_simd(), true);
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).is_simd(), true);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).is_simd(), true);

    assert_eq!(vec2!(1.0f32, 2.0f32).get(0), Some(1.0f32));
    assert_eq!(vec2!(1.0f32, 2.0f32).get(1), Some(2.0f32));
    assert_eq!(vec2!(1.0f32, 2.0f32).get(2), None);
    assert_eq!(vec2!(1.0f32, 2.0f32).get(3), None);

    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get(0), Some(1.0f32));
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get(1), Some(2.0f32));
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get(2), Some(3.0f32));
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get(3), None);
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get(4), None);

    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(0), Some(1.0f32));
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(1), Some(2.0f32));
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(2), Some(3.0f32));
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(3), Some(4.0f32));
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(4), None);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(5), None);

    assert_eq!(vec2!(1.0f32, 2.0f32).get_mut(0), Some(&mut 1.0f32));
    assert_eq!(vec2!(1.0f32, 2.0f32).get_mut(1), Some(&mut 2.0f32));
    assert_eq!(vec2!(1.0f32, 2.0f32).get_mut(2), None);
    assert_eq!(vec2!(1.0f32, 2.0f32).get_mut(3), None);

    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get_mut(0), Some(&mut 1.0f32));
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get_mut(1), Some(&mut 2.0f32));
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get_mut(2), Some(&mut 3.0f32));
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get_mut(3), None);
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get_mut(4), None);

    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(0),
        Some(&mut 1.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(1),
        Some(&mut 2.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(2),
        Some(&mut 3.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(3),
        Some(&mut 4.0f32)
    );
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(4), None);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(5), None);

    unsafe {
        assert_eq!(vec2!(1.0f32, 2.0f32).get_unchecked(0), 1.0f32);
        assert_eq!(vec2!(1.0f32, 2.0f32).get_unchecked(1), 2.0f32);

        assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get_unchecked(0), 1.0f32);
        assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get_unchecked(1), 2.0f32);
        assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).get_unchecked(2), 3.0f32);

        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked(0),
            1.0f32
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked(1),
            2.0f32
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked(2),
            3.0f32
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked(3),
            4.0f32
        );

        assert_eq!(vec2!(1.0f32, 2.0f32).get_unchecked_mut(0), &mut 1.0f32);
        assert_eq!(vec2!(1.0f32, 2.0f32).get_unchecked_mut(1), &mut 2.0f32);

        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).get_unchecked_mut(0),
            &mut 1.0f32
        );
        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).get_unchecked_mut(1),
            &mut 2.0f32
        );
        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).get_unchecked_mut(2),
            &mut 3.0f32
        );

        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked_mut(0),
            &mut 1.0f32
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked_mut(1),
            &mut 2.0f32
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked_mut(2),
            &mut 3.0f32
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked_mut(3),
            &mut 4.0f32
        );
    }

    assert_eq!(
        vec2!(1.0f32, 2.0f32).iter().collect::<Vec<f32>>(),
        vec![1.0f32, 2.0f32]
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).iter().collect::<Vec<f32>>(),
        vec![1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
            .iter()
            .collect::<Vec<f32>>(),
        vec![1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(
        vec2!(1.0f32, 2.0f32).iter_mut().collect::<Vec<&mut f32>>(),
        vec![&mut 1.0f32, &mut 2.0f32]
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32)
            .iter_mut()
            .collect::<Vec<&mut f32>>(),
        vec![&mut 1.0f32, &mut 2.0f32, &mut 3.0f32]
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
            .iter_mut()
            .collect::<Vec<&mut f32>>(),
        vec![&mut 1.0f32, &mut 2.0f32, &mut 3.0f32, &mut 4.0f32]
    );

    assert_eq!(
        vec2!(1.0f32, 2.0f32).map(|x| x == 2.0f32),
        vec2!(false, true)
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).map(|x| x == 2.0f32),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).map(|x| x == 2.0f32),
        vec4!(false, true, false, false)
    );

    assert_eq!(
        vec2!(1.0f32, 2.0f32).zip(vec2!(2.0f32, 1.0f32)),
        vec2!((1.0f32, 2.0f32), (2.0f32, 1.0f32))
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).zip(vec3!(2.0f32, 3.0f32, 1.0f32)),
        vec3!((1.0f32, 2.0f32), (2.0f32, 3.0f32), (3.0f32, 1.0f32))
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).zip(vec4!(2.0f32, 3.0f32, 4.0f32, 1.0f32)),
        vec4!(
            (1.0f32, 2.0f32),
            (2.0f32, 3.0f32),
            (3.0f32, 4.0f32),
            (4.0f32, 1.0f32)
        )
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).reverse(), vec2!(2.0f32, 1.0f32));
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).reverse(),
        vec3!(3.0f32, 2.0f32, 1.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).reverse(),
        vec4!(4.0f32, 3.0f32, 2.0f32, 1.0f32)
    );

    assert_eq!(
        vec2!(1.0f32, 2.0f32).get_const_vec2::<0, 1>(),
        vec2!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec2!(1.0f32, 2.0f32).get_const_vec2::<1, 0>(),
        vec2!(2.0f32, 1.0f32)
    );
    assert_eq!(
        vec2!(1.0f32, 2.0f32).get_const_vec2::<1, 1>(),
        vec2!(2.0f32, 2.0f32)
    );

    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec2::<0, 1>(),
        vec2!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec2::<0, 2>(),
        vec2!(1.0f32, 3.0f32)
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec2::<2, 1>(),
        vec2!(3.0f32, 2.0f32)
    );

    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec2::<0, 1>(),
        vec2!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec2::<1, 3>(),
        vec2!(2.0f32, 4.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec2::<3, 1>(),
        vec2!(4.0f32, 2.0f32)
    );

    assert_eq!(
        vec2!(1.0f32, 2.0f32).get_const_vec3::<0, 1, 1>(),
        vec3!(1.0f32, 2.0f32, 2.0f32)
    );
    assert_eq!(
        vec2!(1.0f32, 2.0f32).get_const_vec3::<1, 0, 1>(),
        vec3!(2.0f32, 1.0f32, 2.0f32)
    );

    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec3::<0, 1, 2>(),
        vec3!(1.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec3::<1, 0, 2>(),
        vec3!(2.0f32, 1.0f32, 3.0f32)
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec3::<2, 1, 0>(),
        vec3!(3.0f32, 2.0f32, 1.0f32)
    );

    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec3::<0, 1, 2>(),
        vec3!(1.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec3::<1, 0, 2>(),
        vec3!(2.0f32, 1.0f32, 3.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec3::<2, 1, 0>(),
        vec3!(3.0f32, 2.0f32, 1.0f32)
    );

    assert_eq!(
        vec2!(1.0f32, 2.0f32).get_const_vec4::<0, 1, 1, 0>(),
        vec4!(1.0f32, 2.0f32, 2.0f32, 1.0f32)
    );
    assert_eq!(
        vec2!(1.0f32, 2.0f32).get_const_vec4::<1, 0, 1, 0>(),
        vec4!(2.0f32, 1.0f32, 2.0f32, 1.0f32)
    );
    assert_eq!(
        vec2!(1.0f32, 2.0f32).get_const_vec4::<1, 1, 0, 0>(),
        vec4!(2.0f32, 2.0f32, 1.0f32, 1.0f32)
    );

    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec4::<0, 1, 2, 0>(),
        vec4!(1.0f32, 2.0f32, 3.0f32, 1.0f32)
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec4::<1, 0, 2, 0>(),
        vec4!(2.0f32, 1.0f32, 3.0f32, 1.0f32)
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32).get_const_vec4::<2, 1, 0, 0>(),
        vec4!(3.0f32, 2.0f32, 1.0f32, 1.0f32)
    );

    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec4::<0, 1, 2, 3>(),
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec4::<1, 0, 2, 3>(),
        vec4!(2.0f32, 1.0f32, 3.0f32, 4.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec4::<2, 1, 0, 3>(),
        vec4!(3.0f32, 2.0f32, 1.0f32, 4.0f32)
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec4::<3, 1, 2, 0>(),
        vec4!(4.0f32, 2.0f32, 3.0f32, 1.0f32)
    );

    assert_eq!(vec2!(1.0f32, 2.0f32)[0], 1.0f32);
    assert_eq!(vec2!(1.0f32, 2.0f32)[1], 2.0f32);

    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32)[0], 1.0f32);
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32)[1], 2.0f32);
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32)[2], 3.0f32);

    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[0], 1.0f32);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[1], 2.0f32);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[2], 3.0f32);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[3], 4.0f32);

    assert_eq!(&mut vec2!(1.0f32, 2.0f32)[0], &mut 1.0f32);
    assert_eq!(&mut vec2!(1.0f32, 2.0f32)[1], &mut 2.0f32);

    assert_eq!(&mut vec3!(1.0f32, 2.0f32, 3.0f32)[0], &mut 1.0f32);
    assert_eq!(&mut vec3!(1.0f32, 2.0f32, 3.0f32)[1], &mut 2.0f32);
    assert_eq!(&mut vec3!(1.0f32, 2.0f32, 3.0f32)[2], &mut 3.0f32);

    assert_eq!(&mut vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[0], &mut 1.0f32);
    assert_eq!(&mut vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[1], &mut 2.0f32);
    assert_eq!(&mut vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[2], &mut 3.0f32);
    assert_eq!(&mut vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[3], &mut 4.0f32);

    assert_eq!(vec2!(1.0f32, 2.0f32) == vec2!(1.0f32, 2.0f32), true);
    assert_eq!(vec2!(1.0f32, 2.0f32) == vec2!(2.0f32, 1.0f32), false);
    assert_eq!(vec2!(1.0f32, 2.0f32) == vec2!(2.0f32, 2.0f32), false);

    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32) == vec3!(1.0f32, 2.0f32, 3.0f32),
        true
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32) == vec3!(4.0f32, 3.0f32, 2.0f32),
        false
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32) == vec3!(2.0f32, 2.0f32, 3.0f32),
        false
    );

    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32) == vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32),
        true
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32) == vec4!(4.0f32, 3.0f32, 2.0f32, 1.0f32),
        false
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32) == vec4!(2.0f32, 2.0f32, 2.0f32, 4.0f32),
        false
    );

    assert_eq!(vec2!(1.0f32, 2.0f32) != vec2!(1.0f32, 2.0f32), false);
    assert_eq!(vec2!(1.0f32, 2.0f32) != vec2!(2.0f32, 1.0f32), true);
    assert_eq!(vec2!(1.0f32, 2.0f32) != vec2!(2.0f32, 2.0f32), true);

    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32) != vec3!(1.0f32, 2.0f32, 3.0f32),
        false
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32) != vec3!(4.0f32, 3.0f32, 2.0f32),
        true
    );
    assert_eq!(
        vec3!(1.0f32, 2.0f32, 3.0f32) != vec3!(2.0f32, 2.0f32, 3.0f32),
        true
    );

    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32) != vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32),
        false
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32) != vec4!(4.0f32, 3.0f32, 2.0f32, 1.0f32),
        true
    );
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32) != vec4!(2.0f32, 2.0f32, 2.0f32, 4.0f32),
        true
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).to_string(), "(1, 2)");
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).to_string(), "(1, 2, 3)");
    assert_eq!(
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).to_string(),
        "(1, 2, 3, 4)"
    );

    assert_eq!(format!("{:?}", vec2!(1.0f32, 2.0f32)), "(1.0, 2.0)");
    assert_eq!(
        format!("{:?}", vec3!(1.0f32, 2.0f32, 3.0f32)),
        "(1.0, 2.0, 3.0)"
    );
    assert_eq!(
        format!("{:?}", vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)),
        "(1.0, 2.0, 3.0, 4.0)"
    );

    assert_eq!(vec2!(1.0f32, 2.0f32).x, 1.0f32);
    assert_eq!(vec2!(1.0f32, 2.0f32).y, 2.0f32);

    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).x, 1.0f32);
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).y, 2.0f32);
    assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).z, 3.0f32);

    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).x, 1.0f32);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).y, 2.0f32);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).z, 3.0f32);
    assert_eq!(vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).w, 4.0f32);

    assert_eq!(&mut vec2!(1.0f32, 2.0f32).x, &mut 1.0f32);
    assert_eq!(&mut vec2!(1.0f32, 2.0f32).y, &mut 2.0f32);

    assert_eq!(&mut vec3!(1.0f32, 2.0f32, 3.0f32).x, &mut 1.0f32);
    assert_eq!(&mut vec3!(1.0f32, 2.0f32, 3.0f32).y, &mut 2.0f32);
    assert_eq!(&mut vec3!(1.0f32, 2.0f32, 3.0f32).z, &mut 3.0f32);

    assert_eq!(&mut vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).x, &mut 1.0f32);
    assert_eq!(&mut vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).y, &mut 2.0f32);
    assert_eq!(&mut vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).z, &mut 3.0f32);
    assert_eq!(&mut vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).w, &mut 4.0f32);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2!(1.0f32, 2.0f32).xy(), vec2!(1.0f32, 2.0f32));
        assert_eq!(vec2!(1.0f32, 2.0f32).yx(), vec2!(2.0f32, 1.0f32));
        assert_eq!(vec2!(1.0f32, 2.0f32).yy(), vec2!(2.0f32, 2.0f32));

        assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).xy(), vec2!(1.0f32, 2.0f32));
        assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).xz(), vec2!(1.0f32, 3.0f32));
        assert_eq!(vec3!(1.0f32, 2.0f32, 3.0f32).zy(), vec2!(3.0f32, 2.0f32));

        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).xy(),
            vec2!(1.0f32, 2.0f32)
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).yw(),
            vec2!(2.0f32, 4.0f32)
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).wy(),
            vec2!(4.0f32, 2.0f32)
        );

        assert_eq!(vec2!(1.0f32, 2.0f32).xyy(), vec3!(1.0f32, 2.0f32, 2.0f32));
        assert_eq!(vec2!(1.0f32, 2.0f32).yxy(), vec3!(2.0f32, 1.0f32, 2.0f32));

        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).xyz(),
            vec3!(1.0f32, 2.0f32, 3.0f32)
        );
        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).yxz(),
            vec3!(2.0f32, 1.0f32, 3.0f32)
        );
        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).zyx(),
            vec3!(3.0f32, 2.0f32, 1.0f32)
        );

        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).xyz(),
            vec3!(1.0f32, 2.0f32, 3.0f32)
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).yxz(),
            vec3!(2.0f32, 1.0f32, 3.0f32)
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).zyx(),
            vec3!(3.0f32, 2.0f32, 1.0f32)
        );

        assert_eq!(
            vec2!(1.0f32, 2.0f32).xyyx(),
            vec4!(1.0f32, 2.0f32, 2.0f32, 1.0f32)
        );
        assert_eq!(
            vec2!(1.0f32, 2.0f32).yxyx(),
            vec4!(2.0f32, 1.0f32, 2.0f32, 1.0f32)
        );
        assert_eq!(
            vec2!(1.0f32, 2.0f32).yyxx(),
            vec4!(2.0f32, 2.0f32, 1.0f32, 1.0f32)
        );

        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).xyzx(),
            vec4!(1.0f32, 2.0f32, 3.0f32, 1.0f32)
        );
        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).yxzx(),
            vec4!(2.0f32, 1.0f32, 3.0f32, 1.0f32)
        );
        assert_eq!(
            vec3!(1.0f32, 2.0f32, 3.0f32).zyxx(),
            vec4!(3.0f32, 2.0f32, 1.0f32, 1.0f32)
        );

        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).xyzw(),
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).yxzw(),
            vec4!(2.0f32, 1.0f32, 3.0f32, 4.0f32)
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).zyxw(),
            vec4!(3.0f32, 2.0f32, 1.0f32, 4.0f32)
        );
        assert_eq!(
            vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32).wyzx(),
            vec4!(4.0f32, 2.0f32, 3.0f32, 1.0f32)
        );
    }
}

#[test]
#[should_panic]
fn test_fvec2_index_panic() {
    vec2!(1.0f32, 2.0f32)[2];
}

#[test]
#[should_panic]
fn test_fvec3_index_panic() {
    vec3!(1.0f32, 2.0f32, 3.0f32)[3];
}

#[test]
#[should_panic]
fn test_fvec4_index_panic() {
    vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[4];
}

#[test]
fn test_nonsimd_f32_vec() {
    assert_eq!(size_of::<Vec2S<f32>>(), size_of::<f32>() * 2);
    assert_eq!(size_of::<Vec3S<f32>>(), size_of::<f32>() * 3);
    assert_eq!(size_of::<Vec4S<f32>>(), size_of::<f32>() * 4);

    assert_eq!(align_of::<Vec2S<f32>>(), align_of::<f32>());
    assert_eq!(align_of::<Vec3S<f32>>(), align_of::<f32>());
    assert_eq!(align_of::<Vec4S<f32>>(), align_of::<f32>());

    assert_eq!(
        Vec2S::from_array([1.0f32, 2.0f32]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3S::from_array([1.0f32, 2.0f32, 3.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4S::from_array([1.0f32, 2.0f32, 3.0f32, 4.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(Vec2S::splat(1.0f32).as_array(), [1.0f32; 2]);
    assert_eq!(Vec3S::splat(1.0f32).as_array(), [1.0f32; 3]);
    assert_eq!(Vec4S::splat(1.0f32).as_array(), [1.0f32; 4]);

    assert_eq!(
        Vec2S::from_fn(|i| [1.0f32, 2.0f32][i]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3S::from_fn(|i| [1.0f32, 2.0f32, 3.0f32][i]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1.0f32, 2.0f32, 3.0f32, 4.0f32][i]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(
        Vec2S::const_from_array([1.0f32, 2.0f32]).as_array(),
        [1.0f32, 2.0f32]
    );
    assert_eq!(
        Vec3S::const_from_array([1.0f32, 2.0f32, 3.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        Vec4S::const_from_array([1.0f32, 2.0f32, 3.0f32, 4.0f32]).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).as_array(), [1.0f32, 2.0f32]);
    assert_eq!(vec2s!(vec2s!(1.0f32, 2.0f32)).as_array(), [1.0f32, 2.0f32]);
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec3s!(1.0f32, vec2s!(2.0f32, 3.0f32)).as_array(),
        [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
    assert_eq!(
        vec4s!(1.0f32, vec2s!(2.0f32, 3.0f32), 4.0f32).as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );
    assert_eq!(
        vec4s!(
            1.0f32,
            vec2s!(2.0f32, 3.0f32),
            Vector::<1, f32, NonSimd>::from_array([4.0f32])
        )
        .as_array(),
        [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).as_array_ref(), &[1.0f32, 2.0f32]);
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).as_array_ref(),
        &[1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_array_ref(),
        &[1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).as_mut_array(), &mut [1.0f32, 2.0f32]);
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).as_mut_array(),
        &mut [1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_mut_array(),
        &mut [1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).as_simd(), vec2!(1.0f32, 2.0f32));
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).as_simd(),
        vec3!(1.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_simd(),
        vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).as_nonsimd(), vec2s!(1.0f32, 2.0f32));
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).as_nonsimd(),
        vec3s!(1.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).as_nonsimd(),
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).len(), 2);
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).len(), 3);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).len(), 4);

    assert_eq!(vec2s!(1.0f32, 2.0f32).is_simd(), false);
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).is_simd(), false);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).is_simd(), false);

    assert_eq!(vec2s!(1.0f32, 2.0f32).get(0), Some(1.0f32));
    assert_eq!(vec2s!(1.0f32, 2.0f32).get(1), Some(2.0f32));
    assert_eq!(vec2s!(1.0f32, 2.0f32).get(2), None);
    assert_eq!(vec2s!(1.0f32, 2.0f32).get(3), None);

    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get(0), Some(1.0f32));
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get(1), Some(2.0f32));
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get(2), Some(3.0f32));
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get(3), None);
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get(4), None);

    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(0), Some(1.0f32));
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(1), Some(2.0f32));
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(2), Some(3.0f32));
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(3), Some(4.0f32));
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(4), None);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get(5), None);

    assert_eq!(vec2s!(1.0f32, 2.0f32).get_mut(0), Some(&mut 1.0f32));
    assert_eq!(vec2s!(1.0f32, 2.0f32).get_mut(1), Some(&mut 2.0f32));
    assert_eq!(vec2s!(1.0f32, 2.0f32).get_mut(2), None);
    assert_eq!(vec2s!(1.0f32, 2.0f32).get_mut(3), None);

    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get_mut(0), Some(&mut 1.0f32));
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get_mut(1), Some(&mut 2.0f32));
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get_mut(2), Some(&mut 3.0f32));
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get_mut(3), None);
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get_mut(4), None);

    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(0),
        Some(&mut 1.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(1),
        Some(&mut 2.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(2),
        Some(&mut 3.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(3),
        Some(&mut 4.0f32)
    );
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(4), None);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_mut(5), None);

    unsafe {
        assert_eq!(vec2s!(1.0f32, 2.0f32).get_unchecked(0), 1.0f32);
        assert_eq!(vec2s!(1.0f32, 2.0f32).get_unchecked(1), 2.0f32);

        assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get_unchecked(0), 1.0f32);
        assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get_unchecked(1), 2.0f32);
        assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).get_unchecked(2), 3.0f32);

        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked(0),
            1.0f32
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked(1),
            2.0f32
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked(2),
            3.0f32
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked(3),
            4.0f32
        );

        assert_eq!(vec2s!(1.0f32, 2.0f32).get_unchecked_mut(0), &mut 1.0f32);
        assert_eq!(vec2s!(1.0f32, 2.0f32).get_unchecked_mut(1), &mut 2.0f32);

        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).get_unchecked_mut(0),
            &mut 1.0f32
        );
        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).get_unchecked_mut(1),
            &mut 2.0f32
        );
        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).get_unchecked_mut(2),
            &mut 3.0f32
        );

        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked_mut(0),
            &mut 1.0f32
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked_mut(1),
            &mut 2.0f32
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked_mut(2),
            &mut 3.0f32
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_unchecked_mut(3),
            &mut 4.0f32
        );
    }

    assert_eq!(
        vec2s!(1.0f32, 2.0f32).iter().collect::<Vec<f32>>(),
        vec![1.0f32, 2.0f32]
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).iter().collect::<Vec<f32>>(),
        vec![1.0f32, 2.0f32, 3.0f32]
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
            .iter()
            .collect::<Vec<f32>>(),
        vec![1.0f32, 2.0f32, 3.0f32, 4.0f32]
    );

    assert_eq!(
        vec2s!(1.0f32, 2.0f32).iter_mut().collect::<Vec<&mut f32>>(),
        vec![&mut 1.0f32, &mut 2.0f32]
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32)
            .iter_mut()
            .collect::<Vec<&mut f32>>(),
        vec![&mut 1.0f32, &mut 2.0f32, &mut 3.0f32]
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
            .iter_mut()
            .collect::<Vec<&mut f32>>(),
        vec![&mut 1.0f32, &mut 2.0f32, &mut 3.0f32, &mut 4.0f32]
    );

    assert_eq!(
        vec2s!(1.0f32, 2.0f32).map(|x| x == 2.0f32),
        vec2s!(false, true)
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).map(|x| x == 2.0f32),
        vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).map(|x| x == 2.0f32),
        vec4s!(false, true, false, false)
    );

    assert_eq!(
        vec2s!(1.0f32, 2.0f32).zip(vec2s!(2.0f32, 1.0f32)),
        vec2s!((1.0f32, 2.0f32), (2.0f32, 1.0f32))
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).zip(vec3s!(2.0f32, 3.0f32, 1.0f32)),
        vec3s!((1.0f32, 2.0f32), (2.0f32, 3.0f32), (3.0f32, 1.0f32))
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).zip(vec4s!(2.0f32, 3.0f32, 4.0f32, 1.0f32)),
        vec4s!(
            (1.0f32, 2.0f32),
            (2.0f32, 3.0f32),
            (3.0f32, 4.0f32),
            (4.0f32, 1.0f32)
        )
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).reverse(), vec2s!(2.0f32, 1.0f32));
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).reverse(),
        vec3s!(3.0f32, 2.0f32, 1.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).reverse(),
        vec4s!(4.0f32, 3.0f32, 2.0f32, 1.0f32)
    );

    assert_eq!(
        vec2s!(1.0f32, 2.0f32).get_const_vec2::<0, 1>(),
        vec2s!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec2s!(1.0f32, 2.0f32).get_const_vec2::<1, 0>(),
        vec2s!(2.0f32, 1.0f32)
    );
    assert_eq!(
        vec2s!(1.0f32, 2.0f32).get_const_vec2::<1, 1>(),
        vec2s!(2.0f32, 2.0f32)
    );

    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec2::<0, 1>(),
        vec2s!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec2::<0, 2>(),
        vec2s!(1.0f32, 3.0f32)
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec2::<2, 1>(),
        vec2s!(3.0f32, 2.0f32)
    );

    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec2::<0, 1>(),
        vec2s!(1.0f32, 2.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec2::<1, 3>(),
        vec2s!(2.0f32, 4.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec2::<3, 1>(),
        vec2s!(4.0f32, 2.0f32)
    );

    assert_eq!(
        vec2s!(1.0f32, 2.0f32).get_const_vec3::<0, 1, 1>(),
        vec3s!(1.0f32, 2.0f32, 2.0f32)
    );
    assert_eq!(
        vec2s!(1.0f32, 2.0f32).get_const_vec3::<1, 0, 1>(),
        vec3s!(2.0f32, 1.0f32, 2.0f32)
    );

    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec3::<0, 1, 2>(),
        vec3s!(1.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec3::<1, 0, 2>(),
        vec3s!(2.0f32, 1.0f32, 3.0f32)
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec3::<2, 1, 0>(),
        vec3s!(3.0f32, 2.0f32, 1.0f32)
    );

    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec3::<0, 1, 2>(),
        vec3s!(1.0f32, 2.0f32, 3.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec3::<1, 0, 2>(),
        vec3s!(2.0f32, 1.0f32, 3.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec3::<2, 1, 0>(),
        vec3s!(3.0f32, 2.0f32, 1.0f32)
    );

    assert_eq!(
        vec2s!(1.0f32, 2.0f32).get_const_vec4::<0, 1, 1, 0>(),
        vec4s!(1.0f32, 2.0f32, 2.0f32, 1.0f32)
    );
    assert_eq!(
        vec2s!(1.0f32, 2.0f32).get_const_vec4::<1, 0, 1, 0>(),
        vec4s!(2.0f32, 1.0f32, 2.0f32, 1.0f32)
    );
    assert_eq!(
        vec2s!(1.0f32, 2.0f32).get_const_vec4::<1, 1, 0, 0>(),
        vec4s!(2.0f32, 2.0f32, 1.0f32, 1.0f32)
    );

    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec4::<0, 1, 2, 0>(),
        vec4s!(1.0f32, 2.0f32, 3.0f32, 1.0f32)
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec4::<1, 0, 2, 0>(),
        vec4s!(2.0f32, 1.0f32, 3.0f32, 1.0f32)
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32).get_const_vec4::<2, 1, 0, 0>(),
        vec4s!(3.0f32, 2.0f32, 1.0f32, 1.0f32)
    );

    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec4::<0, 1, 2, 3>(),
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec4::<1, 0, 2, 3>(),
        vec4s!(2.0f32, 1.0f32, 3.0f32, 4.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec4::<2, 1, 0, 3>(),
        vec4s!(3.0f32, 2.0f32, 1.0f32, 4.0f32)
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).get_const_vec4::<3, 1, 2, 0>(),
        vec4s!(4.0f32, 2.0f32, 3.0f32, 1.0f32)
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32)[0], 1.0f32);
    assert_eq!(vec2s!(1.0f32, 2.0f32)[1], 2.0f32);

    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32)[0], 1.0f32);
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32)[1], 2.0f32);
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32)[2], 3.0f32);

    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[0], 1.0f32);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[1], 2.0f32);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[2], 3.0f32);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[3], 4.0f32);

    assert_eq!(&mut vec2s!(1.0f32, 2.0f32)[0], &mut 1.0f32);
    assert_eq!(&mut vec2s!(1.0f32, 2.0f32)[1], &mut 2.0f32);

    assert_eq!(&mut vec3s!(1.0f32, 2.0f32, 3.0f32)[0], &mut 1.0f32);
    assert_eq!(&mut vec3s!(1.0f32, 2.0f32, 3.0f32)[1], &mut 2.0f32);
    assert_eq!(&mut vec3s!(1.0f32, 2.0f32, 3.0f32)[2], &mut 3.0f32);

    assert_eq!(&mut vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[0], &mut 1.0f32);
    assert_eq!(&mut vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[1], &mut 2.0f32);
    assert_eq!(&mut vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[2], &mut 3.0f32);
    assert_eq!(&mut vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[3], &mut 4.0f32);

    assert_eq!(vec2s!(1.0f32, 2.0f32) == vec2s!(1.0f32, 2.0f32), true);
    assert_eq!(vec2s!(1.0f32, 2.0f32) == vec2s!(2.0f32, 1.0f32), false);
    assert_eq!(vec2s!(1.0f32, 2.0f32) == vec2s!(2.0f32, 2.0f32), false);

    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32) == vec3s!(1.0f32, 2.0f32, 3.0f32),
        true
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32) == vec3s!(4.0f32, 3.0f32, 2.0f32),
        false
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32) == vec3s!(2.0f32, 2.0f32, 3.0f32),
        false
    );

    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32) == vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32),
        true
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32) == vec4s!(4.0f32, 3.0f32, 2.0f32, 1.0f32),
        false
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32) == vec4s!(2.0f32, 2.0f32, 2.0f32, 4.0f32),
        false
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32) != vec2s!(1.0f32, 2.0f32), false);
    assert_eq!(vec2s!(1.0f32, 2.0f32) != vec2s!(2.0f32, 1.0f32), true);
    assert_eq!(vec2s!(1.0f32, 2.0f32) != vec2s!(2.0f32, 2.0f32), true);

    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32) != vec3s!(1.0f32, 2.0f32, 3.0f32),
        false
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32) != vec3s!(4.0f32, 3.0f32, 2.0f32),
        true
    );
    assert_eq!(
        vec3s!(1.0f32, 2.0f32, 3.0f32) != vec3s!(2.0f32, 2.0f32, 3.0f32),
        true
    );

    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32) != vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32),
        false
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32) != vec4s!(4.0f32, 3.0f32, 2.0f32, 1.0f32),
        true
    );
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32) != vec4s!(2.0f32, 2.0f32, 2.0f32, 4.0f32),
        true
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).to_string(), "(1, 2)");
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).to_string(), "(1, 2, 3)");
    assert_eq!(
        vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).to_string(),
        "(1, 2, 3, 4)"
    );

    assert_eq!(format!("{:?}", vec2s!(1.0f32, 2.0f32)), "(1.0, 2.0)");
    assert_eq!(
        format!("{:?}", vec3s!(1.0f32, 2.0f32, 3.0f32)),
        "(1.0, 2.0, 3.0)"
    );
    assert_eq!(
        format!("{:?}", vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)),
        "(1.0, 2.0, 3.0, 4.0)"
    );

    assert_eq!(vec2s!(1.0f32, 2.0f32).x, 1.0f32);
    assert_eq!(vec2s!(1.0f32, 2.0f32).y, 2.0f32);

    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).x, 1.0f32);
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).y, 2.0f32);
    assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).z, 3.0f32);

    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).x, 1.0f32);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).y, 2.0f32);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).z, 3.0f32);
    assert_eq!(vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).w, 4.0f32);

    assert_eq!(&mut vec2s!(1.0f32, 2.0f32).x, &mut 1.0f32);
    assert_eq!(&mut vec2s!(1.0f32, 2.0f32).y, &mut 2.0f32);

    assert_eq!(&mut vec3s!(1.0f32, 2.0f32, 3.0f32).x, &mut 1.0f32);
    assert_eq!(&mut vec3s!(1.0f32, 2.0f32, 3.0f32).y, &mut 2.0f32);
    assert_eq!(&mut vec3s!(1.0f32, 2.0f32, 3.0f32).z, &mut 3.0f32);

    assert_eq!(&mut vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).x, &mut 1.0f32);
    assert_eq!(&mut vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).y, &mut 2.0f32);
    assert_eq!(&mut vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).z, &mut 3.0f32);
    assert_eq!(&mut vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).w, &mut 4.0f32);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2s!(1.0f32, 2.0f32).xy(), vec2s!(1.0f32, 2.0f32));
        assert_eq!(vec2s!(1.0f32, 2.0f32).yx(), vec2s!(2.0f32, 1.0f32));
        assert_eq!(vec2s!(1.0f32, 2.0f32).yy(), vec2s!(2.0f32, 2.0f32));

        assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).xy(), vec2s!(1.0f32, 2.0f32));
        assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).xz(), vec2s!(1.0f32, 3.0f32));
        assert_eq!(vec3s!(1.0f32, 2.0f32, 3.0f32).zy(), vec2s!(3.0f32, 2.0f32));

        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).xy(),
            vec2s!(1.0f32, 2.0f32)
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).yw(),
            vec2s!(2.0f32, 4.0f32)
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).wy(),
            vec2s!(4.0f32, 2.0f32)
        );

        assert_eq!(vec2s!(1.0f32, 2.0f32).xyy(), vec3s!(1.0f32, 2.0f32, 2.0f32));
        assert_eq!(vec2s!(1.0f32, 2.0f32).yxy(), vec3s!(2.0f32, 1.0f32, 2.0f32));

        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).xyz(),
            vec3s!(1.0f32, 2.0f32, 3.0f32)
        );
        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).yxz(),
            vec3s!(2.0f32, 1.0f32, 3.0f32)
        );
        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).zyx(),
            vec3s!(3.0f32, 2.0f32, 1.0f32)
        );

        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).xyz(),
            vec3s!(1.0f32, 2.0f32, 3.0f32)
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).yxz(),
            vec3s!(2.0f32, 1.0f32, 3.0f32)
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).zyx(),
            vec3s!(3.0f32, 2.0f32, 1.0f32)
        );

        assert_eq!(
            vec2s!(1.0f32, 2.0f32).xyyx(),
            vec4s!(1.0f32, 2.0f32, 2.0f32, 1.0f32)
        );
        assert_eq!(
            vec2s!(1.0f32, 2.0f32).yxyx(),
            vec4s!(2.0f32, 1.0f32, 2.0f32, 1.0f32)
        );
        assert_eq!(
            vec2s!(1.0f32, 2.0f32).yyxx(),
            vec4s!(2.0f32, 2.0f32, 1.0f32, 1.0f32)
        );

        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).xyzx(),
            vec4s!(1.0f32, 2.0f32, 3.0f32, 1.0f32)
        );
        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).yxzx(),
            vec4s!(2.0f32, 1.0f32, 3.0f32, 1.0f32)
        );
        assert_eq!(
            vec3s!(1.0f32, 2.0f32, 3.0f32).zyxx(),
            vec4s!(3.0f32, 2.0f32, 1.0f32, 1.0f32)
        );

        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).xyzw(),
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32)
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).yxzw(),
            vec4s!(2.0f32, 1.0f32, 3.0f32, 4.0f32)
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).zyxw(),
            vec4s!(3.0f32, 2.0f32, 1.0f32, 4.0f32)
        );
        assert_eq!(
            vec4s!(1.0f32, 2.0f32, 3.0f32, 4.0f32).wyzx(),
            vec4s!(4.0f32, 2.0f32, 3.0f32, 1.0f32)
        );
    }
}

#[test]
#[should_panic]
fn test_fvec2s_index_panic() {
    vec2!(1.0f32, 2.0f32)[2];
}

#[test]
#[should_panic]
fn test_fvec3s_index_panic() {
    vec3!(1.0f32, 2.0f32, 3.0f32)[3];
}

#[test]
#[should_panic]
fn test_fvec4s_index_panic() {
    vec4!(1.0f32, 2.0f32, 3.0f32, 4.0f32)[4];
}
