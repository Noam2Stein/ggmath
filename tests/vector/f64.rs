// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<f64>>() == size_of::<[f64; 2]>());

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(0.0f64, 1.0f64).align(), vec2!(0.0f64, 1.0f64));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(0.0f64, 1.0f64).pack(), vec2p!(0.0f64, 1.0f64));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(
        Vec2::from_array([0.0f64, 1.0f64]).as_array(),
        [0.0f64, 1.0f64]
    );
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(0.0f64), vec2!(0.0f64, 0.0f64));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(0.0f64, 1.0f64).index(0), 0.0f64);
    assert_eq!(vec2!(0.0f64, 1.0f64).index(1), 1.0f64);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(0.0f64, 1.0f64).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(0.0f64, 1.0f64).get(0), Some(0.0f64));
    assert_eq!(vec2!(0.0f64, 1.0f64).get(1), Some(1.0f64));

    assert_eq!(vec2!(0.0f64, 1.0f64).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(0.0f64, 1.0f64).get_unchecked(0), 0.0f64);
        assert_eq!(vec2!(0.0f64, 1.0f64).get_unchecked(1), 1.0f64);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(0.0f64, 1.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec2!(50.0f64, 1.0f64));
    }
    {
        let mut vec = vec2!(0.0f64, 1.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec2!(0.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(0.0f64, 1.0f64);
    vec.set(2, 0.0f64);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(0.0f64, 1.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec2!(50.0f64, 1.0f64));
    }
    {
        let mut vec = vec2!(0.0f64, 1.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec2!(0.0f64, 50.0f64));
    }

    assert_eq!(
        vec2!(0.0f64, 1.0f64).try_set(2, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(0.0f64, 1.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec2!(50.0f64, 1.0f64));
        }
        {
            let mut vec = vec2!(0.0f64, 1.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec2!(0.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(0.0f64, 1.0f64).y(), 1.0f64);
    assert_eq!(vec2!(0.0f64, 1.0f64).yx(), vec2!(1.0f64, 0.0f64));
    assert_eq!(vec2!(0.0f64, 1.0f64).yxy(), vec3!(1.0f64, 0.0f64, 1.0f64));
    assert_eq!(
        vec2!(0.0f64, 1.0f64).yxyy(),
        vec4!(1.0f64, 0.0f64, 1.0f64, 1.0f64)
    );
}

#[test]
fn test_vec2_fold() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64
    );
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64
    );
}

#[test]
fn test_vec2_eq_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).eq_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).eq_mask(vec2!(0.0f64, 0.0f64)),
        vec2!(true, false)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).eq_mask(vec2!(2.0f64, 3.0f64)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ne_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).ne_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).ne_mask(vec2!(0.0f64, 0.0f64)),
        vec2!(false, true)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).ne_mask(vec2!(2.0f64, 3.0f64)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_eq() {
    assert_eq!(vec2!(0.0f64, 1.0f64) == vec2!(0.0f64, 1.0f64), true);
    assert_eq!(vec2!(0.0f64, 1.0f64) == vec2!(0.0f64, 0.0f64), false);
    assert_eq!(vec2!(0.0f64, 1.0f64) == vec2!(2.0f64, 3.0f64), false);
}

#[test]
fn test_vec2_ne() {
    assert_eq!(vec2!(0.0f64, 1.0f64) != vec2!(0.0f64, 1.0f64), false);
    assert_eq!(vec2!(0.0f64, 1.0f64) != vec2!(0.0f64, 0.0f64), true);
    assert_eq!(vec2!(0.0f64, 1.0f64) != vec2!(2.0f64, 3.0f64), true);
}

#[test]
fn test_vec2_debug() {
    assert_eq!(format!("{:?}", vec2!(0.0f64, 1.0f64)), "(0.0, 1.0)");
}

#[test]
fn test_vec2_display() {
    assert_eq!(format!("{}", vec2!(0.0f64, 1.0f64)), "(0, 1)");
}

#[test]
fn test_vec2p_align() {
    assert_eq!(vec2p!(0.0f64, 1.0f64).align(), vec2!(0.0f64, 1.0f64));
}

#[test]
fn test_vec2p_pack() {
    assert_eq!(vec2p!(0.0f64, 1.0f64).pack(), vec2p!(0.0f64, 1.0f64));
}

#[test]
fn test_vec2p_from_array_as_array() {
    assert_eq!(
        Vec2P::from_array([0.0f64, 1.0f64]).as_array(),
        [0.0f64, 1.0f64]
    );
}

#[test]
fn test_vec2p_splat() {
    assert_eq!(Vec2P::splat(0.0f64), vec2p!(0.0f64, 0.0f64));
}

#[test]
fn test_vec2p_index() {
    assert_eq!(vec2p!(0.0f64, 1.0f64).index(0), 0.0f64);
    assert_eq!(vec2p!(0.0f64, 1.0f64).index(1), 1.0f64);
}

#[test]
#[should_panic]
fn test_vec2p_index_panic() {
    vec2p!(0.0f64, 1.0f64).index(2);
}

#[test]
fn test_vec2p_get() {
    assert_eq!(vec2p!(0.0f64, 1.0f64).get(0), Some(0.0f64));
    assert_eq!(vec2p!(0.0f64, 1.0f64).get(1), Some(1.0f64));

    assert_eq!(vec2p!(0.0f64, 1.0f64).get(2), None);
}

#[test]
fn test_vec2p_get_unchecked() {
    unsafe {
        assert_eq!(vec2p!(0.0f64, 1.0f64).get_unchecked(0), 0.0f64);
        assert_eq!(vec2p!(0.0f64, 1.0f64).get_unchecked(1), 1.0f64);
    }
}

#[test]
fn test_vec2p_set() {
    {
        let mut vec = vec2p!(0.0f64, 1.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec2p!(50.0f64, 1.0f64));
    }
    {
        let mut vec = vec2p!(0.0f64, 1.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec2p!(0.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_vec2p_set_panic() {
    let mut vec = vec2p!(0.0f64, 1.0f64);
    vec.set(2, 0.0f64);
}

#[test]
fn test_vec2p_try_set() {
    {
        let mut vec = vec2p!(0.0f64, 1.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec2p!(50.0f64, 1.0f64));
    }
    {
        let mut vec = vec2p!(0.0f64, 1.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec2p!(0.0f64, 50.0f64));
    }

    assert_eq!(
        vec2p!(0.0f64, 1.0f64).try_set(2, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2p!(0.0f64, 1.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec2p!(50.0f64, 1.0f64));
        }
        {
            let mut vec = vec2p!(0.0f64, 1.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec2p!(0.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_vec2p_swizzle() {
    assert_eq!(vec2p!(0.0f64, 1.0f64).y(), 1.0f64);
    assert_eq!(vec2p!(0.0f64, 1.0f64).yx(), vec2p!(1.0f64, 0.0f64));
    assert_eq!(vec2p!(0.0f64, 1.0f64).yxy(), vec3p!(1.0f64, 0.0f64, 1.0f64));
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).yxyy(),
        vec4p!(1.0f64, 0.0f64, 1.0f64, 1.0f64)
    );
}

#[test]
fn test_vec2p_fold() {
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64
    );
}

#[test]
fn test_vec2p_reduce() {
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64
    );
}

#[test]
fn test_vec2p_eq_mask() {
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).eq_mask(vec2p!(0.0f64, 1.0f64)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).eq_mask(vec2p!(0.0f64, 0.0f64)),
        vec2p!(true, false)
    );
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).eq_mask(vec2p!(2.0f64, 3.0f64)),
        vec2p!(false, false)
    );
}

#[test]
fn test_vec2p_ne_mask() {
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).ne_mask(vec2p!(0.0f64, 1.0f64)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).ne_mask(vec2p!(0.0f64, 0.0f64)),
        vec2p!(false, true)
    );
    assert_eq!(
        vec2p!(0.0f64, 1.0f64).ne_mask(vec2p!(2.0f64, 3.0f64)),
        vec2p!(true, true)
    );
}

#[test]
fn test_vec2p_eq() {
    assert_eq!(vec2p!(0.0f64, 1.0f64) == vec2p!(0.0f64, 1.0f64), true);
    assert_eq!(vec2p!(0.0f64, 1.0f64) == vec2p!(0.0f64, 0.0f64), false);
    assert_eq!(vec2p!(0.0f64, 1.0f64) == vec2p!(2.0f64, 3.0f64), false);
}

#[test]
fn test_vec2p_ne() {
    assert_eq!(vec2p!(0.0f64, 1.0f64) != vec2p!(0.0f64, 1.0f64), false);
    assert_eq!(vec2p!(0.0f64, 1.0f64) != vec2p!(0.0f64, 0.0f64), true);
    assert_eq!(vec2p!(0.0f64, 1.0f64) != vec2p!(2.0f64, 3.0f64), true);
}

#[test]
fn test_vec2p_debug() {
    assert_eq!(format!("{:?}", vec2p!(0.0f64, 1.0f64)), "(0.0, 1.0)");
}

#[test]
fn test_vec2p_display() {
    assert_eq!(format!("{}", vec2p!(0.0f64, 1.0f64)), "(0, 1)");
}

const _: () = assert!(size_of::<Vec3P<f64>>() == size_of::<[f64; 3]>());

#[test]
fn test_vec3_align() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).align(),
        vec3!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3_pack() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).pack(),
        vec3p!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(0.0f64), vec3!(0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).index(0), 0.0f64);
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).index(1), 1.0f64);
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).index(2), 2.0f64);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(0.0f64, 1.0f64, 2.0f64).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get(0), Some(0.0f64));
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get(1), Some(1.0f64));
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get(2), Some(2.0f64));

    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get_unchecked(0), 0.0f64);
        assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get_unchecked(1), 1.0f64);
        assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get_unchecked(2), 2.0f64);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec3!(50.0f64, 1.0f64, 2.0f64));
    }
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec3!(0.0f64, 50.0f64, 2.0f64));
    }
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec3!(0.0f64, 1.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
    vec.set(3, 0.0f64);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec3!(50.0f64, 1.0f64, 2.0f64));
    }
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec3!(0.0f64, 50.0f64, 2.0f64));
    }
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec3!(0.0f64, 1.0f64, 50.0f64));
    }

    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).try_set(3, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec3!(50.0f64, 1.0f64, 2.0f64));
        }
        {
            let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec3!(0.0f64, 50.0f64, 2.0f64));
        }
        {
            let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec3!(0.0f64, 1.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).z(), 2.0f64);
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).zx(), vec2!(2.0f64, 0.0f64));
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).zxy(),
        vec3!(2.0f64, 0.0f64, 1.0f64)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).zxyz(),
        vec4!(2.0f64, 0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64
    );
}

#[test]
fn test_vec3_eq_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3!(0.0f64, 0.0f64, 2.0f64)),
        vec3!(true, false, true)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3!(3.0f64, 4.0f64, 5.0f64)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ne_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3!(0.0f64, 0.0f64, 2.0f64)),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3!(3.0f64, 4.0f64, 5.0f64)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_eq() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) == vec3!(0.0f64, 1.0f64, 2.0f64),
        true
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) == vec3!(0.0f64, 0.0f64, 2.0f64),
        false
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) == vec3!(3.0f64, 4.0f64, 5.0f64),
        false
    );
}

#[test]
fn test_vec3_ne() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) != vec3!(0.0f64, 1.0f64, 2.0f64),
        false
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) != vec3!(0.0f64, 0.0f64, 2.0f64),
        true
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) != vec3!(3.0f64, 4.0f64, 5.0f64),
        true
    );
}

#[test]
fn test_vec3_debug() {
    assert_eq!(
        format!("{:?}", vec3!(0.0f64, 1.0f64, 2.0f64)),
        "(0.0, 1.0, 2.0)"
    );
}

#[test]
fn test_vec3_display() {
    assert_eq!(format!("{}", vec3!(0.0f64, 1.0f64, 2.0f64)), "(0, 1, 2)");
}

#[test]
fn test_vec3p_align() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).align(),
        vec3!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3p_pack() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).pack(),
        vec3p!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3p_from_array_as_array() {
    assert_eq!(
        Vec3P::from_array([0.0f64, 1.0f64, 2.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64]
    );
}

#[test]
fn test_vec3p_splat() {
    assert_eq!(Vec3P::splat(0.0f64), vec3p!(0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_vec3p_index() {
    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).index(0), 0.0f64);
    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).index(1), 1.0f64);
    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).index(2), 2.0f64);
}

#[test]
#[should_panic]
fn test_vec3p_index_panic() {
    vec3p!(0.0f64, 1.0f64, 2.0f64).index(3);
}

#[test]
fn test_vec3p_get() {
    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).get(0), Some(0.0f64));
    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).get(1), Some(1.0f64));
    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).get(2), Some(2.0f64));

    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).get(3), None);
}

#[test]
fn test_vec3p_get_unchecked() {
    unsafe {
        assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).get_unchecked(0), 0.0f64);
        assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).get_unchecked(1), 1.0f64);
        assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).get_unchecked(2), 2.0f64);
    }
}

#[test]
fn test_vec3p_set() {
    {
        let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec3p!(50.0f64, 1.0f64, 2.0f64));
    }
    {
        let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec3p!(0.0f64, 50.0f64, 2.0f64));
    }
    {
        let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec3p!(0.0f64, 1.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_vec3p_set_panic() {
    let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
    vec.set(3, 0.0f64);
}

#[test]
fn test_vec3p_try_set() {
    {
        let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec3p!(50.0f64, 1.0f64, 2.0f64));
    }
    {
        let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec3p!(0.0f64, 50.0f64, 2.0f64));
    }
    {
        let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec3p!(0.0f64, 1.0f64, 50.0f64));
    }

    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).try_set(3, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec3p!(50.0f64, 1.0f64, 2.0f64));
        }
        {
            let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec3p!(0.0f64, 50.0f64, 2.0f64));
        }
        {
            let mut vec = vec3p!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec3p!(0.0f64, 1.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_vec3p_swizzle() {
    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).z(), 2.0f64);
    assert_eq!(vec3p!(0.0f64, 1.0f64, 2.0f64).zx(), vec2p!(2.0f64, 0.0f64));
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).zxy(),
        vec3p!(2.0f64, 0.0f64, 1.0f64)
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).zxyz(),
        vec4p!(2.0f64, 0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3p_fold() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64
    );
}

#[test]
fn test_vec3p_reduce() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64
    );
}

#[test]
fn test_vec3p_eq_mask() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3p!(0.0f64, 1.0f64, 2.0f64)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3p!(0.0f64, 0.0f64, 2.0f64)),
        vec3p!(true, false, true)
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3p!(3.0f64, 4.0f64, 5.0f64)),
        vec3p!(false, false, false)
    );
}

#[test]
fn test_vec3p_ne_mask() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3p!(0.0f64, 1.0f64, 2.0f64)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3p!(0.0f64, 0.0f64, 2.0f64)),
        vec3p!(false, true, false)
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3p!(3.0f64, 4.0f64, 5.0f64)),
        vec3p!(true, true, true)
    );
}

#[test]
fn test_vec3p_eq() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64) == vec3p!(0.0f64, 1.0f64, 2.0f64),
        true
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64) == vec3p!(0.0f64, 0.0f64, 2.0f64),
        false
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64) == vec3p!(3.0f64, 4.0f64, 5.0f64),
        false
    );
}

#[test]
fn test_vec3p_ne() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64) != vec3p!(0.0f64, 1.0f64, 2.0f64),
        false
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64) != vec3p!(0.0f64, 0.0f64, 2.0f64),
        true
    );
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64) != vec3p!(3.0f64, 4.0f64, 5.0f64),
        true
    );
}

#[test]
fn test_vec3p_debug() {
    assert_eq!(
        format!("{:?}", vec3p!(0.0f64, 1.0f64, 2.0f64)),
        "(0.0, 1.0, 2.0)"
    );
}

#[test]
fn test_vec3p_display() {
    assert_eq!(format!("{}", vec3p!(0.0f64, 1.0f64, 2.0f64)), "(0, 1, 2)");
}

const _: () = assert!(size_of::<Vec4P<f64>>() == size_of::<[f64; 4]>());

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).align(),
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).pack(),
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64, 3.0f64]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0.0f64), vec4!(0.0f64, 0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(0), 0.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(1), 1.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(2), 2.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(3), 3.0f64);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(0), Some(0.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(1), Some(1.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(2), Some(2.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(3), Some(3.0f64));

    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(0),
            0.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(1),
            1.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(2),
            2.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(3),
            3.0f64
        );
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(3, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
    vec.set(4, 0.0f64);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(3, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).try_set(4, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(3, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).z(), 2.0f64);
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zw(),
        vec2!(2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwy(),
        vec3!(2.0f64, 3.0f64, 1.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwyz(),
        vec4!(2.0f64, 3.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0.0, 1.0, 2.0, 3.0)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(
        format!("{}", vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4p_align() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).align(),
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_vec4p_pack() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).pack(),
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_vec4p_from_array_as_array() {
    assert_eq!(
        Vec4P::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64, 3.0f64]
    );
}

#[test]
fn test_vec4p_splat() {
    assert_eq!(Vec4P::splat(0.0f64), vec4p!(0.0f64, 0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_vec4p_index() {
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(0), 0.0f64);
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(1), 1.0f64);
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(2), 2.0f64);
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(3), 3.0f64);
}

#[test]
#[should_panic]
fn test_vec4p_index_panic() {
    vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(4);
}

#[test]
fn test_vec4p_get() {
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(0), Some(0.0f64));
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(1), Some(1.0f64));
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(2), Some(2.0f64));
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(3), Some(3.0f64));

    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(4), None);
}

#[test]
fn test_vec4p_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(0),
            0.0f64
        );
        assert_eq!(
            vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(1),
            1.0f64
        );
        assert_eq!(
            vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(2),
            2.0f64
        );
        assert_eq!(
            vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(3),
            3.0f64
        );
    }
}

#[test]
fn test_vec4p_set() {
    {
        let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec4p!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec4p!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec4p!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(3, 50.0f64);

        assert_eq!(vec, vec4p!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_vec4p_set_panic() {
    let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
    vec.set(4, 0.0f64);
}

#[test]
fn test_vec4p_try_set() {
    {
        let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec4p!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec4p!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec4p!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(3, 50.0f64).unwrap();

        assert_eq!(vec, vec4p!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }

    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).try_set(4, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec4p!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec4p!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec4p!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
        }
        {
            let mut vec = vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(3, 50.0f64);

            assert_eq!(vec, vec4p!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_vec4p_swizzle() {
    assert_eq!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).z(), 2.0f64);
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zw(),
        vec2p!(2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwy(),
        vec3p!(2.0f64, 3.0f64, 1.0f64)
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwyz(),
        vec4p!(2.0f64, 3.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec4p_fold() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_vec4p_reduce() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_vec4p_eq_mask() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4p!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4p!(true, false, true, true)
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4p!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4p!(false, false, false, false)
    );
}

#[test]
fn test_vec4p_ne_mask() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4p!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4p!(false, true, false, false)
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4p!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4p!(true, true, true, true)
    );
}

#[test]
fn test_vec4p_eq() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4p!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4p!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        false
    );
}

#[test]
fn test_vec4p_ne() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4p!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4p!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        true
    );
}

#[test]
fn test_vec4p_debug() {
    assert_eq!(
        format!("{:?}", vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0.0, 1.0, 2.0, 3.0)"
    );
}

#[test]
fn test_vec4p_display() {
    assert_eq!(
        format!("{}", vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0, 1, 2, 3)"
    );
}
