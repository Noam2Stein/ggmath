// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<f64>>() == size_of::<[f64; 2]>());

#[test]
fn test_vec2_constructor() {
    assert_eq!(vec2!(0.0f64, 1.0f64), Vec2::from_array([0.0f64, 1.0f64]));
    assert_eq!(
        vec2!(vec2!(0.0f64, 1.0f64)),
        Vec2::from_array([0.0f64, 1.0f64])
    );
}

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(0.0f64, 1.0f64).align(), vec2!(0.0f64, 1.0f64));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(0.0f64, 1.0f64).pack(), vec2p!(0.0f64, 1.0f64));
}

#[test]
fn test_vec2p_constructor() {
    assert_eq!(vec2p!(0.0f64, 1.0f64), Vec2P::from_array([0.0f64, 1.0f64]));
    assert_eq!(
        vec2p!(vec2p!(0.0f64, 1.0f64)),
        Vec2P::from_array([0.0f64, 1.0f64])
    );
}

#[test]
fn test_vec2p_align() {
    assert_eq!(vec2p!(0.0f64, 1.0f64).align(), vec2!(0.0f64, 1.0f64));
}

#[test]
fn test_vec2p_pack() {
    assert_eq!(vec2p!(0.0f64, 1.0f64).pack(), vec2p!(0.0f64, 1.0f64));
}

const _: () = assert!(size_of::<Vec3P<f64>>() == size_of::<[f64; 3]>());

#[test]
fn test_vec3_constructor() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64),
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64])
    );
    assert_eq!(
        vec3!(0.0f64, vec2!(1.0f64, 2.0f64)),
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64])
    );
    assert_eq!(
        vec3!(vec3!(0.0f64, 1.0f64, 2.0f64)),
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64])
    );
}

#[test]
fn test_vec3_align() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).align(),
        vec3!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3_pack() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).pack(),
        vec3p!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3p_constructor() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64),
        Vec3P::from_array([0.0f64, 1.0f64, 2.0f64])
    );
    assert_eq!(
        vec3p!(0.0f64, vec2p!(1.0f64, 2.0f64)),
        Vec3P::from_array([0.0f64, 1.0f64, 2.0f64])
    );
    assert_eq!(
        vec3p!(vec3p!(0.0f64, 1.0f64, 2.0f64)),
        Vec3P::from_array([0.0f64, 1.0f64, 2.0f64])
    );
}

#[test]
fn test_vec3p_align() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).align(),
        vec3!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec3p_pack() {
    assert_eq!(
        vec3p!(0.0f64, 1.0f64, 2.0f64).pack(),
        vec3p!(0.0f64, 1.0f64, 2.0f64)
    );
}

const _: () = assert!(size_of::<Vec4P<f64>>() == size_of::<[f64; 4]>());

#[test]
fn test_vec4_constructor() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4!(0.0f64, vec2!(1.0f64, 2.0f64), 3.0f64),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
}

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).align(),
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).pack(),
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64, 3.0f64]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0.0f64), vec4!(0.0f64, 0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(0), 0.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(1), 1.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(2), 2.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(3), 3.0f64);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(0), Some(0.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(1), Some(1.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(2), Some(2.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(3), Some(3.0f64));

    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(0),
            0.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(1),
            1.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(2),
            2.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(3),
            3.0f64
        );
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(3, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
    vec.set(4, 0.0f64);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(3, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).try_set(4, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(3, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).z(), 2.0f64);
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zw(),
        vec2!(2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwy(),
        vec3!(2.0f64, 3.0f64, 1.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwyz(),
        vec4!(2.0f64, 3.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_vec4_with_swizzle() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_y(0.0f64),
        vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yx(vec2!(0.0f64, 1.0f64)),
        vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yxz(vec3!(0.0f64, 2.0f64, 1.0f64)),
        vec4!(2.0f64, 0.0f64, 1.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yxzw(vec4!(0.0f64, 2.0f64, 1.0f64, 0.0f64)),
        vec4!(2.0f64, 0.0f64, 1.0f64, 0.0f64)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN).eq_mask(vec4!(
            f64::NAN,
            f64::NAN,
            f64::NAN,
            f64::NAN
        )),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN).ne_mask(vec4!(
            f64::NAN,
            f64::NAN,
            f64::NAN,
            f64::NAN
        )),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, false, false),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).lt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).gt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).le_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, true, true),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).ge_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0.0, 1.0, 2.0, 3.0)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(
        format!("{}", vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4p_constructor() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        Vec4P::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4p!(0.0f64, vec2p!(1.0f64, 2.0f64), 3.0f64),
        Vec4P::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4p!(vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        Vec4P::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
}

#[test]
fn test_vec4p_align() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).align(),
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_vec4p_pack() {
    assert_eq!(
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64).pack(),
        vec4p!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}
