// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use ggmath::*;

fn approx_eq(a: f64, b: f64) -> bool {
    if a.is_nan() && b.is_nan() {
        true
    } else if a.is_infinite() && b.is_infinite() {
        a.is_sign_positive() == b.is_sign_positive()
    } else {
        (a - b).abs() < 0.1
    }
}

fn approx_vec_eq<const N: usize, S: Simdness>(a: Vector<N, f64, S>, b: Vector<N, f64, S>) -> bool
where
    Usize<N>: VecLen,
{
    (0..N).all(|i| approx_eq(a.index(i), b.index(i)))
}

macro_rules! assert_approx_eq {
    ($a:expr, $b:expr $(,)?) => {
        let a = $a;
        let b = $b;

        if !approx_eq(a, b) {
            panic!("approx_eq failed: {a:?} != {b:?}");
        }
    };
}

macro_rules! assert_approx_vec_eq {
    ($a:expr, $b:expr $(,)?) => {
        let a = $a;
        let b = $b;

        if !approx_vec_eq(a, b) {
            panic!("approx_vec_eq failed: {a:?} != {b:?}");
        }
    };
}

#[test]
fn test_dvec4_constructor() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4!(0.0f64, vec2!(1.0f64, 2.0f64), 3.0f64),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
}

#[test]
fn test_dvec4_as_simd() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).as_simd(),
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_dvec4_as_non_simd() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).as_non_simd(),
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_dvec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64, 3.0f64]
    );
}

#[test]
fn test_dvec4_splat() {
    assert_eq!(Vec4::splat(0.0f64), vec4!(0.0f64, 0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_dvec4_index() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(0), 0.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(1), 1.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(2), 2.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(3), 3.0f64);
}

#[test]
#[should_panic]
fn test_dvec4_index_panic() {
    vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(4);
}

#[test]
fn test_dvec4_get() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(0), Some(0.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(1), Some(1.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(2), Some(2.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(3), Some(3.0f64));

    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(4), None);
}

#[test]
fn test_dvec4_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(0),
            0.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(1),
            1.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(2),
            2.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(3),
            3.0f64
        );
    }
}

#[test]
fn test_dvec4_set() {
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(3, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_dvec4_set_panic() {
    let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
    vec.set(4, 0.0f64);
}

#[test]
fn test_dvec4_try_set() {
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(3, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).try_set(4, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_dvec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(3, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_dvec4_swizzle() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).z(), 2.0f64);
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zw(),
        vec2!(2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwy(),
        vec3!(2.0f64, 3.0f64, 1.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwyz(),
        vec4!(2.0f64, 3.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_dvec4_with_swizzle() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_y(0.0f64),
        vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yx(vec2!(0.0f64, 1.0f64)),
        vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yxz(vec3!(0.0f64, 2.0f64, 1.0f64)),
        vec4!(2.0f64, 0.0f64, 1.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yxzw(vec4!(0.0f64, 2.0f64, 1.0f64, 0.0f64)),
        vec4!(2.0f64, 0.0f64, 1.0f64, 0.0f64)
    );
}

#[test]
fn test_dvec4_fold() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_dvec4_reduce() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_dvec4_eq_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN).eq_mask(vec4!(
            f64::NAN,
            f64::NAN,
            f64::NAN,
            f64::NAN
        )),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_dvec4_ne_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN).ne_mask(vec4!(
            f64::NAN,
            f64::NAN,
            f64::NAN,
            f64::NAN
        )),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_dvec4_lt_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, false, false),
    );

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).lt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_dvec4_gt_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, false, false),
    );

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).gt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_dvec4_le_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, true, true),
    );

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).le_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_dvec4_ge_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, true, true),
    );

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).ge_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_dvec4_eq() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        false
    );
}

#[test]
fn test_dvec4_ne() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        true
    );
}

#[test]
fn test_dvec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0.0, 1.0, 2.0, 3.0)"
    );
}

#[test]
fn test_dvec4_display() {
    assert_eq!(
        format!("{}", vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_dvec4_const_from_array() {
    assert_eq!(
        Vec4::<f64>::const_from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
}

// The following code is generated for all float primitives

#[test]
fn test_dvec4_neg() {
    assert_approx_vec_eq!(
        -vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64),
        vec4!(-0.0f64, -1.3f64, -2.6f64, -3.9f64)
    );
    assert_approx_vec_eq!(
        -vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(-21.6f64, f64::NAN, -32.4f64, -37.8f64)
    );
}

#[test]
fn test_dvec4_add() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(21.6f64, 28.3f64, 35.0f64, 41.7f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(21.6f64, f64::NAN, 35.0f64, 41.7f64)
    );
}

#[test]
fn test_dvec4_sub() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) - vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(-21.6f64, -25.7f64, -29.8f64, -33.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) - vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(-21.6f64, f64::NAN, -29.8f64, -33.9f64)
    );
}

#[test]
fn test_dvec4_mul() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) * vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(0.0f64, 35.1f64, 84.24f64, 147.42f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) * vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(0.0f64, f64::NAN, 84.24f64, 147.42f64)
    );
}

#[test]
fn test_dvec4_div() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(0.0f64, 0.0481f64, 0.0802f64, 0.1032f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(0.0f64, f64::NAN, 0.0802f64, 0.1032f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4!(-21.6f64, 0.0f64, 32.4f64, 75.6f64),
        vec4!(-0.0f64, f64::INFINITY, 0.0802f64, 0.0516f64)
    );
}

#[test]
fn test_dvec4_rem() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) % vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) % vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(0.0f64, f64::NAN, 2.6f64, 3.9f64)
    );
}

#[test]
fn test_dvec4_sum() {
    assert_approx_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).sum(), 7.8f64);
}

#[test]
fn test_dvec4_product() {
    assert_approx_eq!(
        vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64).product(),
        714256.704f64
    );
}

#[test]
fn test_dvec4_mag_sq() {
    assert_approx_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).mag_sq(), 23.66f64);
}

#[test]
fn test_dvec4_dot() {
    assert_approx_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).dot(vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        266.76f64
    );
}

#[test]
fn test_dvec4_div_euclid() {
    assert_approx_vec_eq!(
        vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64).div_euclid(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)),
        vec4!(f64::INFINITY, 20.0f64, 12.0f64, 9.0f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).div_euclid(vec4!(
            21.6f64,
            f64::NAN,
            32.4f64,
            37.8f64
        )),
        vec4!(0.0f64, f64::NAN, 0.0f64, 0.0f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).div_euclid(vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64)),
        vec4!(f64::NAN, f64::INFINITY, 0.0f64, 0.0f64)
    );
}

#[test]
fn test_dvec4_rem_euclid() {
    assert_approx_vec_eq!(
        vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64).rem_euclid(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)),
        vec4!(f64::NAN, 1.0f64, 1.2f64, 2.7f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).rem_euclid(vec4!(
            21.6f64,
            f64::NAN,
            32.4f64,
            37.8f64
        )),
        vec4!(0.0f64, f64::NAN, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).rem_euclid(vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64)),
        vec4!(f64::NAN, f64::NAN, 2.6f64, 3.9f64)
    );
}

#[test]
fn test_dvec4_min() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min(vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min(vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64)),
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, 0.0f64, 32.4f64, 37.8f64).min(vec4!(21.6f64, -0.0f64, 32.4f64, 37.8f64)),
        vec4!(21.6f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4_max() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max(vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max(vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64)),
        vec4!(21.6f64, 1.3f64, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, 0.0f64, 32.4f64, 37.8f64).max(vec4!(21.6f64, -0.0f64, 32.4f64, 37.8f64)),
        vec4!(21.6f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4_min_element() {
    assert_approx_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min_element(), 0.0f64);
    assert_approx_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).min_element(),
        21.6f64
    );
    assert_approx_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).min_element(),
        -0.0f64
    );
}

#[test]
fn test_dvec4_max_element() {
    assert_approx_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max_element(), 3.9f64);
    assert_approx_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).max_element(),
        37.8f64
    );
    assert_approx_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).max_element(),
        37.8f64
    );
}

#[test]
fn test_dvec4_signum() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).signum(),
        vec4!(1.0f64, 1.0f64, 1.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).signum(),
        vec4!(1.0f64, f64::NAN, 1.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).signum(),
        vec4!(-1.0f64, 1.0f64, 1.0f64, 1.0f64)
    );
}

#[test]
fn test_dvec4_abs() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).abs(),
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).abs(),
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).abs(),
        vec4!(0.0f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4_positive_sign_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).positive_sign_mask(),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).positive_sign_mask(),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).positive_sign_mask(),
        vec4!(false, true, true, true)
    );
}

#[test]
fn test_dvec4_negative_sign_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).negative_sign_mask(),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).negative_sign_mask(),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).negative_sign_mask(),
        vec4!(true, false, false, false)
    );
}

#[test]
fn test_dvec4_nan_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).nan_mask(),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).nan_mask(),
        vec4!(false, true, false, false)
    );
    assert_eq!(
        vec4!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).nan_mask(),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_dvec4_finite_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).finite_mask(),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).finite_mask(),
        vec4!(true, false, true, true)
    );
    assert_eq!(
        vec4!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).finite_mask(),
        vec4!(true, false, true, true)
    );
}

#[test]
fn test_dvec4_is_nan() {
    assert_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).is_nan(), false);
    assert_eq!(vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).is_nan(), true);
    assert_eq!(
        vec4!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).is_nan(),
        false
    );
}

#[test]
fn test_dvec4_is_finite() {
    assert_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).is_finite(), true);
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).is_finite(),
        false
    );
    assert_eq!(
        vec4!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).is_finite(),
        false
    );
}

#[test]
fn test_dvec4_normalize() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize(),
        vec4!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize(),
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN)
    );
    assert_approx_vec_eq!(
        Vec4::<f64>::ZERO.normalize(),
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN)
    );
}

#[test]
fn test_dvec4_checked_normalize() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
            .checked_normalize()
            .unwrap(),
        vec4!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).checked_normalize(),
        None
    );
    assert_eq!(Vec4::<f64>::ZERO.checked_normalize(), None);
}

#[test]
fn test_dvec4_normalize_or() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize_or(Vec4::<f64>::MAX),
        vec4!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize_or(Vec4::<f64>::MAX),
        Vec4::<f64>::MAX
    );
    assert_approx_vec_eq!(
        Vec4::<f64>::ZERO.normalize_or(Vec4::<f64>::MAX),
        Vec4::<f64>::MAX
    );
}

#[test]
fn test_dvec4_normalize_or_zero() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize_or_zero(),
        vec4!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize_or_zero(),
        Vec4::<f64>::ZERO
    );
    assert_approx_vec_eq!(Vec4::<f64>::ZERO.normalize_or_zero(), Vec4::<f64>::ZERO);
}
