// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use ggmath::*;

#[test]
fn test_dvec2_constructor() {
    assert_eq!(vec2!(0.0f64, 1.0f64), Vec2::from_array([0.0f64, 1.0f64]));
    assert_eq!(
        vec2!(vec2!(0.0f64, 1.0f64)),
        Vec2::from_array([0.0f64, 1.0f64])
    );
}

#[test]
fn test_dvec2_as_simd() {
    assert_eq!(vec2!(0.0f64, 1.0f64).as_simd(), vec2!(0.0f64, 1.0f64));
}

#[test]
fn test_dvec2_as_non_simd() {
    assert_eq!(vec2!(0.0f64, 1.0f64).as_non_simd(), vec2s!(0.0f64, 1.0f64));
}

#[test]
fn test_dvec2_from_array_as_array() {
    assert_eq!(
        Vec2::from_array([0.0f64, 1.0f64]).as_array(),
        [0.0f64, 1.0f64]
    );
}

#[test]
fn test_dvec2_splat() {
    assert_eq!(Vec2::splat(0.0f64), vec2!(0.0f64, 0.0f64));
}

#[test]
fn test_dvec2_index() {
    assert_eq!(vec2!(0.0f64, 1.0f64).index(0), 0.0f64);
    assert_eq!(vec2!(0.0f64, 1.0f64).index(1), 1.0f64);
}

#[test]
#[should_panic]
fn test_dvec2_index_panic() {
    vec2!(0.0f64, 1.0f64).index(2);
}

#[test]
fn test_dvec2_get() {
    assert_eq!(vec2!(0.0f64, 1.0f64).get(0), Some(0.0f64));
    assert_eq!(vec2!(0.0f64, 1.0f64).get(1), Some(1.0f64));

    assert_eq!(vec2!(0.0f64, 1.0f64).get(2), None);
}

#[test]
fn test_dvec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(0.0f64, 1.0f64).get_unchecked(0), 0.0f64);
        assert_eq!(vec2!(0.0f64, 1.0f64).get_unchecked(1), 1.0f64);
    }
}

#[test]
fn test_dvec2_set() {
    {
        let mut vec = vec2!(0.0f64, 1.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec2!(50.0f64, 1.0f64));
    }
    {
        let mut vec = vec2!(0.0f64, 1.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec2!(0.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_dvec2_set_panic() {
    let mut vec = vec2!(0.0f64, 1.0f64);
    vec.set(2, 0.0f64);
}

#[test]
fn test_dvec2_try_set() {
    {
        let mut vec = vec2!(0.0f64, 1.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec2!(50.0f64, 1.0f64));
    }
    {
        let mut vec = vec2!(0.0f64, 1.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec2!(0.0f64, 50.0f64));
    }

    assert_eq!(
        vec2!(0.0f64, 1.0f64).try_set(2, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_dvec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(0.0f64, 1.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec2!(50.0f64, 1.0f64));
        }
        {
            let mut vec = vec2!(0.0f64, 1.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec2!(0.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_dvec2_swizzle() {
    assert_eq!(vec2!(0.0f64, 1.0f64).y(), 1.0f64);
    assert_eq!(vec2!(0.0f64, 1.0f64).yx(), vec2!(1.0f64, 0.0f64));
    assert_eq!(vec2!(0.0f64, 1.0f64).yxy(), vec3!(1.0f64, 0.0f64, 1.0f64));
    assert_eq!(
        vec2!(0.0f64, 1.0f64).yxyy(),
        vec4!(1.0f64, 0.0f64, 1.0f64, 1.0f64)
    );
}

#[test]
fn test_dvec2_with_swizzle() {
    assert_eq!(vec2!(0.0f64, 1.0f64).with_y(0.0f64), vec2!(0.0f64, 0.0f64));
    assert_eq!(
        vec2!(0.0f64, 1.0f64).with_yx(vec2!(0.0f64, 1.0f64)),
        vec2!(1.0f64, 0.0f64)
    );
}

#[test]
fn test_dvec2_fold() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64
    );
}

#[test]
fn test_dvec2_reduce() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64
    );
}

#[test]
fn test_dvec2_eq_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).eq_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).eq_mask(vec2!(0.0f64, 0.0f64)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).eq_mask(vec2!(2.0f64, 3.0f64)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(f64::NAN, f64::NAN).eq_mask(vec2!(f64::NAN, f64::NAN)),
        vec2!(false, false)
    );
}

#[test]
fn test_dvec2_ne_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).ne_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).ne_mask(vec2!(0.0f64, 0.0f64)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).ne_mask(vec2!(2.0f64, 3.0f64)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(f64::NAN, f64::NAN).ne_mask(vec2!(f64::NAN, f64::NAN)),
        vec2!(true, true)
    );
}

#[test]
fn test_dvec2_lt_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).lt_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).lt_mask(vec2!(1.0f64, 0.0f64)),
        vec2!(true, false),
    );

    assert_eq!(
        vec2!(0.0f64, 1.0f64).lt_mask(vec2!(2.0f64, 3.0f64)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2.0f64, 3.0f64).lt_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(false, false)
    );
}

#[test]
fn test_dvec2_gt_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).gt_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).gt_mask(vec2!(1.0f64, 0.0f64)),
        vec2!(false, true),
    );

    assert_eq!(
        vec2!(0.0f64, 1.0f64).gt_mask(vec2!(2.0f64, 3.0f64)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2.0f64, 3.0f64).gt_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(true, true)
    );
}

#[test]
fn test_dvec2_le_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).le_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).le_mask(vec2!(1.0f64, 0.0f64)),
        vec2!(true, false),
    );

    assert_eq!(
        vec2!(0.0f64, 1.0f64).le_mask(vec2!(2.0f64, 3.0f64)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2.0f64, 3.0f64).le_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(false, false)
    );
}

#[test]
fn test_dvec2_ge_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.0f64).ge_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0.0f64, 1.0f64).ge_mask(vec2!(1.0f64, 0.0f64)),
        vec2!(false, true),
    );

    assert_eq!(
        vec2!(0.0f64, 1.0f64).ge_mask(vec2!(2.0f64, 3.0f64)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2.0f64, 3.0f64).ge_mask(vec2!(0.0f64, 1.0f64)),
        vec2!(true, true)
    );
}

#[test]
fn test_dvec2_eq() {
    assert_eq!(vec2!(0.0f64, 1.0f64) == vec2!(0.0f64, 1.0f64), true);
    assert_eq!(vec2!(0.0f64, 1.0f64) == vec2!(0.0f64, 0.0f64), false);
    assert_eq!(vec2!(0.0f64, 1.0f64) == vec2!(2.0f64, 3.0f64), false);
}

#[test]
fn test_dvec2_ne() {
    assert_eq!(vec2!(0.0f64, 1.0f64) != vec2!(0.0f64, 1.0f64), false);
    assert_eq!(vec2!(0.0f64, 1.0f64) != vec2!(0.0f64, 0.0f64), true);
    assert_eq!(vec2!(0.0f64, 1.0f64) != vec2!(2.0f64, 3.0f64), true);
}

#[test]
fn test_dvec2_debug() {
    assert_eq!(format!("{:?}", vec2!(0.0f64, 1.0f64)), "(0.0, 1.0)");
}

#[test]
fn test_dvec2_display() {
    assert_eq!(format!("{}", vec2!(0.0f64, 1.0f64)), "(0, 1)");
}

#[test]
fn test_dvec2_const_from_array() {
    assert_eq!(
        Vec2::<f64>::const_from_array([0.0f64, 1.0f64]),
        Vec2::from_array([0.0f64, 1.0f64])
    );
}

#[test]
fn test_dvec3_constructor() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64),
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64])
    );
    assert_eq!(
        vec3!(0.0f64, vec2!(1.0f64, 2.0f64)),
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64])
    );
    assert_eq!(
        vec3!(vec3!(0.0f64, 1.0f64, 2.0f64)),
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64])
    );
}

#[test]
fn test_dvec3_as_simd() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).as_simd(),
        vec3!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_dvec3_as_non_simd() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).as_non_simd(),
        vec3s!(0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_dvec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64]
    );
}

#[test]
fn test_dvec3_splat() {
    assert_eq!(Vec3::splat(0.0f64), vec3!(0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_dvec3_index() {
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).index(0), 0.0f64);
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).index(1), 1.0f64);
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).index(2), 2.0f64);
}

#[test]
#[should_panic]
fn test_dvec3_index_panic() {
    vec3!(0.0f64, 1.0f64, 2.0f64).index(3);
}

#[test]
fn test_dvec3_get() {
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get(0), Some(0.0f64));
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get(1), Some(1.0f64));
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get(2), Some(2.0f64));

    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get(3), None);
}

#[test]
fn test_dvec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get_unchecked(0), 0.0f64);
        assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get_unchecked(1), 1.0f64);
        assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).get_unchecked(2), 2.0f64);
    }
}

#[test]
fn test_dvec3_set() {
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec3!(50.0f64, 1.0f64, 2.0f64));
    }
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec3!(0.0f64, 50.0f64, 2.0f64));
    }
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec3!(0.0f64, 1.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_dvec3_set_panic() {
    let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
    vec.set(3, 0.0f64);
}

#[test]
fn test_dvec3_try_set() {
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec3!(50.0f64, 1.0f64, 2.0f64));
    }
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec3!(0.0f64, 50.0f64, 2.0f64));
    }
    {
        let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec3!(0.0f64, 1.0f64, 50.0f64));
    }

    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).try_set(3, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_dvec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec3!(50.0f64, 1.0f64, 2.0f64));
        }
        {
            let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec3!(0.0f64, 50.0f64, 2.0f64));
        }
        {
            let mut vec = vec3!(0.0f64, 1.0f64, 2.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec3!(0.0f64, 1.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_dvec3_swizzle() {
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).z(), 2.0f64);
    assert_eq!(vec3!(0.0f64, 1.0f64, 2.0f64).zx(), vec2!(2.0f64, 0.0f64));
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).zxy(),
        vec3!(2.0f64, 0.0f64, 1.0f64)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).zxyz(),
        vec4!(2.0f64, 0.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_dvec3_with_swizzle() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).with_y(0.0f64),
        vec3!(0.0f64, 0.0f64, 2.0f64)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).with_yx(vec2!(0.0f64, 1.0f64)),
        vec3!(1.0f64, 0.0f64, 2.0f64)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).with_yxz(vec3!(0.0f64, 2.0f64, 1.0f64)),
        vec3!(2.0f64, 0.0f64, 1.0f64)
    );
}

#[test]
fn test_dvec3_fold() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64
    );
}

#[test]
fn test_dvec3_reduce() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64
    );
}

#[test]
fn test_dvec3_eq_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3!(0.0f64, 0.0f64, 2.0f64)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).eq_mask(vec3!(3.0f64, 4.0f64, 5.0f64)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(f64::NAN, f64::NAN, f64::NAN).eq_mask(vec3!(f64::NAN, f64::NAN, f64::NAN)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_dvec3_ne_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3!(0.0f64, 0.0f64, 2.0f64)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ne_mask(vec3!(3.0f64, 4.0f64, 5.0f64)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(f64::NAN, f64::NAN, f64::NAN).ne_mask(vec3!(f64::NAN, f64::NAN, f64::NAN)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_dvec3_lt_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).lt_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).lt_mask(vec3!(1.0f64, 0.0f64, 2.0f64)),
        vec3!(true, false, false),
    );

    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).lt_mask(vec3!(3.0f64, 4.0f64, 5.0f64)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3.0f64, 4.0f64, 5.0f64).lt_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_dvec3_gt_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).gt_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).gt_mask(vec3!(1.0f64, 0.0f64, 2.0f64)),
        vec3!(false, true, false),
    );

    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).gt_mask(vec3!(3.0f64, 4.0f64, 5.0f64)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3.0f64, 4.0f64, 5.0f64).gt_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_dvec3_le_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).le_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).le_mask(vec3!(1.0f64, 0.0f64, 2.0f64)),
        vec3!(true, false, true),
    );

    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).le_mask(vec3!(3.0f64, 4.0f64, 5.0f64)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3.0f64, 4.0f64, 5.0f64).le_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_dvec3_ge_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ge_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ge_mask(vec3!(1.0f64, 0.0f64, 2.0f64)),
        vec3!(false, true, true),
    );

    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64).ge_mask(vec3!(3.0f64, 4.0f64, 5.0f64)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3.0f64, 4.0f64, 5.0f64).ge_mask(vec3!(0.0f64, 1.0f64, 2.0f64)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_dvec3_eq() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) == vec3!(0.0f64, 1.0f64, 2.0f64),
        true
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) == vec3!(0.0f64, 0.0f64, 2.0f64),
        false
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) == vec3!(3.0f64, 4.0f64, 5.0f64),
        false
    );
}

#[test]
fn test_dvec3_ne() {
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) != vec3!(0.0f64, 1.0f64, 2.0f64),
        false
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) != vec3!(0.0f64, 0.0f64, 2.0f64),
        true
    );
    assert_eq!(
        vec3!(0.0f64, 1.0f64, 2.0f64) != vec3!(3.0f64, 4.0f64, 5.0f64),
        true
    );
}

#[test]
fn test_dvec3_debug() {
    assert_eq!(
        format!("{:?}", vec3!(0.0f64, 1.0f64, 2.0f64)),
        "(0.0, 1.0, 2.0)"
    );
}

#[test]
fn test_dvec3_display() {
    assert_eq!(format!("{}", vec3!(0.0f64, 1.0f64, 2.0f64)), "(0, 1, 2)");
}

#[test]
fn test_dvec3_const_from_array() {
    assert_eq!(
        Vec3::<f64>::const_from_array([0.0f64, 1.0f64, 2.0f64]),
        Vec3::from_array([0.0f64, 1.0f64, 2.0f64])
    );
}

#[test]
fn test_dvec4_constructor() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4!(0.0f64, vec2!(1.0f64, 2.0f64), 3.0f64),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
}

#[test]
fn test_dvec4_as_simd() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).as_simd(),
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_dvec4_as_non_simd() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).as_non_simd(),
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_dvec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64, 3.0f64]
    );
}

#[test]
fn test_dvec4_splat() {
    assert_eq!(Vec4::splat(0.0f64), vec4!(0.0f64, 0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_dvec4_index() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(0), 0.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(1), 1.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(2), 2.0f64);
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(3), 3.0f64);
}

#[test]
#[should_panic]
fn test_dvec4_index_panic() {
    vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(4);
}

#[test]
fn test_dvec4_get() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(0), Some(0.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(1), Some(1.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(2), Some(2.0f64));
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(3), Some(3.0f64));

    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(4), None);
}

#[test]
fn test_dvec4_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(0),
            0.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(1),
            1.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(2),
            2.0f64
        );
        assert_eq!(
            vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(3),
            3.0f64
        );
    }
}

#[test]
fn test_dvec4_set() {
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(3, 50.0f64);

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_dvec4_set_panic() {
    let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
    vec.set(4, 0.0f64);
}

#[test]
fn test_dvec4_try_set() {
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(3, 50.0f64).unwrap();

        assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).try_set(4, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_dvec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec4!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
        }
        {
            let mut vec = vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(3, 50.0f64);

            assert_eq!(vec, vec4!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_dvec4_swizzle() {
    assert_eq!(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).z(), 2.0f64);
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zw(),
        vec2!(2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwy(),
        vec3!(2.0f64, 3.0f64, 1.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwyz(),
        vec4!(2.0f64, 3.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_dvec4_with_swizzle() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_y(0.0f64),
        vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yx(vec2!(0.0f64, 1.0f64)),
        vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yxz(vec3!(0.0f64, 2.0f64, 1.0f64)),
        vec4!(2.0f64, 0.0f64, 1.0f64, 3.0f64)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yxzw(vec4!(0.0f64, 2.0f64, 1.0f64, 0.0f64)),
        vec4!(2.0f64, 0.0f64, 1.0f64, 0.0f64)
    );
}

#[test]
fn test_dvec4_fold() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_dvec4_reduce() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_dvec4_eq_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN).eq_mask(vec4!(
            f64::NAN,
            f64::NAN,
            f64::NAN,
            f64::NAN
        )),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_dvec4_ne_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN).ne_mask(vec4!(
            f64::NAN,
            f64::NAN,
            f64::NAN,
            f64::NAN
        )),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_dvec4_lt_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, false, false),
    );

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).lt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_dvec4_gt_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, false, false),
    );

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).gt_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_dvec4_le_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(true, false, true, true),
    );

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).le_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_dvec4_ge_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4!(false, true, true, true),
    );

    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64).ge_mask(vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_dvec4_eq() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        false
    );
}

#[test]
fn test_dvec4_ne() {
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        true
    );
}

#[test]
fn test_dvec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0.0, 1.0, 2.0, 3.0)"
    );
}

#[test]
fn test_dvec4_display() {
    assert_eq!(
        format!("{}", vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_dvec4_const_from_array() {
    assert_eq!(
        Vec4::<f64>::const_from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]),
        Vec4::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
}

const _: () = assert!(size_of::<Vec4S<f64>>() == size_of::<[f64; 4]>());

#[test]
fn test_dvec4s_constructor() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        Vec4S::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4s!(0.0f64, vec2s!(1.0f64, 2.0f64), 3.0f64),
        Vec4S::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
    assert_eq!(
        vec4s!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        Vec4S::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
}

#[test]
fn test_dvec4s_as_simd() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).as_simd(),
        vec4!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_dvec4s_as_non_simd() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).as_non_simd(),
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_dvec4s_from_array_as_array() {
    assert_eq!(
        Vec4S::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]).as_array(),
        [0.0f64, 1.0f64, 2.0f64, 3.0f64]
    );
}

#[test]
fn test_dvec4s_splat() {
    assert_eq!(Vec4S::splat(0.0f64), vec4s!(0.0f64, 0.0f64, 0.0f64, 0.0f64));
}

#[test]
fn test_dvec4s_index() {
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(0), 0.0f64);
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(1), 1.0f64);
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(2), 2.0f64);
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(3), 3.0f64);
}

#[test]
#[should_panic]
fn test_dvec4s_index_panic() {
    vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).index(4);
}

#[test]
fn test_dvec4s_get() {
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(0), Some(0.0f64));
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(1), Some(1.0f64));
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(2), Some(2.0f64));
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(3), Some(3.0f64));

    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get(4), None);
}

#[test]
fn test_dvec4s_get_unchecked() {
    unsafe {
        assert_eq!(
            vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(0),
            0.0f64
        );
        assert_eq!(
            vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(1),
            1.0f64
        );
        assert_eq!(
            vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(2),
            2.0f64
        );
        assert_eq!(
            vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).get_unchecked(3),
            3.0f64
        );
    }
}

#[test]
fn test_dvec4s_set() {
    {
        let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(0, 50.0f64);

        assert_eq!(vec, vec4s!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(1, 50.0f64);

        assert_eq!(vec, vec4s!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(2, 50.0f64);

        assert_eq!(vec, vec4s!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.set(3, 50.0f64);

        assert_eq!(vec, vec4s!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }
}

#[test]
#[should_panic]
fn test_dvec4s_set_panic() {
    let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
    vec.set(4, 0.0f64);
}

#[test]
fn test_dvec4s_try_set() {
    {
        let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(0, 50.0f64).unwrap();

        assert_eq!(vec, vec4s!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(1, 50.0f64).unwrap();

        assert_eq!(vec, vec4s!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
    }
    {
        let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(2, 50.0f64).unwrap();

        assert_eq!(vec, vec4s!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
    }
    {
        let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
        vec.try_set(3, 50.0f64).unwrap();

        assert_eq!(vec, vec4s!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
    }

    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).try_set(4, 0.0f64),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_dvec4s_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(0, 50.0f64);

            assert_eq!(vec, vec4s!(50.0f64, 1.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(1, 50.0f64);

            assert_eq!(vec, vec4s!(0.0f64, 50.0f64, 2.0f64, 3.0f64));
        }
        {
            let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(2, 50.0f64);

            assert_eq!(vec, vec4s!(0.0f64, 1.0f64, 50.0f64, 3.0f64));
        }
        {
            let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
            vec.set_unchecked(3, 50.0f64);

            assert_eq!(vec, vec4s!(0.0f64, 1.0f64, 2.0f64, 50.0f64));
        }
    }
}

#[test]
fn test_dvec4s_swizzle() {
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).z(), 2.0f64);
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zw(),
        vec2s!(2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwy(),
        vec3s!(2.0f64, 3.0f64, 1.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).zwyz(),
        vec4s!(2.0f64, 3.0f64, 1.0f64, 2.0f64)
    );
}

#[test]
fn test_dvec4s_with_swizzle() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_y(0.0f64),
        vec4s!(0.0f64, 0.0f64, 2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yx(vec2s!(0.0f64, 1.0f64)),
        vec4s!(1.0f64, 0.0f64, 2.0f64, 3.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yxz(vec3s!(0.0f64, 2.0f64, 1.0f64)),
        vec4s!(2.0f64, 0.0f64, 1.0f64, 3.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).with_yxzw(vec4s!(0.0f64, 2.0f64, 1.0f64, 0.0f64)),
        vec4s!(2.0f64, 0.0f64, 1.0f64, 0.0f64)
    );
}

#[test]
fn test_dvec4s_swizzle_set() {
    let mut vec = vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64);
    vec.set_yxz(vec3s!(0.0f64, 2.0f64, 1.0f64));

    assert_eq!(vec, vec4s!(2.0f64, 0.0f64, 1.0f64, 3.0f64));
}

#[test]
fn test_dvec4s_swizzle_ref() {
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).y_ref(), &1.0f64);
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).yz_ref(),
        &vec2s!(1.0f64, 2.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).xyz_ref(),
        &vec3s!(0.0f64, 1.0f64, 2.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).xyzw_ref(),
        &vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );
}

#[test]
fn test_dvec4s_swizzle_mut() {
    assert_eq!(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).y_mut(), &mut 1.0f64);
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).yz_mut(),
        &mut vec2s!(1.0f64, 2.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).xyz_mut(),
        &mut vec3s!(0.0f64, 1.0f64, 2.0f64)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).xyzw_mut(),
        &mut vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)
    );

    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).x_yz_mut(),
        (&mut 0.0f64, &mut vec2s!(1.0f64, 2.0f64))
    );
}

#[test]
fn test_dvec4s_fold() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).fold(13.0, |acc, x| acc + x),
        13.0 + 0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_dvec4s_reduce() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).reduce(|acc, x| acc + x),
        0.0f64 + 1.0f64 + 2.0f64 + 3.0f64
    );
}

#[test]
fn test_dvec4s_eq_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4s!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4s!(true, false, true, true),
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).eq_mask(vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(f64::NAN, f64::NAN, f64::NAN, f64::NAN).eq_mask(vec4s!(
            f64::NAN,
            f64::NAN,
            f64::NAN,
            f64::NAN
        )),
        vec4s!(false, false, false, false)
    );
}

#[test]
fn test_dvec4s_ne_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4s!(0.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4s!(false, true, false, false),
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ne_mask(vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(f64::NAN, f64::NAN, f64::NAN, f64::NAN).ne_mask(vec4s!(
            f64::NAN,
            f64::NAN,
            f64::NAN,
            f64::NAN
        )),
        vec4s!(true, true, true, true)
    );
}

#[test]
fn test_dvec4s_lt_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4s!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4s!(true, false, false, false),
    );

    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).lt_mask(vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64).lt_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(false, false, false, false)
    );
}

#[test]
fn test_dvec4s_gt_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4s!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4s!(false, true, false, false),
    );

    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).gt_mask(vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64).gt_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(true, true, true, true)
    );
}

#[test]
fn test_dvec4s_le_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4s!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4s!(true, false, true, true),
    );

    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).le_mask(vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64).le_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(false, false, false, false)
    );
}

#[test]
fn test_dvec4s_ge_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4s!(1.0f64, 0.0f64, 2.0f64, 3.0f64)),
        vec4s!(false, true, true, true),
    );

    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64).ge_mask(vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64).ge_mask(vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        vec4s!(true, true, true, true)
    );
}

#[test]
fn test_dvec4s_eq() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4s!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64) == vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        false
    );
}

#[test]
fn test_dvec4s_ne() {
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64),
        false
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4s!(0.0f64, 0.0f64, 2.0f64, 3.0f64),
        true
    );
    assert_eq!(
        vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64) != vec4s!(4.0f64, 5.0f64, 6.0f64, 7.0f64),
        true
    );
}

#[test]
fn test_dvec4s_debug() {
    assert_eq!(
        format!("{:?}", vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0.0, 1.0, 2.0, 3.0)"
    );
}

#[test]
fn test_dvec4s_display() {
    assert_eq!(
        format!("{}", vec4s!(0.0f64, 1.0f64, 2.0f64, 3.0f64)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_dvec4s_const_from_array() {
    assert_eq!(
        Vec4S::<f64>::const_from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64]),
        Vec4S::from_array([0.0f64, 1.0f64, 2.0f64, 3.0f64])
    );
}

fn approx_eq(a: f64, b: f64) -> bool {
    if a.is_nan() && b.is_nan() {
        true
    } else if a.is_infinite() && b.is_infinite() {
        a.is_sign_positive() == b.is_sign_positive()
    } else {
        (a - b).abs() < 0.1
    }
}

fn approx_vec_eq<const N: usize, S: Simdness>(a: Vector<N, f64, S>, b: Vector<N, f64, S>) -> bool
where
    Usize<N>: VecLen,
{
    (0..N).all(|i| approx_eq(a.index(i), b.index(i)))
}

macro_rules! assert_approx_eq {
    ($a:expr, $b:expr $(,)?) => {
        let a = $a;
        let b = $b;

        if !approx_eq(a, b) {
            panic!("approx_eq failed: {a:?} != {b:?}");
        }
    };
}

macro_rules! assert_approx_vec_eq {
    ($a:expr, $b:expr $(,)?) => {
        let a = $a;
        let b = $b;

        if !approx_vec_eq(a, b) {
            panic!("approx_vec_eq failed: {a:?} != {b:?}");
        }
    };
}

// The following code is generated for all float primitives

#[test]
fn test_dvec2_neg() {
    assert_approx_vec_eq!(-vec2!(0.0f64, 1.3f64), vec2!(-0.0f64, -1.3f64));
    assert_approx_vec_eq!(-vec2!(10.8f64, f64::NAN), vec2!(-10.8f64, f64::NAN));
}

#[test]
fn test_dvec2_add() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) + vec2!(10.8f64, 16.2f64),
        vec2!(10.8f64, 17.5f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) + vec2!(10.8f64, f64::NAN),
        vec2!(10.8f64, f64::NAN)
    );
}

#[test]
fn test_dvec2_sub() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) - vec2!(10.8f64, 16.2f64),
        vec2!(-10.8f64, -14.9f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) - vec2!(10.8f64, f64::NAN),
        vec2!(-10.8f64, f64::NAN)
    );
}

#[test]
fn test_dvec2_mul() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) * vec2!(10.8f64, 16.2f64),
        vec2!(0.0f64, 21.06f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) * vec2!(10.8f64, f64::NAN),
        vec2!(0.0f64, f64::NAN)
    );
}

#[test]
fn test_dvec2_div() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) / vec2!(10.8f64, 16.2f64),
        vec2!(0.0f64, 0.0802f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) / vec2!(10.8f64, f64::NAN),
        vec2!(0.0f64, f64::NAN)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) / vec2!(-10.8f64, 0.0f64),
        vec2!(-0.0f64, f64::INFINITY)
    );
}

#[test]
fn test_dvec2_rem() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) % vec2!(10.8f64, 16.2f64),
        vec2!(0.0f64, 1.3f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64) % vec2!(10.8f64, f64::NAN),
        vec2!(0.0f64, f64::NAN)
    );
}

#[test]
fn test_dvec2_sum() {
    assert_approx_eq!(vec2!(0.0f64, 1.3f64).sum(), 1.3f64);
}

#[test]
fn test_dvec2_product() {
    assert_approx_eq!(vec2!(10.8f64, 16.2f64).product(), 174.96f64);
}

#[test]
fn test_dvec2_mag_sq() {
    assert_approx_eq!(vec2!(0.0f64, 1.3f64).mag_sq(), 1.69f64);
}

#[test]
fn test_dvec2_dot() {
    assert_approx_eq!(vec2!(0.0f64, 1.3f64).dot(vec2!(10.8f64, 16.2f64)), 21.06f64);
}

#[test]
fn test_dvec2_perp() {
    assert_approx_vec_eq!(vec2!(1.0f64, 0.0f64).perp(), vec2!(0.0f64, 1.0f64),);
}

#[test]
fn test_dvec2_perp_cw() {
    assert_approx_vec_eq!(vec2!(1.0f64, 0.0f64).perp_cw(), vec2!(0.0f64, -1.0f64),);
}

#[test]
fn test_dvec2_div_euclid() {
    assert_approx_vec_eq!(
        vec2!(10.8f64, 16.2f64).div_euclid(vec2!(0.0f64, 1.3f64)),
        vec2!(f64::INFINITY, 12.0f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).div_euclid(vec2!(10.8f64, f64::NAN)),
        vec2!(0.0f64, f64::NAN)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).div_euclid(vec2!(-0.0f64, 0.0f64)),
        vec2!(f64::NAN, f64::INFINITY)
    );
}

#[test]
fn test_dvec2_rem_euclid() {
    assert_approx_vec_eq!(
        vec2!(10.8f64, 16.2f64).rem_euclid(vec2!(0.0f64, 1.3f64)),
        vec2!(f64::NAN, 0.6f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).rem_euclid(vec2!(10.8f64, f64::NAN)),
        vec2!(0.0f64, f64::NAN)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).rem_euclid(vec2!(-0.0f64, 0.0f64)),
        vec2!(f64::NAN, f64::NAN)
    );
}

#[test]
fn test_dvec2_min() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).min(vec2!(10.8f64, 16.2f64)),
        vec2!(0.0f64, 1.3f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).min(vec2!(10.8f64, f64::NAN)),
        vec2!(0.0f64, 1.3f64)
    );
    assert_approx_vec_eq!(
        vec2!(10.8f64, 0.0f64).min(vec2!(10.8f64, -0.0f64)),
        vec2!(10.8f64, 0.0f64)
    );
}

#[test]
fn test_dvec2_max() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).max(vec2!(10.8f64, 16.2f64)),
        vec2!(10.8f64, 16.2f64)
    );
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).max(vec2!(10.8f64, f64::NAN)),
        vec2!(10.8f64, 1.3f64)
    );
    assert_approx_vec_eq!(
        vec2!(10.8f64, 0.0f64).max(vec2!(10.8f64, -0.0f64)),
        vec2!(10.8f64, 0.0f64)
    );
}

#[test]
fn test_dvec2_min_element() {
    assert_approx_eq!(vec2!(0.0f64, 1.3f64).min_element(), 0.0f64);
    assert_approx_eq!(vec2!(10.8f64, f64::NAN).min_element(), 10.8f64);
    assert_approx_eq!(vec2!(-0.0f64, 0.0f64).min_element(), -0.0f64);
}

#[test]
fn test_dvec2_max_element() {
    assert_approx_eq!(vec2!(0.0f64, 1.3f64).max_element(), 1.3f64);
    assert_approx_eq!(vec2!(10.8f64, f64::NAN).max_element(), 10.8f64);
    assert_approx_eq!(vec2!(-0.0f64, 0.0f64).max_element(), -0.0f64);
}

#[test]
fn test_dvec2_signum() {
    assert_approx_vec_eq!(vec2!(0.0f64, 1.3f64).signum(), vec2!(1.0f64, 1.0f64));
    assert_approx_vec_eq!(vec2!(10.8f64, f64::NAN).signum(), vec2!(1.0f64, f64::NAN));
    assert_approx_vec_eq!(vec2!(-0.0f64, 0.0f64).signum(), vec2!(-1.0f64, 1.0f64));
}

#[test]
fn test_dvec2_abs() {
    assert_approx_vec_eq!(vec2!(0.0f64, 1.3f64).abs(), vec2!(0.0f64, 1.3f64));
    assert_approx_vec_eq!(vec2!(10.8f64, f64::NAN).abs(), vec2!(10.8f64, f64::NAN));
    assert_approx_vec_eq!(vec2!(-0.0f64, 0.0f64).abs(), vec2!(0.0f64, 0.0f64));
}

#[test]
fn test_dvec2_positive_sign_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.3f64).positive_sign_mask(),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(10.8f64, f64::NAN).positive_sign_mask(),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(-0.0f64, 0.0f64).positive_sign_mask(),
        vec2!(false, true)
    );
}

#[test]
fn test_dvec2_negative_sign_mask() {
    assert_eq!(
        vec2!(0.0f64, 1.3f64).negative_sign_mask(),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(10.8f64, f64::NAN).negative_sign_mask(),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(-0.0f64, 0.0f64).negative_sign_mask(),
        vec2!(true, false)
    );
}

#[test]
fn test_dvec2_nan_mask() {
    assert_eq!(vec2!(0.0f64, 1.3f64).nan_mask(), vec2!(false, false));
    assert_eq!(vec2!(10.8f64, f64::NAN).nan_mask(), vec2!(false, true));
    assert_eq!(
        vec2!(10.8f64, f64::INFINITY).nan_mask(),
        vec2!(false, false)
    );
}

#[test]
fn test_dvec2_finite_mask() {
    assert_eq!(vec2!(0.0f64, 1.3f64).finite_mask(), vec2!(true, true));
    assert_eq!(vec2!(10.8f64, f64::NAN).finite_mask(), vec2!(true, false));
    assert_eq!(
        vec2!(10.8f64, f64::INFINITY).finite_mask(),
        vec2!(true, false)
    );
}

#[test]
fn test_dvec2_is_nan() {
    assert_eq!(vec2!(0.0f64, 1.3f64).is_nan(), false);
    assert_eq!(vec2!(10.8f64, f64::NAN).is_nan(), true);
    assert_eq!(vec2!(10.8f64, f64::INFINITY).is_nan(), false);
}

#[test]
fn test_dvec2_is_finite() {
    assert_eq!(vec2!(0.0f64, 1.3f64).is_finite(), true);
    assert_eq!(vec2!(10.8f64, f64::NAN).is_finite(), false);
    assert_eq!(vec2!(10.8f64, f64::INFINITY).is_finite(), false);
}

#[test]
fn test_dvec2_normalize() {
    assert_approx_vec_eq!(vec2!(0.0f64, 1.3f64).normalize(), vec2!(0.0f64, 1.0f64));
    assert_approx_vec_eq!(
        vec2!(10.8f64, f64::NAN).normalize(),
        vec2!(f64::NAN, f64::NAN)
    );
    assert_approx_vec_eq!(Vec2::<f64>::ZERO.normalize(), vec2!(f64::NAN, f64::NAN));
}

#[test]
fn test_dvec2_checked_normalize() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).checked_normalize().unwrap(),
        vec2!(0.0f64, 1.0f64)
    );
    assert_eq!(vec2!(10.8f64, f64::NAN).checked_normalize(), None);
    assert_eq!(Vec2::<f64>::ZERO.checked_normalize(), None);
}

#[test]
fn test_dvec2_normalize_or() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).normalize_or(Vec2::<f64>::MAX),
        vec2!(0.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec2!(10.8f64, f64::NAN).normalize_or(Vec2::<f64>::MAX),
        Vec2::<f64>::MAX
    );
    assert_approx_vec_eq!(
        Vec2::<f64>::ZERO.normalize_or(Vec2::<f64>::MAX),
        Vec2::<f64>::MAX
    );
}

#[test]
fn test_dvec2_normalize_or_zero() {
    assert_approx_vec_eq!(
        vec2!(0.0f64, 1.3f64).normalize_or_zero(),
        vec2!(0.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec2!(10.8f64, f64::NAN).normalize_or_zero(),
        Vec2::<f64>::ZERO
    );
    assert_approx_vec_eq!(Vec2::<f64>::ZERO.normalize_or_zero(), Vec2::<f64>::ZERO);
}

// The following code is generated for all float primitives

#[test]
fn test_dvec3_neg() {
    assert_approx_vec_eq!(
        -vec3!(0.0f64, 1.3f64, 2.6f64),
        vec3!(-0.0f64, -1.3f64, -2.6f64)
    );
    assert_approx_vec_eq!(
        -vec3!(16.2f64, f64::NAN, 27.0f64),
        vec3!(-16.2f64, f64::NAN, -27.0f64)
    );
}

#[test]
fn test_dvec3_add() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) + vec3!(16.2f64, 21.6f64, 27.0f64),
        vec3!(16.2f64, 22.9f64, 29.6f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) + vec3!(16.2f64, f64::NAN, 27.0f64),
        vec3!(16.2f64, f64::NAN, 29.6f64)
    );
}

#[test]
fn test_dvec3_sub() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) - vec3!(16.2f64, 21.6f64, 27.0f64),
        vec3!(-16.2f64, -20.3f64, -24.4f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) - vec3!(16.2f64, f64::NAN, 27.0f64),
        vec3!(-16.2f64, f64::NAN, -24.4f64)
    );
}

#[test]
fn test_dvec3_mul() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) * vec3!(16.2f64, 21.6f64, 27.0f64),
        vec3!(0.0f64, 28.08f64, 70.2f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) * vec3!(16.2f64, f64::NAN, 27.0f64),
        vec3!(0.0f64, f64::NAN, 70.2f64)
    );
}

#[test]
fn test_dvec3_div() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) / vec3!(16.2f64, 21.6f64, 27.0f64),
        vec3!(0.0f64, 0.0602f64, 0.0963f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) / vec3!(16.2f64, f64::NAN, 27.0f64),
        vec3!(0.0f64, f64::NAN, 0.0963f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) / vec3!(-16.2f64, 0.0f64, 27.0f64),
        vec3!(-0.0f64, f64::INFINITY, 0.0963f64)
    );
}

#[test]
fn test_dvec3_rem() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) % vec3!(16.2f64, 21.6f64, 27.0f64),
        vec3!(0.0f64, 1.3f64, 2.6f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64) % vec3!(16.2f64, f64::NAN, 27.0f64),
        vec3!(0.0f64, f64::NAN, 2.6f64)
    );
}

#[test]
fn test_dvec3_sum() {
    assert_approx_eq!(vec3!(0.0f64, 1.3f64, 2.6f64).sum(), 3.9f64);
}

#[test]
fn test_dvec3_product() {
    assert_approx_eq!(vec3!(16.2f64, 21.6f64, 27.0f64).product(), 9447.84f64);
}

#[test]
fn test_dvec3_mag_sq() {
    assert_approx_eq!(vec3!(0.0f64, 1.3f64, 2.6f64).mag_sq(), 8.45f64);
}

#[test]
fn test_dvec3_dot() {
    assert_approx_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).dot(vec3!(16.2f64, 21.6f64, 27.0f64)),
        98.28f64
    );
}

#[test]
fn test_dvec3_div_euclid() {
    assert_approx_vec_eq!(
        vec3!(16.2f64, 21.6f64, 27.0f64).div_euclid(vec3!(0.0f64, 1.3f64, 2.6f64)),
        vec3!(f64::INFINITY, 16.0f64, 10.0f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).div_euclid(vec3!(16.2f64, f64::NAN, 27.0f64)),
        vec3!(0.0f64, f64::NAN, 0.0f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).div_euclid(vec3!(-0.0f64, 0.0f64, 27.0f64)),
        vec3!(f64::NAN, f64::INFINITY, 0.0f64)
    );
}

#[test]
fn test_dvec3_rem_euclid() {
    assert_approx_vec_eq!(
        vec3!(16.2f64, 21.6f64, 27.0f64).rem_euclid(vec3!(0.0f64, 1.3f64, 2.6f64)),
        vec3!(f64::NAN, 0.8f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).rem_euclid(vec3!(16.2f64, f64::NAN, 27.0f64)),
        vec3!(0.0f64, f64::NAN, 2.6f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).rem_euclid(vec3!(-0.0f64, 0.0f64, 27.0f64)),
        vec3!(f64::NAN, f64::NAN, 2.6f64)
    );
}

#[test]
fn test_dvec3_min() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).min(vec3!(16.2f64, 21.6f64, 27.0f64)),
        vec3!(0.0f64, 1.3f64, 2.6f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).min(vec3!(16.2f64, f64::NAN, 27.0f64)),
        vec3!(0.0f64, 1.3f64, 2.6f64)
    );
    assert_approx_vec_eq!(
        vec3!(16.2f64, 0.0f64, 27.0f64).min(vec3!(16.2f64, -0.0f64, 27.0f64)),
        vec3!(16.2f64, 0.0f64, 27.0f64)
    );
}

#[test]
fn test_dvec3_max() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).max(vec3!(16.2f64, 21.6f64, 27.0f64)),
        vec3!(16.2f64, 21.6f64, 27.0f64)
    );
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).max(vec3!(16.2f64, f64::NAN, 27.0f64)),
        vec3!(16.2f64, 1.3f64, 27.0f64)
    );
    assert_approx_vec_eq!(
        vec3!(16.2f64, 0.0f64, 27.0f64).max(vec3!(16.2f64, -0.0f64, 27.0f64)),
        vec3!(16.2f64, 0.0f64, 27.0f64)
    );
}

#[test]
fn test_dvec3_min_element() {
    assert_approx_eq!(vec3!(0.0f64, 1.3f64, 2.6f64).min_element(), 0.0f64);
    assert_approx_eq!(vec3!(16.2f64, f64::NAN, 27.0f64).min_element(), 16.2f64);
    assert_approx_eq!(vec3!(-0.0f64, 0.0f64, 27.0f64).min_element(), -0.0f64);
}

#[test]
fn test_dvec3_max_element() {
    assert_approx_eq!(vec3!(0.0f64, 1.3f64, 2.6f64).max_element(), 2.6f64);
    assert_approx_eq!(vec3!(16.2f64, f64::NAN, 27.0f64).max_element(), 27.0f64);
    assert_approx_eq!(vec3!(-0.0f64, 0.0f64, 27.0f64).max_element(), 27.0f64);
}

#[test]
fn test_dvec3_signum() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).signum(),
        vec3!(1.0f64, 1.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).signum(),
        vec3!(1.0f64, f64::NAN, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec3!(-0.0f64, 0.0f64, 27.0f64).signum(),
        vec3!(-1.0f64, 1.0f64, 1.0f64)
    );
}

#[test]
fn test_dvec3_abs() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).abs(),
        vec3!(0.0f64, 1.3f64, 2.6f64)
    );
    assert_approx_vec_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).abs(),
        vec3!(16.2f64, f64::NAN, 27.0f64)
    );
    assert_approx_vec_eq!(
        vec3!(-0.0f64, 0.0f64, 27.0f64).abs(),
        vec3!(0.0f64, 0.0f64, 27.0f64)
    );
}

#[test]
fn test_dvec3_positive_sign_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).positive_sign_mask(),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).positive_sign_mask(),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(-0.0f64, 0.0f64, 27.0f64).positive_sign_mask(),
        vec3!(false, true, true)
    );
}

#[test]
fn test_dvec3_negative_sign_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).negative_sign_mask(),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).negative_sign_mask(),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(-0.0f64, 0.0f64, 27.0f64).negative_sign_mask(),
        vec3!(true, false, false)
    );
}

#[test]
fn test_dvec3_nan_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).nan_mask(),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).nan_mask(),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec3!(16.2f64, f64::INFINITY, 27.0f64).nan_mask(),
        vec3!(false, false, false)
    );
}

#[test]
fn test_dvec3_finite_mask() {
    assert_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).finite_mask(),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).finite_mask(),
        vec3!(true, false, true)
    );
    assert_eq!(
        vec3!(16.2f64, f64::INFINITY, 27.0f64).finite_mask(),
        vec3!(true, false, true)
    );
}

#[test]
fn test_dvec3_is_nan() {
    assert_eq!(vec3!(0.0f64, 1.3f64, 2.6f64).is_nan(), false);
    assert_eq!(vec3!(16.2f64, f64::NAN, 27.0f64).is_nan(), true);
    assert_eq!(vec3!(16.2f64, f64::INFINITY, 27.0f64).is_nan(), false);
}

#[test]
fn test_dvec3_is_finite() {
    assert_eq!(vec3!(0.0f64, 1.3f64, 2.6f64).is_finite(), true);
    assert_eq!(vec3!(16.2f64, f64::NAN, 27.0f64).is_finite(), false);
    assert_eq!(vec3!(16.2f64, f64::INFINITY, 27.0f64).is_finite(), false);
}

#[test]
fn test_dvec3_normalize() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).normalize(),
        vec3!(0.0f64, 0.4472f64, 0.8944f64)
    );
    assert_approx_vec_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).normalize(),
        vec3!(f64::NAN, f64::NAN, f64::NAN)
    );
    assert_approx_vec_eq!(
        Vec3::<f64>::ZERO.normalize(),
        vec3!(f64::NAN, f64::NAN, f64::NAN)
    );
}

#[test]
fn test_dvec3_checked_normalize() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).checked_normalize().unwrap(),
        vec3!(0.0f64, 0.4472f64, 0.8944f64)
    );
    assert_eq!(vec3!(16.2f64, f64::NAN, 27.0f64).checked_normalize(), None);
    assert_eq!(Vec3::<f64>::ZERO.checked_normalize(), None);
}

#[test]
fn test_dvec3_normalize_or() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).normalize_or(Vec3::<f64>::MAX),
        vec3!(0.0f64, 0.4472f64, 0.8944f64)
    );
    assert_approx_vec_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).normalize_or(Vec3::<f64>::MAX),
        Vec3::<f64>::MAX
    );
    assert_approx_vec_eq!(
        Vec3::<f64>::ZERO.normalize_or(Vec3::<f64>::MAX),
        Vec3::<f64>::MAX
    );
}

#[test]
fn test_dvec3_normalize_or_zero() {
    assert_approx_vec_eq!(
        vec3!(0.0f64, 1.3f64, 2.6f64).normalize_or_zero(),
        vec3!(0.0f64, 0.4472f64, 0.8944f64)
    );
    assert_approx_vec_eq!(
        vec3!(16.2f64, f64::NAN, 27.0f64).normalize_or_zero(),
        Vec3::<f64>::ZERO
    );
    assert_approx_vec_eq!(Vec3::<f64>::ZERO.normalize_or_zero(), Vec3::<f64>::ZERO);
}

// The following code is generated for all float primitives

#[test]
fn test_dvec4_neg() {
    assert_approx_vec_eq!(
        -vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64),
        vec4!(-0.0f64, -1.3f64, -2.6f64, -3.9f64)
    );
    assert_approx_vec_eq!(
        -vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(-21.6f64, f64::NAN, -32.4f64, -37.8f64)
    );
}

#[test]
fn test_dvec4_add() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(21.6f64, 28.3f64, 35.0f64, 41.7f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(21.6f64, f64::NAN, 35.0f64, 41.7f64)
    );
}

#[test]
fn test_dvec4_sub() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) - vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(-21.6f64, -25.7f64, -29.8f64, -33.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) - vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(-21.6f64, f64::NAN, -29.8f64, -33.9f64)
    );
}

#[test]
fn test_dvec4_mul() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) * vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(0.0f64, 35.1f64, 84.24f64, 147.42f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) * vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(0.0f64, f64::NAN, 84.24f64, 147.42f64)
    );
}

#[test]
fn test_dvec4_div() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(0.0f64, 0.0481f64, 0.0802f64, 0.1032f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(0.0f64, f64::NAN, 0.0802f64, 0.1032f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4!(-21.6f64, 0.0f64, 32.4f64, 75.6f64),
        vec4!(-0.0f64, f64::INFINITY, 0.0802f64, 0.0516f64)
    );
}

#[test]
fn test_dvec4_rem() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) % vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64) % vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4!(0.0f64, f64::NAN, 2.6f64, 3.9f64)
    );
}

#[test]
fn test_dvec4_sum() {
    assert_approx_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).sum(), 7.8f64);
}

#[test]
fn test_dvec4_product() {
    assert_approx_eq!(
        vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64).product(),
        714256.704f64
    );
}

#[test]
fn test_dvec4_mag_sq() {
    assert_approx_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).mag_sq(), 23.66f64);
}

#[test]
fn test_dvec4_dot() {
    assert_approx_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).dot(vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        266.76f64
    );
}

#[test]
fn test_dvec4_div_euclid() {
    assert_approx_vec_eq!(
        vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64).div_euclid(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)),
        vec4!(f64::INFINITY, 20.0f64, 12.0f64, 9.0f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).div_euclid(vec4!(
            21.6f64,
            f64::NAN,
            32.4f64,
            37.8f64
        )),
        vec4!(0.0f64, f64::NAN, 0.0f64, 0.0f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).div_euclid(vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64)),
        vec4!(f64::NAN, f64::INFINITY, 0.0f64, 0.0f64)
    );
}

#[test]
fn test_dvec4_rem_euclid() {
    assert_approx_vec_eq!(
        vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64).rem_euclid(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)),
        vec4!(f64::NAN, 1.0f64, 1.2f64, 2.7f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).rem_euclid(vec4!(
            21.6f64,
            f64::NAN,
            32.4f64,
            37.8f64
        )),
        vec4!(0.0f64, f64::NAN, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).rem_euclid(vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64)),
        vec4!(f64::NAN, f64::NAN, 2.6f64, 3.9f64)
    );
}

#[test]
fn test_dvec4_min() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min(vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min(vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64)),
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, 0.0f64, 32.4f64, 37.8f64).min(vec4!(21.6f64, -0.0f64, 32.4f64, 37.8f64)),
        vec4!(21.6f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4_max() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max(vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        vec4!(21.6f64, 27.0f64, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max(vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64)),
        vec4!(21.6f64, 1.3f64, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, 0.0f64, 32.4f64, 37.8f64).max(vec4!(21.6f64, -0.0f64, 32.4f64, 37.8f64)),
        vec4!(21.6f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4_min_element() {
    assert_approx_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min_element(), 0.0f64);
    assert_approx_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).min_element(),
        21.6f64
    );
    assert_approx_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).min_element(),
        -0.0f64
    );
}

#[test]
fn test_dvec4_max_element() {
    assert_approx_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max_element(), 3.9f64);
    assert_approx_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).max_element(),
        37.8f64
    );
    assert_approx_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).max_element(),
        37.8f64
    );
}

#[test]
fn test_dvec4_signum() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).signum(),
        vec4!(1.0f64, 1.0f64, 1.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).signum(),
        vec4!(1.0f64, f64::NAN, 1.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).signum(),
        vec4!(-1.0f64, 1.0f64, 1.0f64, 1.0f64)
    );
}

#[test]
fn test_dvec4_abs() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).abs(),
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).abs(),
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).abs(),
        vec4!(0.0f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4_positive_sign_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).positive_sign_mask(),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).positive_sign_mask(),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).positive_sign_mask(),
        vec4!(false, true, true, true)
    );
}

#[test]
fn test_dvec4_negative_sign_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).negative_sign_mask(),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).negative_sign_mask(),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).negative_sign_mask(),
        vec4!(true, false, false, false)
    );
}

#[test]
fn test_dvec4_nan_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).nan_mask(),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).nan_mask(),
        vec4!(false, true, false, false)
    );
    assert_eq!(
        vec4!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).nan_mask(),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_dvec4_finite_mask() {
    assert_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).finite_mask(),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).finite_mask(),
        vec4!(true, false, true, true)
    );
    assert_eq!(
        vec4!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).finite_mask(),
        vec4!(true, false, true, true)
    );
}

#[test]
fn test_dvec4_is_nan() {
    assert_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).is_nan(), false);
    assert_eq!(vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).is_nan(), true);
    assert_eq!(
        vec4!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).is_nan(),
        false
    );
}

#[test]
fn test_dvec4_is_finite() {
    assert_eq!(vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).is_finite(), true);
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).is_finite(),
        false
    );
    assert_eq!(
        vec4!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).is_finite(),
        false
    );
}

#[test]
fn test_dvec4_normalize() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize(),
        vec4!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize(),
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN)
    );
    assert_approx_vec_eq!(
        Vec4::<f64>::ZERO.normalize(),
        vec4!(f64::NAN, f64::NAN, f64::NAN, f64::NAN)
    );
}

#[test]
fn test_dvec4_checked_normalize() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
            .checked_normalize()
            .unwrap(),
        vec4!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).checked_normalize(),
        None
    );
    assert_eq!(Vec4::<f64>::ZERO.checked_normalize(), None);
}

#[test]
fn test_dvec4_normalize_or() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize_or(Vec4::<f64>::MAX),
        vec4!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize_or(Vec4::<f64>::MAX),
        Vec4::<f64>::MAX
    );
    assert_approx_vec_eq!(
        Vec4::<f64>::ZERO.normalize_or(Vec4::<f64>::MAX),
        Vec4::<f64>::MAX
    );
}

#[test]
fn test_dvec4_normalize_or_zero() {
    assert_approx_vec_eq!(
        vec4!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize_or_zero(),
        vec4!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize_or_zero(),
        Vec4::<f64>::ZERO
    );
    assert_approx_vec_eq!(Vec4::<f64>::ZERO.normalize_or_zero(), Vec4::<f64>::ZERO);
}

// The following code is generated for all float primitives

#[test]
fn test_dvec4s_neg() {
    assert_approx_vec_eq!(
        -vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64),
        vec4s!(-0.0f64, -1.3f64, -2.6f64, -3.9f64)
    );
    assert_approx_vec_eq!(
        -vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4s!(-21.6f64, f64::NAN, -32.4f64, -37.8f64)
    );
}

#[test]
fn test_dvec4s_add() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4s!(21.6f64, 28.3f64, 35.0f64, 41.7f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4s!(21.6f64, f64::NAN, 35.0f64, 41.7f64)
    );
}

#[test]
fn test_dvec4s_sub() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) - vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4s!(-21.6f64, -25.7f64, -29.8f64, -33.9f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) - vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4s!(-21.6f64, f64::NAN, -29.8f64, -33.9f64)
    );
}

#[test]
fn test_dvec4s_mul() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) * vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4s!(0.0f64, 35.1f64, 84.24f64, 147.42f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) * vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4s!(0.0f64, f64::NAN, 84.24f64, 147.42f64)
    );
}

#[test]
fn test_dvec4s_div() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4s!(0.0f64, 0.0481f64, 0.0802f64, 0.1032f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4s!(0.0f64, f64::NAN, 0.0802f64, 0.1032f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) / vec4s!(-21.6f64, 0.0f64, 32.4f64, 75.6f64),
        vec4s!(-0.0f64, f64::INFINITY, 0.0802f64, 0.0516f64)
    );
}

#[test]
fn test_dvec4s_rem() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) % vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) % vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64),
        vec4s!(0.0f64, f64::NAN, 2.6f64, 3.9f64)
    );
}

#[test]
fn test_dvec4s_add_assign() {
    let mut vec = vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64);
    vec += vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64);
    assert_approx_vec_eq!(vec, vec4s!(21.6f64, 28.3f64, 35.0f64, 41.7f64));
}

#[test]
fn test_dvec4s_neg_ref() {
    assert_approx_vec_eq!(
        -&vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64),
        vec4s!(-0.0f64, -1.3f64, -2.6f64, -3.9f64)
    );
}

#[test]
fn test_dvec4s_add_ref() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + &vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4s!(21.6f64, 28.3f64, 35.0f64, 41.7f64)
    );
    assert_approx_vec_eq!(
        &vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4s!(21.6f64, 28.3f64, 35.0f64, 41.7f64)
    );
    assert_approx_vec_eq!(
        &vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + &vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64),
        vec4s!(21.6f64, 28.3f64, 35.0f64, 41.7f64)
    );
}

#[test]
fn test_dvec4s_add_assign_ref() {
    let mut vec = vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64);
    vec += &vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64);
    assert_approx_vec_eq!(vec, vec4s!(21.6f64, 28.3f64, 35.0f64, 41.7f64));
}

#[test]
fn test_dvec4s_add_scalar() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64) + 1.0,
        vec4s!(1.0f64, 2.3f64, 3.6f64, 4.9f64)
    );
}

#[test]
fn test_dvec4s_sum() {
    assert_approx_eq!(vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).sum(), 7.8f64);
}

#[test]
fn test_dvec4s_product() {
    assert_approx_eq!(
        vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64).product(),
        714256.704f64
    );
}

#[test]
fn test_dvec4s_mag_sq() {
    assert_approx_eq!(vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).mag_sq(), 23.66f64);
}

#[test]
fn test_dvec4s_dot() {
    assert_approx_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).dot(vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        266.76f64
    );
}

#[test]
fn test_dvec4s_div_euclid() {
    assert_approx_vec_eq!(
        vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64)
            .div_euclid(vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)),
        vec4s!(f64::INFINITY, 20.0f64, 12.0f64, 9.0f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).div_euclid(vec4s!(
            21.6f64,
            f64::NAN,
            32.4f64,
            37.8f64
        )),
        vec4s!(0.0f64, f64::NAN, 0.0f64, 0.0f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
            .div_euclid(vec4s!(-0.0f64, 0.0f64, 32.4f64, 37.8f64)),
        vec4s!(f64::NAN, f64::INFINITY, 0.0f64, 0.0f64)
    );
}

#[test]
fn test_dvec4s_rem_euclid() {
    assert_approx_vec_eq!(
        vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64)
            .rem_euclid(vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)),
        vec4s!(f64::NAN, 1.0f64, 1.2f64, 2.7f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).rem_euclid(vec4s!(
            21.6f64,
            f64::NAN,
            32.4f64,
            37.8f64
        )),
        vec4s!(0.0f64, f64::NAN, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
            .rem_euclid(vec4s!(-0.0f64, 0.0f64, 32.4f64, 37.8f64)),
        vec4s!(f64::NAN, f64::NAN, 2.6f64, 3.9f64)
    );
}

#[test]
fn test_dvec4s_min() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min(vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min(vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64)),
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4s!(21.6f64, 0.0f64, 32.4f64, 37.8f64).min(vec4s!(21.6f64, -0.0f64, 32.4f64, 37.8f64)),
        vec4s!(21.6f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4s_max() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max(vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64)),
        vec4s!(21.6f64, 27.0f64, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max(vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64)),
        vec4s!(21.6f64, 1.3f64, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4s!(21.6f64, 0.0f64, 32.4f64, 37.8f64).max(vec4s!(21.6f64, -0.0f64, 32.4f64, 37.8f64)),
        vec4s!(21.6f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4s_min_element() {
    assert_approx_eq!(vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).min_element(), 0.0f64);
    assert_approx_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).min_element(),
        21.6f64
    );
    assert_approx_eq!(
        vec4s!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).min_element(),
        -0.0f64
    );
}

#[test]
fn test_dvec4s_max_element() {
    assert_approx_eq!(vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).max_element(), 3.9f64);
    assert_approx_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).max_element(),
        37.8f64
    );
    assert_approx_eq!(
        vec4s!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).max_element(),
        37.8f64
    );
}

#[test]
fn test_dvec4s_signum() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).signum(),
        vec4s!(1.0f64, 1.0f64, 1.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).signum(),
        vec4s!(1.0f64, f64::NAN, 1.0f64, 1.0f64)
    );
    assert_approx_vec_eq!(
        vec4s!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).signum(),
        vec4s!(-1.0f64, 1.0f64, 1.0f64, 1.0f64)
    );
}

#[test]
fn test_dvec4s_abs() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).abs(),
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
    );
    assert_approx_vec_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).abs(),
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64)
    );
    assert_approx_vec_eq!(
        vec4s!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).abs(),
        vec4s!(0.0f64, 0.0f64, 32.4f64, 37.8f64)
    );
}

#[test]
fn test_dvec4s_positive_sign_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).positive_sign_mask(),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).positive_sign_mask(),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).positive_sign_mask(),
        vec4s!(false, true, true, true)
    );
}

#[test]
fn test_dvec4s_negative_sign_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).negative_sign_mask(),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).negative_sign_mask(),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(-0.0f64, 0.0f64, 32.4f64, 37.8f64).negative_sign_mask(),
        vec4s!(true, false, false, false)
    );
}

#[test]
fn test_dvec4s_nan_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).nan_mask(),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).nan_mask(),
        vec4s!(false, true, false, false)
    );
    assert_eq!(
        vec4s!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).nan_mask(),
        vec4s!(false, false, false, false)
    );
}

#[test]
fn test_dvec4s_finite_mask() {
    assert_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).finite_mask(),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).finite_mask(),
        vec4s!(true, false, true, true)
    );
    assert_eq!(
        vec4s!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).finite_mask(),
        vec4s!(true, false, true, true)
    );
}

#[test]
fn test_dvec4s_is_nan() {
    assert_eq!(vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).is_nan(), false);
    assert_eq!(vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).is_nan(), true);
    assert_eq!(
        vec4s!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).is_nan(),
        false
    );
}

#[test]
fn test_dvec4s_is_finite() {
    assert_eq!(vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).is_finite(), true);
    assert_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).is_finite(),
        false
    );
    assert_eq!(
        vec4s!(21.6f64, f64::INFINITY, 32.4f64, 37.8f64).is_finite(),
        false
    );
}

#[test]
fn test_dvec4s_normalize() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize(),
        vec4s!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize(),
        vec4s!(f64::NAN, f64::NAN, f64::NAN, f64::NAN)
    );
    assert_approx_vec_eq!(
        Vec4S::<f64>::ZERO.normalize(),
        vec4s!(f64::NAN, f64::NAN, f64::NAN, f64::NAN)
    );
}

#[test]
fn test_dvec4s_checked_normalize() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64)
            .checked_normalize()
            .unwrap(),
        vec4s!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).checked_normalize(),
        None
    );
    assert_eq!(Vec4S::<f64>::ZERO.checked_normalize(), None);
}

#[test]
fn test_dvec4s_normalize_or() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize_or(Vec4S::<f64>::MAX),
        vec4s!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize_or(Vec4S::<f64>::MAX),
        Vec4S::<f64>::MAX
    );
    assert_approx_vec_eq!(
        Vec4S::<f64>::ZERO.normalize_or(Vec4S::<f64>::MAX),
        Vec4S::<f64>::MAX
    );
}

#[test]
fn test_dvec4s_normalize_or_zero() {
    assert_approx_vec_eq!(
        vec4s!(0.0f64, 1.3f64, 2.6f64, 3.9f64).normalize_or_zero(),
        vec4s!(0.0f64, 0.2673f64, 0.5345f64, 0.8018f64)
    );
    assert_approx_vec_eq!(
        vec4s!(21.6f64, f64::NAN, 32.4f64, 37.8f64).normalize_or_zero(),
        Vec4S::<f64>::ZERO
    );
    assert_approx_vec_eq!(Vec4S::<f64>::ZERO.normalize_or_zero(), Vec4S::<f64>::ZERO);
}
