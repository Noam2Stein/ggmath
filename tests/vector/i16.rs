// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_simd_primitive_fns() {
    assert_eq!(Vec2::from_array([1i16, 2i16]).as_array(), [1i16, 2i16]);
    assert_eq!(
        Vec3::from_array([1i16, 2i16, 3i16]).as_array(),
        [1i16, 2i16, 3i16]
    );
    assert_eq!(
        Vec4::from_array([1i16, 2i16, 3i16, 4i16]).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(Vec2::from_fn(|i| [1i16, 2i16][i]).as_array(), [1i16, 2i16]);
    assert_eq!(
        Vec3::from_fn(|i| [1i16, 2i16, 3i16][i]).as_array(),
        [1i16, 2i16, 3i16]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1i16, 2i16, 3i16, 4i16][i]).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(
        Vec2::const_from_array([1i16, 2i16]).as_array(),
        [1i16, 2i16]
    );
    assert_eq!(
        Vec3::const_from_array([1i16, 2i16, 3i16]).as_array(),
        [1i16, 2i16, 3i16]
    );
    assert_eq!(
        Vec4::const_from_array([1i16, 2i16, 3i16, 4i16]).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(vec2!(1i16, 2i16).as_array(), [1i16, 2i16]);
    assert_eq!(vec2!(vec2!(1i16, 2i16)).as_array(), [1i16, 2i16]);
    assert_eq!(vec3!(1i16, 2i16, 3i16).as_array(), [1i16, 2i16, 3i16]);
    assert_eq!(
        vec3!(1i16, vec2!(2i16, 3i16)).as_array(),
        [1i16, 2i16, 3i16]
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );
    assert_eq!(
        vec4!(1i16, vec2!(2i16, 3i16), 4i16).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );
    assert_eq!(
        vec4!(
            1i16,
            vec2!(2i16, 3i16),
            Vector::<1, i16, Simd>::from_array([4i16])
        )
        .as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(vec2!(1i16).as_array(), [1i16; 2]);
    assert_eq!(vec3!(1i16).as_array(), [1i16; 3]);
    assert_eq!(vec4!(1i16).as_array(), [1i16; 4]);

    assert_eq!(vec2!(1i16, 2i16).as_array_ref(), &[1i16, 2i16]);
    assert_eq!(vec3!(1i16, 2i16, 3i16).as_array_ref(), &[1i16, 2i16, 3i16]);
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).as_array_ref(),
        &[1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(vec2!(1i16, 2i16).as_mut_array(), &mut [1i16, 2i16]);
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).as_mut_array(),
        &mut [1i16, 2i16, 3i16]
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).as_mut_array(),
        &mut [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(vec2!(1i16, 2i16).as_simd(), vec2!(1i16, 2i16));
    assert_eq!(vec3!(1i16, 2i16, 3i16).as_simd(), vec3!(1i16, 2i16, 3i16));
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).as_simd(),
        vec4!(1i16, 2i16, 3i16, 4i16)
    );

    assert_eq!(vec2!(1i16, 2i16).as_nonsimd(), vec2s!(1i16, 2i16));
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).as_nonsimd(),
        vec3s!(1i16, 2i16, 3i16)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).as_nonsimd(),
        vec4s!(1i16, 2i16, 3i16, 4i16)
    );

    assert_eq!(vec2!(1i16, 2i16).len(), 2);
    assert_eq!(vec3!(1i16, 2i16, 3i16).len(), 3);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).len(), 4);

    assert_eq!(vec2!(1i16, 2i16).is_simd(), true);
    assert_eq!(vec3!(1i16, 2i16, 3i16).is_simd(), true);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).is_simd(), true);

    assert_eq!(vec2!(1i16, 2i16).get(0), Some(1i16));
    assert_eq!(vec2!(1i16, 2i16).get(1), Some(2i16));
    assert_eq!(vec2!(1i16, 2i16).get(2), None);
    assert_eq!(vec2!(1i16, 2i16).get(3), None);

    assert_eq!(vec3!(1i16, 2i16, 3i16).get(0), Some(1i16));
    assert_eq!(vec3!(1i16, 2i16, 3i16).get(1), Some(2i16));
    assert_eq!(vec3!(1i16, 2i16, 3i16).get(2), Some(3i16));
    assert_eq!(vec3!(1i16, 2i16, 3i16).get(3), None);
    assert_eq!(vec3!(1i16, 2i16, 3i16).get(4), None);

    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get(0), Some(1i16));
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get(1), Some(2i16));
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get(2), Some(3i16));
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get(3), Some(4i16));
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get(4), None);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get(5), None);

    assert_eq!(vec2!(1i16, 2i16).get_mut(0), Some(&mut 1i16));
    assert_eq!(vec2!(1i16, 2i16).get_mut(1), Some(&mut 2i16));
    assert_eq!(vec2!(1i16, 2i16).get_mut(2), None);
    assert_eq!(vec2!(1i16, 2i16).get_mut(3), None);

    assert_eq!(vec3!(1i16, 2i16, 3i16).get_mut(0), Some(&mut 1i16));
    assert_eq!(vec3!(1i16, 2i16, 3i16).get_mut(1), Some(&mut 2i16));
    assert_eq!(vec3!(1i16, 2i16, 3i16).get_mut(2), Some(&mut 3i16));
    assert_eq!(vec3!(1i16, 2i16, 3i16).get_mut(3), None);
    assert_eq!(vec3!(1i16, 2i16, 3i16).get_mut(4), None);

    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_mut(0), Some(&mut 1i16));
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_mut(1), Some(&mut 2i16));
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_mut(2), Some(&mut 3i16));
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_mut(3), Some(&mut 4i16));
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_mut(4), None);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_mut(5), None);

    unsafe {
        assert_eq!(vec2!(1i16, 2i16).get_unchecked(0), 1i16);
        assert_eq!(vec2!(1i16, 2i16).get_unchecked(1), 2i16);

        assert_eq!(vec3!(1i16, 2i16, 3i16).get_unchecked(0), 1i16);
        assert_eq!(vec3!(1i16, 2i16, 3i16).get_unchecked(1), 2i16);
        assert_eq!(vec3!(1i16, 2i16, 3i16).get_unchecked(2), 3i16);

        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_unchecked(0), 1i16);
        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_unchecked(1), 2i16);
        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_unchecked(2), 3i16);
        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).get_unchecked(3), 4i16);

        assert_eq!(vec2!(1i16, 2i16).get_unchecked_mut(0), &mut 1i16);
        assert_eq!(vec2!(1i16, 2i16).get_unchecked_mut(1), &mut 2i16);

        assert_eq!(vec3!(1i16, 2i16, 3i16).get_unchecked_mut(0), &mut 1i16);
        assert_eq!(vec3!(1i16, 2i16, 3i16).get_unchecked_mut(1), &mut 2i16);
        assert_eq!(vec3!(1i16, 2i16, 3i16).get_unchecked_mut(2), &mut 3i16);

        assert_eq!(
            vec4!(1i16, 2i16, 3i16, 4i16).get_unchecked_mut(0),
            &mut 1i16
        );
        assert_eq!(
            vec4!(1i16, 2i16, 3i16, 4i16).get_unchecked_mut(1),
            &mut 2i16
        );
        assert_eq!(
            vec4!(1i16, 2i16, 3i16, 4i16).get_unchecked_mut(2),
            &mut 3i16
        );
        assert_eq!(
            vec4!(1i16, 2i16, 3i16, 4i16).get_unchecked_mut(3),
            &mut 4i16
        );
    }

    assert_eq!(
        vec2!(1i16, 2i16).iter().collect::<Vec<i16>>(),
        vec![1i16, 2i16]
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).iter().collect::<Vec<i16>>(),
        vec![1i16, 2i16, 3i16]
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).iter().collect::<Vec<i16>>(),
        vec![1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(
        vec2!(1i16, 2i16).iter_mut().collect::<Vec<&mut i16>>(),
        vec![&mut 1i16, &mut 2i16]
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16)
            .iter_mut()
            .collect::<Vec<&mut i16>>(),
        vec![&mut 1i16, &mut 2i16, &mut 3i16]
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16)
            .iter_mut()
            .collect::<Vec<&mut i16>>(),
        vec![&mut 1i16, &mut 2i16, &mut 3i16, &mut 4i16]
    );

    assert_eq!(vec2!(1i16, 2i16).map(|x| x == 2i16), vec2!(false, true));
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).map(|x| x == 2i16),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).map(|x| x == 2i16),
        vec4!(false, true, false, false)
    );

    assert_eq!(
        vec2!(1i16, 2i16).zip(vec2!(2i16, 1i16)),
        vec2!((1i16, 2i16), (2i16, 1i16))
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).zip(vec3!(2i16, 3i16, 1i16)),
        vec3!((1i16, 2i16), (2i16, 3i16), (3i16, 1i16))
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).zip(vec4!(2i16, 3i16, 4i16, 1i16)),
        vec4!((1i16, 2i16), (2i16, 3i16), (3i16, 4i16), (4i16, 1i16))
    );

    assert_eq!(vec2!(1i16, 2i16).reverse(), vec2!(2i16, 1i16));
    assert_eq!(vec3!(1i16, 2i16, 3i16).reverse(), vec3!(3i16, 2i16, 1i16));
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).reverse(),
        vec4!(4i16, 3i16, 2i16, 1i16)
    );

    assert_eq!(
        vec2!(1i16, 2i16).get_const_vec2::<0, 1>(),
        vec2!(1i16, 2i16)
    );
    assert_eq!(
        vec2!(1i16, 2i16).get_const_vec2::<1, 0>(),
        vec2!(2i16, 1i16)
    );
    assert_eq!(
        vec2!(1i16, 2i16).get_const_vec2::<1, 1>(),
        vec2!(2i16, 2i16)
    );

    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec2::<0, 1>(),
        vec2!(1i16, 2i16)
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec2::<0, 2>(),
        vec2!(1i16, 3i16)
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec2::<2, 1>(),
        vec2!(3i16, 2i16)
    );

    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec2::<0, 1>(),
        vec2!(1i16, 2i16)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec2::<1, 3>(),
        vec2!(2i16, 4i16)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec2::<3, 1>(),
        vec2!(4i16, 2i16)
    );

    assert_eq!(
        vec2!(1i16, 2i16).get_const_vec3::<0, 1, 1>(),
        vec3!(1i16, 2i16, 2i16)
    );
    assert_eq!(
        vec2!(1i16, 2i16).get_const_vec3::<1, 0, 1>(),
        vec3!(2i16, 1i16, 2i16)
    );

    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec3::<0, 1, 2>(),
        vec3!(1i16, 2i16, 3i16)
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec3::<1, 0, 2>(),
        vec3!(2i16, 1i16, 3i16)
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec3::<2, 1, 0>(),
        vec3!(3i16, 2i16, 1i16)
    );

    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec3::<0, 1, 2>(),
        vec3!(1i16, 2i16, 3i16)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec3::<1, 0, 2>(),
        vec3!(2i16, 1i16, 3i16)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec3::<2, 1, 0>(),
        vec3!(3i16, 2i16, 1i16)
    );

    assert_eq!(
        vec2!(1i16, 2i16).get_const_vec4::<0, 1, 1, 0>(),
        vec4!(1i16, 2i16, 2i16, 1i16)
    );
    assert_eq!(
        vec2!(1i16, 2i16).get_const_vec4::<1, 0, 1, 0>(),
        vec4!(2i16, 1i16, 2i16, 1i16)
    );
    assert_eq!(
        vec2!(1i16, 2i16).get_const_vec4::<1, 1, 0, 0>(),
        vec4!(2i16, 2i16, 1i16, 1i16)
    );

    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec4::<0, 1, 2, 0>(),
        vec4!(1i16, 2i16, 3i16, 1i16)
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec4::<1, 0, 2, 0>(),
        vec4!(2i16, 1i16, 3i16, 1i16)
    );
    assert_eq!(
        vec3!(1i16, 2i16, 3i16).get_const_vec4::<2, 1, 0, 0>(),
        vec4!(3i16, 2i16, 1i16, 1i16)
    );

    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec4::<0, 1, 2, 3>(),
        vec4!(1i16, 2i16, 3i16, 4i16)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec4::<1, 0, 2, 3>(),
        vec4!(2i16, 1i16, 3i16, 4i16)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec4::<2, 1, 0, 3>(),
        vec4!(3i16, 2i16, 1i16, 4i16)
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16).get_const_vec4::<3, 1, 2, 0>(),
        vec4!(4i16, 2i16, 3i16, 1i16)
    );

    assert_eq!(vec2!(1i16, 2i16)[0], 1i16);
    assert_eq!(vec2!(1i16, 2i16)[1], 2i16);

    assert_eq!(vec3!(1i16, 2i16, 3i16)[0], 1i16);
    assert_eq!(vec3!(1i16, 2i16, 3i16)[1], 2i16);
    assert_eq!(vec3!(1i16, 2i16, 3i16)[2], 3i16);

    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16)[0], 1i16);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16)[1], 2i16);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16)[2], 3i16);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16)[3], 4i16);

    assert_eq!(&mut vec2!(1i16, 2i16)[0], &mut 1i16);
    assert_eq!(&mut vec2!(1i16, 2i16)[1], &mut 2i16);

    assert_eq!(&mut vec3!(1i16, 2i16, 3i16)[0], &mut 1i16);
    assert_eq!(&mut vec3!(1i16, 2i16, 3i16)[1], &mut 2i16);
    assert_eq!(&mut vec3!(1i16, 2i16, 3i16)[2], &mut 3i16);

    assert_eq!(&mut vec4!(1i16, 2i16, 3i16, 4i16)[0], &mut 1i16);
    assert_eq!(&mut vec4!(1i16, 2i16, 3i16, 4i16)[1], &mut 2i16);
    assert_eq!(&mut vec4!(1i16, 2i16, 3i16, 4i16)[2], &mut 3i16);
    assert_eq!(&mut vec4!(1i16, 2i16, 3i16, 4i16)[3], &mut 4i16);

    assert_eq!(vec2!(1i16, 2i16) == vec2!(1i16, 2i16), true);
    assert_eq!(vec2!(1i16, 2i16) == vec2!(2i16, 1i16), false);
    assert_eq!(vec2!(1i16, 2i16) == vec2!(2i16, 2i16), false);

    assert_eq!(vec3!(1i16, 2i16, 3i16) == vec3!(1i16, 2i16, 3i16), true);
    assert_eq!(vec3!(1i16, 2i16, 3i16) == vec3!(4i16, 3i16, 2i16), false);
    assert_eq!(vec3!(1i16, 2i16, 3i16) == vec3!(2i16, 2i16, 3i16), false);

    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16) == vec4!(1i16, 2i16, 3i16, 4i16),
        true
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16) == vec4!(4i16, 3i16, 2i16, 1i16),
        false
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16) == vec4!(2i16, 2i16, 2i16, 4i16),
        false
    );

    assert_eq!(vec2!(1i16, 2i16) != vec2!(1i16, 2i16), false);
    assert_eq!(vec2!(1i16, 2i16) != vec2!(2i16, 1i16), true);
    assert_eq!(vec2!(1i16, 2i16) != vec2!(2i16, 2i16), true);

    assert_eq!(vec3!(1i16, 2i16, 3i16) != vec3!(1i16, 2i16, 3i16), false);
    assert_eq!(vec3!(1i16, 2i16, 3i16) != vec3!(4i16, 3i16, 2i16), true);
    assert_eq!(vec3!(1i16, 2i16, 3i16) != vec3!(2i16, 2i16, 3i16), true);

    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16) != vec4!(1i16, 2i16, 3i16, 4i16),
        false
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16) != vec4!(4i16, 3i16, 2i16, 1i16),
        true
    );
    assert_eq!(
        vec4!(1i16, 2i16, 3i16, 4i16) != vec4!(2i16, 2i16, 2i16, 4i16),
        true
    );

    assert_eq!(vec2!(1i16, 2i16).to_string(), "(1, 2)");
    assert_eq!(vec3!(1i16, 2i16, 3i16).to_string(), "(1, 2, 3)");
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2!(1i16, 2i16)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3!(1i16, 2i16, 3i16)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4!(1i16, 2i16, 3i16, 4i16)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2!(1i16, 2i16).x, 1i16);
    assert_eq!(vec2!(1i16, 2i16).y, 2i16);

    assert_eq!(vec3!(1i16, 2i16, 3i16).x, 1i16);
    assert_eq!(vec3!(1i16, 2i16, 3i16).y, 2i16);
    assert_eq!(vec3!(1i16, 2i16, 3i16).z, 3i16);

    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).x, 1i16);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).y, 2i16);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).z, 3i16);
    assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).w, 4i16);

    assert_eq!(&mut vec2!(1i16, 2i16).x, &mut 1i16);
    assert_eq!(&mut vec2!(1i16, 2i16).y, &mut 2i16);

    assert_eq!(&mut vec3!(1i16, 2i16, 3i16).x, &mut 1i16);
    assert_eq!(&mut vec3!(1i16, 2i16, 3i16).y, &mut 2i16);
    assert_eq!(&mut vec3!(1i16, 2i16, 3i16).z, &mut 3i16);

    assert_eq!(&mut vec4!(1i16, 2i16, 3i16, 4i16).x, &mut 1i16);
    assert_eq!(&mut vec4!(1i16, 2i16, 3i16, 4i16).y, &mut 2i16);
    assert_eq!(&mut vec4!(1i16, 2i16, 3i16, 4i16).z, &mut 3i16);
    assert_eq!(&mut vec4!(1i16, 2i16, 3i16, 4i16).w, &mut 4i16);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2!(1i16, 2i16).xy(), vec2!(1i16, 2i16));
        assert_eq!(vec2!(1i16, 2i16).yx(), vec2!(2i16, 1i16));
        assert_eq!(vec2!(1i16, 2i16).yy(), vec2!(2i16, 2i16));

        assert_eq!(vec3!(1i16, 2i16, 3i16).xy(), vec2!(1i16, 2i16));
        assert_eq!(vec3!(1i16, 2i16, 3i16).xz(), vec2!(1i16, 3i16));
        assert_eq!(vec3!(1i16, 2i16, 3i16).zy(), vec2!(3i16, 2i16));

        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).xy(), vec2!(1i16, 2i16));
        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).yw(), vec2!(2i16, 4i16));
        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).wy(), vec2!(4i16, 2i16));

        assert_eq!(vec2!(1i16, 2i16).xyy(), vec3!(1i16, 2i16, 2i16));
        assert_eq!(vec2!(1i16, 2i16).yxy(), vec3!(2i16, 1i16, 2i16));

        assert_eq!(vec3!(1i16, 2i16, 3i16).xyz(), vec3!(1i16, 2i16, 3i16));
        assert_eq!(vec3!(1i16, 2i16, 3i16).yxz(), vec3!(2i16, 1i16, 3i16));
        assert_eq!(vec3!(1i16, 2i16, 3i16).zyx(), vec3!(3i16, 2i16, 1i16));

        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).xyz(), vec3!(1i16, 2i16, 3i16));
        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).yxz(), vec3!(2i16, 1i16, 3i16));
        assert_eq!(vec4!(1i16, 2i16, 3i16, 4i16).zyx(), vec3!(3i16, 2i16, 1i16));

        assert_eq!(vec2!(1i16, 2i16).xyyx(), vec4!(1i16, 2i16, 2i16, 1i16));
        assert_eq!(vec2!(1i16, 2i16).yxyx(), vec4!(2i16, 1i16, 2i16, 1i16));
        assert_eq!(vec2!(1i16, 2i16).yyxx(), vec4!(2i16, 2i16, 1i16, 1i16));

        assert_eq!(
            vec3!(1i16, 2i16, 3i16).xyzx(),
            vec4!(1i16, 2i16, 3i16, 1i16)
        );
        assert_eq!(
            vec3!(1i16, 2i16, 3i16).yxzx(),
            vec4!(2i16, 1i16, 3i16, 1i16)
        );
        assert_eq!(
            vec3!(1i16, 2i16, 3i16).zyxx(),
            vec4!(3i16, 2i16, 1i16, 1i16)
        );

        assert_eq!(
            vec4!(1i16, 2i16, 3i16, 4i16).xyzw(),
            vec4!(1i16, 2i16, 3i16, 4i16)
        );
        assert_eq!(
            vec4!(1i16, 2i16, 3i16, 4i16).yxzw(),
            vec4!(2i16, 1i16, 3i16, 4i16)
        );
        assert_eq!(
            vec4!(1i16, 2i16, 3i16, 4i16).zyxw(),
            vec4!(3i16, 2i16, 1i16, 4i16)
        );
        assert_eq!(
            vec4!(1i16, 2i16, 3i16, 4i16).wyzx(),
            vec4!(4i16, 2i16, 3i16, 1i16)
        );
    }
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(1i16, 2i16)[2];
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(1i16, 2i16, 3i16)[3];
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(1i16, 2i16, 3i16, 4i16)[4];
}

#[test]
fn test_nonsimd_primitive_fns() {
    assert_eq!(size_of::<Vec2S<i16>>(), size_of::<i16>() * 2);
    assert_eq!(size_of::<Vec3S<i16>>(), size_of::<i16>() * 3);
    assert_eq!(size_of::<Vec4S<i16>>(), size_of::<i16>() * 4);

    assert_eq!(align_of::<Vec2S<i16>>(), align_of::<i16>());
    assert_eq!(align_of::<Vec3S<i16>>(), align_of::<i16>());
    assert_eq!(align_of::<Vec4S<i16>>(), align_of::<i16>());

    assert_eq!(Vec2S::from_array([1i16, 2i16]).as_array(), [1i16, 2i16]);
    assert_eq!(
        Vec3S::from_array([1i16, 2i16, 3i16]).as_array(),
        [1i16, 2i16, 3i16]
    );
    assert_eq!(
        Vec4S::from_array([1i16, 2i16, 3i16, 4i16]).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(Vec2S::from_fn(|i| [1i16, 2i16][i]).as_array(), [1i16, 2i16]);
    assert_eq!(
        Vec3S::from_fn(|i| [1i16, 2i16, 3i16][i]).as_array(),
        [1i16, 2i16, 3i16]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1i16, 2i16, 3i16, 4i16][i]).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(
        Vec2S::const_from_array([1i16, 2i16]).as_array(),
        [1i16, 2i16]
    );
    assert_eq!(
        Vec3S::const_from_array([1i16, 2i16, 3i16]).as_array(),
        [1i16, 2i16, 3i16]
    );
    assert_eq!(
        Vec4S::const_from_array([1i16, 2i16, 3i16, 4i16]).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(vec2s!(1i16, 2i16).as_array(), [1i16, 2i16]);
    assert_eq!(vec2s!(vec2s!(1i16, 2i16)).as_array(), [1i16, 2i16]);
    assert_eq!(vec3s!(1i16, 2i16, 3i16).as_array(), [1i16, 2i16, 3i16]);
    assert_eq!(
        vec3s!(1i16, vec2s!(2i16, 3i16)).as_array(),
        [1i16, 2i16, 3i16]
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );
    assert_eq!(
        vec4s!(1i16, vec2s!(2i16, 3i16), 4i16).as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );
    assert_eq!(
        vec4s!(
            1i16,
            vec2s!(2i16, 3i16),
            Vector::<1, i16, NonSimd>::from_array([4i16])
        )
        .as_array(),
        [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(vec2s!(1i16).as_array(), [1i16; 2]);
    assert_eq!(vec3s!(1i16).as_array(), [1i16; 3]);
    assert_eq!(vec4s!(1i16).as_array(), [1i16; 4]);

    assert_eq!(vec2s!(1i16, 2i16).as_array_ref(), &[1i16, 2i16]);
    assert_eq!(vec3s!(1i16, 2i16, 3i16).as_array_ref(), &[1i16, 2i16, 3i16]);
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).as_array_ref(),
        &[1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(vec2s!(1i16, 2i16).as_mut_array(), &mut [1i16, 2i16]);
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).as_mut_array(),
        &mut [1i16, 2i16, 3i16]
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).as_mut_array(),
        &mut [1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(vec2s!(1i16, 2i16).as_simd(), vec2!(1i16, 2i16));
    assert_eq!(vec3s!(1i16, 2i16, 3i16).as_simd(), vec3!(1i16, 2i16, 3i16));
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).as_simd(),
        vec4!(1i16, 2i16, 3i16, 4i16)
    );

    assert_eq!(vec2s!(1i16, 2i16).as_nonsimd(), vec2s!(1i16, 2i16));
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).as_nonsimd(),
        vec3s!(1i16, 2i16, 3i16)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).as_nonsimd(),
        vec4s!(1i16, 2i16, 3i16, 4i16)
    );

    assert_eq!(vec2s!(1i16, 2i16).len(), 2);
    assert_eq!(vec3s!(1i16, 2i16, 3i16).len(), 3);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).len(), 4);

    assert_eq!(vec2s!(1i16, 2i16).is_simd(), false);
    assert_eq!(vec3s!(1i16, 2i16, 3i16).is_simd(), false);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).is_simd(), false);

    assert_eq!(vec2s!(1i16, 2i16).get(0), Some(1i16));
    assert_eq!(vec2s!(1i16, 2i16).get(1), Some(2i16));
    assert_eq!(vec2s!(1i16, 2i16).get(2), None);
    assert_eq!(vec2s!(1i16, 2i16).get(3), None);

    assert_eq!(vec3s!(1i16, 2i16, 3i16).get(0), Some(1i16));
    assert_eq!(vec3s!(1i16, 2i16, 3i16).get(1), Some(2i16));
    assert_eq!(vec3s!(1i16, 2i16, 3i16).get(2), Some(3i16));
    assert_eq!(vec3s!(1i16, 2i16, 3i16).get(3), None);
    assert_eq!(vec3s!(1i16, 2i16, 3i16).get(4), None);

    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get(0), Some(1i16));
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get(1), Some(2i16));
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get(2), Some(3i16));
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get(3), Some(4i16));
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get(4), None);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get(5), None);

    assert_eq!(vec2s!(1i16, 2i16).get_mut(0), Some(&mut 1i16));
    assert_eq!(vec2s!(1i16, 2i16).get_mut(1), Some(&mut 2i16));
    assert_eq!(vec2s!(1i16, 2i16).get_mut(2), None);
    assert_eq!(vec2s!(1i16, 2i16).get_mut(3), None);

    assert_eq!(vec3s!(1i16, 2i16, 3i16).get_mut(0), Some(&mut 1i16));
    assert_eq!(vec3s!(1i16, 2i16, 3i16).get_mut(1), Some(&mut 2i16));
    assert_eq!(vec3s!(1i16, 2i16, 3i16).get_mut(2), Some(&mut 3i16));
    assert_eq!(vec3s!(1i16, 2i16, 3i16).get_mut(3), None);
    assert_eq!(vec3s!(1i16, 2i16, 3i16).get_mut(4), None);

    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_mut(0), Some(&mut 1i16));
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_mut(1), Some(&mut 2i16));
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_mut(2), Some(&mut 3i16));
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_mut(3), Some(&mut 4i16));
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_mut(4), None);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_mut(5), None);

    unsafe {
        assert_eq!(vec2s!(1i16, 2i16).get_unchecked(0), 1i16);
        assert_eq!(vec2s!(1i16, 2i16).get_unchecked(1), 2i16);

        assert_eq!(vec3s!(1i16, 2i16, 3i16).get_unchecked(0), 1i16);
        assert_eq!(vec3s!(1i16, 2i16, 3i16).get_unchecked(1), 2i16);
        assert_eq!(vec3s!(1i16, 2i16, 3i16).get_unchecked(2), 3i16);

        assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_unchecked(0), 1i16);
        assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_unchecked(1), 2i16);
        assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_unchecked(2), 3i16);
        assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).get_unchecked(3), 4i16);

        assert_eq!(vec2s!(1i16, 2i16).get_unchecked_mut(0), &mut 1i16);
        assert_eq!(vec2s!(1i16, 2i16).get_unchecked_mut(1), &mut 2i16);

        assert_eq!(vec3s!(1i16, 2i16, 3i16).get_unchecked_mut(0), &mut 1i16);
        assert_eq!(vec3s!(1i16, 2i16, 3i16).get_unchecked_mut(1), &mut 2i16);
        assert_eq!(vec3s!(1i16, 2i16, 3i16).get_unchecked_mut(2), &mut 3i16);

        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).get_unchecked_mut(0),
            &mut 1i16
        );
        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).get_unchecked_mut(1),
            &mut 2i16
        );
        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).get_unchecked_mut(2),
            &mut 3i16
        );
        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).get_unchecked_mut(3),
            &mut 4i16
        );
    }

    assert_eq!(
        vec2s!(1i16, 2i16).iter().collect::<Vec<i16>>(),
        vec![1i16, 2i16]
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).iter().collect::<Vec<i16>>(),
        vec![1i16, 2i16, 3i16]
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).iter().collect::<Vec<i16>>(),
        vec![1i16, 2i16, 3i16, 4i16]
    );

    assert_eq!(
        vec2s!(1i16, 2i16).iter_mut().collect::<Vec<&mut i16>>(),
        vec![&mut 1i16, &mut 2i16]
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16)
            .iter_mut()
            .collect::<Vec<&mut i16>>(),
        vec![&mut 1i16, &mut 2i16, &mut 3i16]
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16)
            .iter_mut()
            .collect::<Vec<&mut i16>>(),
        vec![&mut 1i16, &mut 2i16, &mut 3i16, &mut 4i16]
    );

    assert_eq!(vec2s!(1i16, 2i16).map(|x| x == 2i16), vec2s!(false, true));
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).map(|x| x == 2i16),
        vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).map(|x| x == 2i16),
        vec4s!(false, true, false, false)
    );

    assert_eq!(
        vec2s!(1i16, 2i16).zip(vec2s!(2i16, 1i16)),
        vec2s!((1i16, 2i16), (2i16, 1i16))
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).zip(vec3s!(2i16, 3i16, 1i16)),
        vec3s!((1i16, 2i16), (2i16, 3i16), (3i16, 1i16))
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).zip(vec4s!(2i16, 3i16, 4i16, 1i16)),
        vec4s!((1i16, 2i16), (2i16, 3i16), (3i16, 4i16), (4i16, 1i16))
    );

    assert_eq!(vec2s!(1i16, 2i16).reverse(), vec2s!(2i16, 1i16));
    assert_eq!(vec3s!(1i16, 2i16, 3i16).reverse(), vec3s!(3i16, 2i16, 1i16));
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).reverse(),
        vec4s!(4i16, 3i16, 2i16, 1i16)
    );

    assert_eq!(
        vec2s!(1i16, 2i16).get_const_vec2::<0, 1>(),
        vec2s!(1i16, 2i16)
    );
    assert_eq!(
        vec2s!(1i16, 2i16).get_const_vec2::<1, 0>(),
        vec2s!(2i16, 1i16)
    );
    assert_eq!(
        vec2s!(1i16, 2i16).get_const_vec2::<1, 1>(),
        vec2s!(2i16, 2i16)
    );

    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec2::<0, 1>(),
        vec2s!(1i16, 2i16)
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec2::<0, 2>(),
        vec2s!(1i16, 3i16)
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec2::<2, 1>(),
        vec2s!(3i16, 2i16)
    );

    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec2::<0, 1>(),
        vec2s!(1i16, 2i16)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec2::<1, 3>(),
        vec2s!(2i16, 4i16)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec2::<3, 1>(),
        vec2s!(4i16, 2i16)
    );

    assert_eq!(
        vec2s!(1i16, 2i16).get_const_vec3::<0, 1, 1>(),
        vec3s!(1i16, 2i16, 2i16)
    );
    assert_eq!(
        vec2s!(1i16, 2i16).get_const_vec3::<1, 0, 1>(),
        vec3s!(2i16, 1i16, 2i16)
    );

    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec3::<0, 1, 2>(),
        vec3s!(1i16, 2i16, 3i16)
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec3::<1, 0, 2>(),
        vec3s!(2i16, 1i16, 3i16)
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec3::<2, 1, 0>(),
        vec3s!(3i16, 2i16, 1i16)
    );

    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec3::<0, 1, 2>(),
        vec3s!(1i16, 2i16, 3i16)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec3::<1, 0, 2>(),
        vec3s!(2i16, 1i16, 3i16)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec3::<2, 1, 0>(),
        vec3s!(3i16, 2i16, 1i16)
    );

    assert_eq!(
        vec2s!(1i16, 2i16).get_const_vec4::<0, 1, 1, 0>(),
        vec4s!(1i16, 2i16, 2i16, 1i16)
    );
    assert_eq!(
        vec2s!(1i16, 2i16).get_const_vec4::<1, 0, 1, 0>(),
        vec4s!(2i16, 1i16, 2i16, 1i16)
    );
    assert_eq!(
        vec2s!(1i16, 2i16).get_const_vec4::<1, 1, 0, 0>(),
        vec4s!(2i16, 2i16, 1i16, 1i16)
    );

    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec4::<0, 1, 2, 0>(),
        vec4s!(1i16, 2i16, 3i16, 1i16)
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec4::<1, 0, 2, 0>(),
        vec4s!(2i16, 1i16, 3i16, 1i16)
    );
    assert_eq!(
        vec3s!(1i16, 2i16, 3i16).get_const_vec4::<2, 1, 0, 0>(),
        vec4s!(3i16, 2i16, 1i16, 1i16)
    );

    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec4::<0, 1, 2, 3>(),
        vec4s!(1i16, 2i16, 3i16, 4i16)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec4::<1, 0, 2, 3>(),
        vec4s!(2i16, 1i16, 3i16, 4i16)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec4::<2, 1, 0, 3>(),
        vec4s!(3i16, 2i16, 1i16, 4i16)
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16).get_const_vec4::<3, 1, 2, 0>(),
        vec4s!(4i16, 2i16, 3i16, 1i16)
    );

    assert_eq!(vec2s!(1i16, 2i16)[0], 1i16);
    assert_eq!(vec2s!(1i16, 2i16)[1], 2i16);

    assert_eq!(vec3s!(1i16, 2i16, 3i16)[0], 1i16);
    assert_eq!(vec3s!(1i16, 2i16, 3i16)[1], 2i16);
    assert_eq!(vec3s!(1i16, 2i16, 3i16)[2], 3i16);

    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16)[0], 1i16);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16)[1], 2i16);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16)[2], 3i16);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16)[3], 4i16);

    assert_eq!(&mut vec2s!(1i16, 2i16)[0], &mut 1i16);
    assert_eq!(&mut vec2s!(1i16, 2i16)[1], &mut 2i16);

    assert_eq!(&mut vec3s!(1i16, 2i16, 3i16)[0], &mut 1i16);
    assert_eq!(&mut vec3s!(1i16, 2i16, 3i16)[1], &mut 2i16);
    assert_eq!(&mut vec3s!(1i16, 2i16, 3i16)[2], &mut 3i16);

    assert_eq!(&mut vec4s!(1i16, 2i16, 3i16, 4i16)[0], &mut 1i16);
    assert_eq!(&mut vec4s!(1i16, 2i16, 3i16, 4i16)[1], &mut 2i16);
    assert_eq!(&mut vec4s!(1i16, 2i16, 3i16, 4i16)[2], &mut 3i16);
    assert_eq!(&mut vec4s!(1i16, 2i16, 3i16, 4i16)[3], &mut 4i16);

    assert_eq!(vec2s!(1i16, 2i16) == vec2s!(1i16, 2i16), true);
    assert_eq!(vec2s!(1i16, 2i16) == vec2s!(2i16, 1i16), false);
    assert_eq!(vec2s!(1i16, 2i16) == vec2s!(2i16, 2i16), false);

    assert_eq!(vec3s!(1i16, 2i16, 3i16) == vec3s!(1i16, 2i16, 3i16), true);
    assert_eq!(vec3s!(1i16, 2i16, 3i16) == vec3s!(4i16, 3i16, 2i16), false);
    assert_eq!(vec3s!(1i16, 2i16, 3i16) == vec3s!(2i16, 2i16, 3i16), false);

    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16) == vec4s!(1i16, 2i16, 3i16, 4i16),
        true
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16) == vec4s!(4i16, 3i16, 2i16, 1i16),
        false
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16) == vec4s!(2i16, 2i16, 2i16, 4i16),
        false
    );

    assert_eq!(vec2s!(1i16, 2i16) != vec2s!(1i16, 2i16), false);
    assert_eq!(vec2s!(1i16, 2i16) != vec2s!(2i16, 1i16), true);
    assert_eq!(vec2s!(1i16, 2i16) != vec2s!(2i16, 2i16), true);

    assert_eq!(vec3s!(1i16, 2i16, 3i16) != vec3s!(1i16, 2i16, 3i16), false);
    assert_eq!(vec3s!(1i16, 2i16, 3i16) != vec3s!(4i16, 3i16, 2i16), true);
    assert_eq!(vec3s!(1i16, 2i16, 3i16) != vec3s!(2i16, 2i16, 3i16), true);

    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16) != vec4s!(1i16, 2i16, 3i16, 4i16),
        false
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16) != vec4s!(4i16, 3i16, 2i16, 1i16),
        true
    );
    assert_eq!(
        vec4s!(1i16, 2i16, 3i16, 4i16) != vec4s!(2i16, 2i16, 2i16, 4i16),
        true
    );

    assert_eq!(vec2s!(1i16, 2i16).to_string(), "(1, 2)");
    assert_eq!(vec3s!(1i16, 2i16, 3i16).to_string(), "(1, 2, 3)");
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2s!(1i16, 2i16)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3s!(1i16, 2i16, 3i16)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4s!(1i16, 2i16, 3i16, 4i16)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2s!(1i16, 2i16).x, 1i16);
    assert_eq!(vec2s!(1i16, 2i16).y, 2i16);

    assert_eq!(vec3s!(1i16, 2i16, 3i16).x, 1i16);
    assert_eq!(vec3s!(1i16, 2i16, 3i16).y, 2i16);
    assert_eq!(vec3s!(1i16, 2i16, 3i16).z, 3i16);

    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).x, 1i16);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).y, 2i16);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).z, 3i16);
    assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).w, 4i16);

    assert_eq!(&mut vec2s!(1i16, 2i16).x, &mut 1i16);
    assert_eq!(&mut vec2s!(1i16, 2i16).y, &mut 2i16);

    assert_eq!(&mut vec3s!(1i16, 2i16, 3i16).x, &mut 1i16);
    assert_eq!(&mut vec3s!(1i16, 2i16, 3i16).y, &mut 2i16);
    assert_eq!(&mut vec3s!(1i16, 2i16, 3i16).z, &mut 3i16);

    assert_eq!(&mut vec4s!(1i16, 2i16, 3i16, 4i16).x, &mut 1i16);
    assert_eq!(&mut vec4s!(1i16, 2i16, 3i16, 4i16).y, &mut 2i16);
    assert_eq!(&mut vec4s!(1i16, 2i16, 3i16, 4i16).z, &mut 3i16);
    assert_eq!(&mut vec4s!(1i16, 2i16, 3i16, 4i16).w, &mut 4i16);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2s!(1i16, 2i16).xy(), vec2s!(1i16, 2i16));
        assert_eq!(vec2s!(1i16, 2i16).yx(), vec2s!(2i16, 1i16));
        assert_eq!(vec2s!(1i16, 2i16).yy(), vec2s!(2i16, 2i16));

        assert_eq!(vec3s!(1i16, 2i16, 3i16).xy(), vec2s!(1i16, 2i16));
        assert_eq!(vec3s!(1i16, 2i16, 3i16).xz(), vec2s!(1i16, 3i16));
        assert_eq!(vec3s!(1i16, 2i16, 3i16).zy(), vec2s!(3i16, 2i16));

        assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).xy(), vec2s!(1i16, 2i16));
        assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).yw(), vec2s!(2i16, 4i16));
        assert_eq!(vec4s!(1i16, 2i16, 3i16, 4i16).wy(), vec2s!(4i16, 2i16));

        assert_eq!(vec2s!(1i16, 2i16).xyy(), vec3s!(1i16, 2i16, 2i16));
        assert_eq!(vec2s!(1i16, 2i16).yxy(), vec3s!(2i16, 1i16, 2i16));

        assert_eq!(vec3s!(1i16, 2i16, 3i16).xyz(), vec3s!(1i16, 2i16, 3i16));
        assert_eq!(vec3s!(1i16, 2i16, 3i16).yxz(), vec3s!(2i16, 1i16, 3i16));
        assert_eq!(vec3s!(1i16, 2i16, 3i16).zyx(), vec3s!(3i16, 2i16, 1i16));

        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).xyz(),
            vec3s!(1i16, 2i16, 3i16)
        );
        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).yxz(),
            vec3s!(2i16, 1i16, 3i16)
        );
        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).zyx(),
            vec3s!(3i16, 2i16, 1i16)
        );

        assert_eq!(vec2s!(1i16, 2i16).xyyx(), vec4s!(1i16, 2i16, 2i16, 1i16));
        assert_eq!(vec2s!(1i16, 2i16).yxyx(), vec4s!(2i16, 1i16, 2i16, 1i16));
        assert_eq!(vec2s!(1i16, 2i16).yyxx(), vec4s!(2i16, 2i16, 1i16, 1i16));

        assert_eq!(
            vec3s!(1i16, 2i16, 3i16).xyzx(),
            vec4s!(1i16, 2i16, 3i16, 1i16)
        );
        assert_eq!(
            vec3s!(1i16, 2i16, 3i16).yxzx(),
            vec4s!(2i16, 1i16, 3i16, 1i16)
        );
        assert_eq!(
            vec3s!(1i16, 2i16, 3i16).zyxx(),
            vec4s!(3i16, 2i16, 1i16, 1i16)
        );

        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).xyzw(),
            vec4s!(1i16, 2i16, 3i16, 4i16)
        );
        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).yxzw(),
            vec4s!(2i16, 1i16, 3i16, 4i16)
        );
        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).zyxw(),
            vec4s!(3i16, 2i16, 1i16, 4i16)
        );
        assert_eq!(
            vec4s!(1i16, 2i16, 3i16, 4i16).wyzx(),
            vec4s!(4i16, 2i16, 3i16, 1i16)
        );
    }
}

#[test]
#[should_panic]
fn test_vec2s_index_panic() {
    vec2!(1i16, 2i16)[2];
}

#[test]
#[should_panic]
fn test_vec3s_index_panic() {
    vec3!(1i16, 2i16, 3i16)[3];
}

#[test]
#[should_panic]
fn test_vec4s_index_panic() {
    vec4!(1i16, 2i16, 3i16, 4i16)[4];
}

#[test]
fn test_simd_int_fns() {
    assert_eq!(!vec2!(5i16, 7i16), vec2!(!5i16, !7i16));
    assert_eq!(!vec3!(5i16, 7i16, 9i16), vec3!(!5i16, !7i16, !9i16));
    assert_eq!(
        !vec4!(5i16, 7i16, 9i16, 11i16),
        vec4!(!5i16, !7i16, !9i16, !11i16)
    );

    assert_eq!(
        vec2!(5i16, 7i16) + vec2!(9i16, 11i16),
        vec2!(5i16 + 9i16, 7i16 + 11i16)
    );
    assert_eq!(
        vec3!(5i16, 7i16, 9i16) + vec3!(11i16, 13i16, 15i16),
        vec3!(5i16 + 11i16, 7i16 + 13i16, 9i16 + 15i16)
    );
    assert_eq!(
        vec4!(5i16, 7i16, 9i16, 11i16) + vec4!(13i16, 15i16, 17i16, 19i16),
        vec4!(5i16 + 13i16, 7i16 + 15i16, 9i16 + 17i16, 11i16 + 19i16)
    );

    assert_eq!(
        vec2!(9i16, 11i16) - vec2!(5i16, 7i16),
        vec2!(9i16 - 5i16, 11i16 - 7i16)
    );
    assert_eq!(
        vec3!(9i16, 11i16, 13i16) - vec3!(5i16, 7i16, 9i16),
        vec3!(9i16 - 5i16, 11i16 - 7i16, 13i16 - 9i16)
    );
    assert_eq!(
        vec4!(9i16, 11i16, 13i16, 15i16) - vec4!(5i16, 7i16, 9i16, 11i16),
        vec4!(9i16 - 5i16, 11i16 - 7i16, 13i16 - 9i16, 15i16 - 11i16)
    );

    assert_eq!(
        vec2!(2i16, 4i16) * vec2!(3i16, 5i16),
        vec2!(2i16 * 3i16, 4i16 * 5i16)
    );
    assert_eq!(
        vec3!(2i16, 4i16, 6i16) * vec3!(3i16, 5i16, 7i16),
        vec3!(2i16 * 3i16, 4i16 * 5i16, 6i16 * 7i16)
    );
    assert_eq!(
        vec4!(2i16, 4i16, 6i16, 8i16) * vec4!(3i16, 5i16, 7i16, 9i16),
        vec4!(2i16 * 3i16, 4i16 * 5i16, 6i16 * 7i16, 8i16 * 9i16)
    );

    assert_eq!(
        vec2!(21i16, 23i16) / vec2!(4i16, 50i16),
        vec2!(21i16 / 4i16, 23i16 / 50i16)
    );
    assert_eq!(
        vec3!(21i16, 23i16, 25i16) / vec3!(4i16, 50i16, 3i16),
        vec3!(21i16 / 4i16, 23i16 / 50i16, 25i16 / 3i16)
    );
    assert_eq!(
        vec4!(21i16, 23i16, 25i16, 27i16) / vec4!(4i16, 50i16, 3i16, 10i16),
        vec4!(21i16 / 4i16, 23i16 / 50i16, 25i16 / 3i16, 27i16 / 10i16)
    );

    assert_eq!(
        vec2!(16i16, 19i16) / vec2!(5i16, 5i16),
        vec2!(16i16 / 5i16, 19i16 / 5i16)
    );
    assert_eq!(
        vec3!(16i16, 19i16, 22i16) / vec3!(5i16, 5i16, 5i16),
        vec3!(16i16 / 5i16, 19i16 / 5i16, 22i16 / 5i16)
    );
    assert_eq!(
        vec4!(16i16, 19i16, 22i16, 25i16) / vec4!(5i16, 5i16, 5i16, 5i16),
        vec4!(16i16 / 5i16, 19i16 / 5i16, 22i16 / 5i16, 25i16 / 5i16)
    );

    assert_eq!(
        vec2!(21i16, 23i16) % vec2!(4i16, 50i16),
        vec2!(21i16 % 4i16, 23i16 % 50i16)
    );
    assert_eq!(
        vec3!(21i16, 23i16, 25i16) % vec3!(4i16, 50i16, 3i16),
        vec3!(21i16 % 4i16, 23i16 % 50i16, 25i16 % 3i16)
    );
    assert_eq!(
        vec4!(21i16, 23i16, 25i16, 27i16) % vec4!(4i16, 50i16, 3i16, 10i16),
        vec4!(21i16 % 4i16, 23i16 % 50i16, 25i16 % 3i16, 27i16 % 10i16)
    );

    assert_eq!(
        vec2!(21i16, 23i16) & vec2!(4i16, 50i16),
        vec2!(21i16 & 4i16, 23i16 & 50i16)
    );
    assert_eq!(
        vec3!(21i16, 23i16, 25i16) & vec3!(4i16, 50i16, 3i16),
        vec3!(21i16 & 4i16, 23i16 & 50i16, 25i16 & 3i16)
    );
    assert_eq!(
        vec4!(21i16, 23i16, 25i16, 27i16) & vec4!(4i16, 50i16, 3i16, 10i16),
        vec4!(21i16 & 4i16, 23i16 & 50i16, 25i16 & 3i16, 27i16 & 10i16)
    );

    assert_eq!(
        vec2!(21i16, 23i16) | vec2!(4i16, 50i16),
        vec2!(21i16 | 4i16, 23i16 | 50i16)
    );
    assert_eq!(
        vec3!(21i16, 23i16, 25i16) | vec3!(4i16, 50i16, 3i16),
        vec3!(21i16 | 4i16, 23i16 | 50i16, 25i16 | 3i16)
    );
    assert_eq!(
        vec4!(21i16, 23i16, 25i16, 27i16) | vec4!(4i16, 50i16, 3i16, 10i16),
        vec4!(21i16 | 4i16, 23i16 | 50i16, 25i16 | 3i16, 27i16 | 10i16)
    );

    assert_eq!(
        vec2!(21i16, 23i16) ^ vec2!(4i16, 50i16),
        vec2!(21i16 ^ 4i16, 23i16 ^ 50i16)
    );
    assert_eq!(
        vec3!(21i16, 23i16, 25i16) ^ vec3!(4i16, 50i16, 3i16),
        vec3!(21i16 ^ 4i16, 23i16 ^ 50i16, 25i16 ^ 3i16)
    );
    assert_eq!(
        vec4!(21i16, 23i16, 25i16, 27i16) ^ vec4!(4i16, 50i16, 3i16, 10i16),
        vec4!(21i16 ^ 4i16, 23i16 ^ 50i16, 25i16 ^ 3i16, 27i16 ^ 10i16)
    );

    assert_eq!(Vec2::ZERO, vec2!(0i16, 0i16));
    assert_eq!(Vec3::ZERO, vec3!(0i16, 0i16, 0i16));
    assert_eq!(Vec4::ZERO, vec4!(0i16, 0i16, 0i16, 0i16));

    assert_eq!(Vec2::ONE, vec2!(1i16, 1i16));
    assert_eq!(Vec3::ONE, vec3!(1i16, 1i16, 1i16));
    assert_eq!(Vec4::ONE, vec4!(1i16, 1i16, 1i16, 1i16));

    assert_eq!(Vec2::X, vec2!(1i16, 0i16));
    assert_eq!(Vec3::Y, vec3!(0i16, 1i16, 0i16));
    assert_eq!(Vec4::Z, vec4!(0i16, 0i16, 1i16, 0i16));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2::<i16>::RIGHT, Vec2::<i16>::X);
        assert_eq!(Vec3::<i16>::RIGHT, Vec3::<i16>::X);
        assert_eq!(Vec4::<i16>::RIGHT, Vec4::<i16>::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2::<i16>::LEFT, Vec2::<i16>::X);
        assert_eq!(Vec3::<i16>::LEFT, Vec3::<i16>::X);
        assert_eq!(Vec4::<i16>::LEFT, Vec4::<i16>::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3::<i16>::BACKWARDS, Vec3::<i16>::Z);
        assert_eq!(Vec4::<i16>::BACKWARDS, Vec4::<i16>::Z);
    }
}

macro_rules! test_simd_binop_edgecase {
    ( $(#[$attr:meta])* $vec2_fn:ident, $vec3_fn:ident, $vec4_fn:ident: $op:tt for $lhs:expr, $rhs:expr) => {
        #[test]
        $(#[$attr])*
        fn $vec2_fn() {
            assert_eq!(vec2!(1i16, $lhs) $op vec2!(1i16, $rhs), vec2!(1i16 $op 1i16, $lhs $op $rhs));
        }

        #[test]
        $(#[$attr])*
        fn $vec3_fn() {
            assert_eq!(vec3!(1i16, $lhs, 1i16) $op vec3!(1i16, $rhs, 1i16), vec3!(1i16 $op 1i16, $lhs $op $rhs, 1i16 $op 1i16));
        }

        #[test]
        $(#[$attr])*
        fn $vec4_fn() {
            assert_eq!(vec4!(1i16, $lhs, 1i16, 1i16) $op vec4!(1i16, $rhs, 1i16, 1i16), vec4!(1i16 $op 1i16, $lhs $op $rhs, 1i16 $op 1i16, 1i16 $op 1i16));
        }
    }
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2_add_overflow,
    test_i16vec3_add_overflow,
    test_i16vec4_add_overflow:

    + for i16::MAX, 3
}
test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2_add_exact_overflow,
    test_i16vec3_add_exact_overflow,
    test_i16vec4_add_exact_overflow:

    + for i16::MAX, 1
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2_sub_overflow,
    test_i16vec3_sub_overflow,
    test_i16vec4_sub_overflow:

    - for i16::MIN, 3
}
test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2_sub_exact_overflow,
    test_i16vec3_sub_exact_overflow,
    test_i16vec4_sub_exact_overflow:

    - for i16::MIN, 1
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2_mul_overflow,
    test_i16vec3_mul_overflow,
    test_i16vec4_mul_overflow:

    * for i16::MAX, 3
}

test_simd_binop_edgecase! {
    #[should_panic]
    test_i16vec2_div_by_zero,
    test_i16vec3_div_by_zero,
    test_i16vec4_div_by_zero:

    / for 5i16, 0i16
}

test_simd_binop_edgecase! {
    #[should_panic]
    test_i16vec2_rem_by_zero,
    test_i16vec3_rem_by_zero,
    test_i16vec4_rem_by_zero:

    % for 5i16, 0i16
}

#[test]
fn test_nonsimd_int_fns() {
    assert_eq!(!vec2s!(5i16, 7i16), vec2s!(!5i16, !7i16));
    assert_eq!(!vec3s!(5i16, 7i16, 9i16), vec3s!(!5i16, !7i16, !9i16));
    assert_eq!(
        !vec4s!(5i16, 7i16, 9i16, 11i16),
        vec4s!(!5i16, !7i16, !9i16, !11i16)
    );

    assert_eq!(
        vec2s!(5i16, 7i16) + vec2s!(9i16, 11i16),
        vec2s!(5i16 + 9i16, 7i16 + 11i16)
    );
    assert_eq!(
        vec3s!(5i16, 7i16, 9i16) + vec3s!(11i16, 13i16, 15i16),
        vec3s!(5i16 + 11i16, 7i16 + 13i16, 9i16 + 15i16)
    );
    assert_eq!(
        vec4s!(5i16, 7i16, 9i16, 11i16) + vec4s!(13i16, 15i16, 17i16, 19i16),
        vec4s!(5i16 + 13i16, 7i16 + 15i16, 9i16 + 17i16, 11i16 + 19i16)
    );

    assert_eq!(
        vec2s!(9i16, 11i16) - vec2s!(5i16, 7i16),
        vec2s!(9i16 - 5i16, 11i16 - 7i16)
    );
    assert_eq!(
        vec3s!(9i16, 11i16, 13i16) - vec3s!(5i16, 7i16, 9i16),
        vec3s!(9i16 - 5i16, 11i16 - 7i16, 13i16 - 9i16)
    );
    assert_eq!(
        vec4s!(9i16, 11i16, 13i16, 15i16) - vec4s!(5i16, 7i16, 9i16, 11i16),
        vec4s!(9i16 - 5i16, 11i16 - 7i16, 13i16 - 9i16, 15i16 - 11i16)
    );

    assert_eq!(
        vec2s!(2i16, 4i16) * vec2s!(3i16, 5i16),
        vec2s!(2i16 * 3i16, 4i16 * 5i16)
    );
    assert_eq!(
        vec3s!(2i16, 4i16, 6i16) * vec3s!(3i16, 5i16, 7i16),
        vec3s!(2i16 * 3i16, 4i16 * 5i16, 6i16 * 7i16)
    );
    assert_eq!(
        vec4s!(2i16, 4i16, 6i16, 8i16) * vec4s!(3i16, 5i16, 7i16, 9i16),
        vec4s!(2i16 * 3i16, 4i16 * 5i16, 6i16 * 7i16, 8i16 * 9i16)
    );

    assert_eq!(
        vec2s!(21i16, 23i16) / vec2s!(4i16, 50i16),
        vec2s!(21i16 / 4i16, 23i16 / 50i16)
    );
    assert_eq!(
        vec3s!(21i16, 23i16, 25i16) / vec3s!(4i16, 50i16, 3i16),
        vec3s!(21i16 / 4i16, 23i16 / 50i16, 25i16 / 3i16)
    );
    assert_eq!(
        vec4s!(21i16, 23i16, 25i16, 27i16) / vec4s!(4i16, 50i16, 3i16, 10i16),
        vec4s!(21i16 / 4i16, 23i16 / 50i16, 25i16 / 3i16, 27i16 / 10i16)
    );

    assert_eq!(
        vec2s!(16i16, 19i16) / vec2s!(5i16, 5i16),
        vec2s!(16i16 / 5i16, 19i16 / 5i16)
    );
    assert_eq!(
        vec3s!(16i16, 19i16, 22i16) / vec3s!(5i16, 5i16, 5i16),
        vec3s!(16i16 / 5i16, 19i16 / 5i16, 22i16 / 5i16)
    );
    assert_eq!(
        vec4s!(16i16, 19i16, 22i16, 25i16) / vec4s!(5i16, 5i16, 5i16, 5i16),
        vec4s!(16i16 / 5i16, 19i16 / 5i16, 22i16 / 5i16, 25i16 / 5i16)
    );

    assert_eq!(
        vec2s!(21i16, 23i16) % vec2s!(4i16, 50i16),
        vec2s!(21i16 % 4i16, 23i16 % 50i16)
    );
    assert_eq!(
        vec3s!(21i16, 23i16, 25i16) % vec3s!(4i16, 50i16, 3i16),
        vec3s!(21i16 % 4i16, 23i16 % 50i16, 25i16 % 3i16)
    );
    assert_eq!(
        vec4s!(21i16, 23i16, 25i16, 27i16) % vec4s!(4i16, 50i16, 3i16, 10i16),
        vec4s!(21i16 % 4i16, 23i16 % 50i16, 25i16 % 3i16, 27i16 % 10i16)
    );

    assert_eq!(
        vec2s!(21i16, 23i16) & vec2s!(4i16, 50i16),
        vec2s!(21i16 & 4i16, 23i16 & 50i16)
    );
    assert_eq!(
        vec3s!(21i16, 23i16, 25i16) & vec3s!(4i16, 50i16, 3i16),
        vec3s!(21i16 & 4i16, 23i16 & 50i16, 25i16 & 3i16)
    );
    assert_eq!(
        vec4s!(21i16, 23i16, 25i16, 27i16) & vec4s!(4i16, 50i16, 3i16, 10i16),
        vec4s!(21i16 & 4i16, 23i16 & 50i16, 25i16 & 3i16, 27i16 & 10i16)
    );

    assert_eq!(
        vec2s!(21i16, 23i16) | vec2s!(4i16, 50i16),
        vec2s!(21i16 | 4i16, 23i16 | 50i16)
    );
    assert_eq!(
        vec3s!(21i16, 23i16, 25i16) | vec3s!(4i16, 50i16, 3i16),
        vec3s!(21i16 | 4i16, 23i16 | 50i16, 25i16 | 3i16)
    );
    assert_eq!(
        vec4s!(21i16, 23i16, 25i16, 27i16) | vec4s!(4i16, 50i16, 3i16, 10i16),
        vec4s!(21i16 | 4i16, 23i16 | 50i16, 25i16 | 3i16, 27i16 | 10i16)
    );

    assert_eq!(
        vec2s!(21i16, 23i16) ^ vec2s!(4i16, 50i16),
        vec2s!(21i16 ^ 4i16, 23i16 ^ 50i16)
    );
    assert_eq!(
        vec3s!(21i16, 23i16, 25i16) ^ vec3s!(4i16, 50i16, 3i16),
        vec3s!(21i16 ^ 4i16, 23i16 ^ 50i16, 25i16 ^ 3i16)
    );
    assert_eq!(
        vec4s!(21i16, 23i16, 25i16, 27i16) ^ vec4s!(4i16, 50i16, 3i16, 10i16),
        vec4s!(21i16 ^ 4i16, 23i16 ^ 50i16, 25i16 ^ 3i16, 27i16 ^ 10i16)
    );

    assert_eq!(Vec2S::ZERO, vec2s!(0i16, 0i16));
    assert_eq!(Vec3S::ZERO, vec3s!(0i16, 0i16, 0i16));
    assert_eq!(Vec4S::ZERO, vec4s!(0i16, 0i16, 0i16, 0i16));

    assert_eq!(Vec2S::ONE, vec2s!(1i16, 1i16));
    assert_eq!(Vec3S::ONE, vec3s!(1i16, 1i16, 1i16));
    assert_eq!(Vec4S::ONE, vec4s!(1i16, 1i16, 1i16, 1i16));

    assert_eq!(Vec2S::X, vec2s!(1i16, 0i16));
    assert_eq!(Vec3S::Y, vec3s!(0i16, 1i16, 0i16));
    assert_eq!(Vec4S::Z, vec4s!(0i16, 0i16, 1i16, 0i16));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2S::<i16>::RIGHT, Vec2S::<i16>::X);
        assert_eq!(Vec3S::<i16>::RIGHT, Vec3S::<i16>::X);
        assert_eq!(Vec4S::<i16>::RIGHT, Vec4S::<i16>::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2S::<i16>::LEFT, Vec2S::<i16>::X);
        assert_eq!(Vec3S::<i16>::LEFT, Vec3S::<i16>::X);
        assert_eq!(Vec4S::<i16>::LEFT, Vec4S::<i16>::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3S::<i16>::BACKWARDS, Vec3S::<i16>::Z);
        assert_eq!(Vec4S::<i16>::BACKWARDS, Vec4S::<i16>::Z);
    }
}

macro_rules! test_nonsimd_binop_edgecase {
    ( $(#[$attr:meta])* $vec2_fn:ident, $vec3_fn:ident, $vec4_fn:ident: $op:tt for $lhs:expr, $rhs:expr) => {
        #[test]
        $(#[$attr])*
        fn $vec2_fn() {
            assert_eq!(vec2s!(1i16, $lhs) $op vec2s!(1i16, $rhs), vec2s!(1i16 $op 1i16, $lhs $op $rhs));
        }

        #[test]
        $(#[$attr])*
        fn $vec3_fn() {
            assert_eq!(vec3s!(1i16, $lhs, 1i16) $op vec3s!(1i16, $rhs, 1i16), vec3s!(1i16 $op 1i16, $lhs $op $rhs, 1i16 $op 1i16));
        }

        #[test]
        $(#[$attr])*
        fn $vec4_fn() {
            assert_eq!(vec4s!(1i16, $lhs, 1i16, 1i16) $op vec4s!(1i16, $rhs, 1i16, 1i16), vec4s!(1i16 $op 1i16, $lhs $op $rhs, 1i16 $op 1i16, 1i16 $op 1i16));
        }
    }
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2s_add_overflow,
    test_i16vec3s_add_overflow,
    test_i16vec4s_add_overflow:

    + for i16::MAX, 3
}
test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2s_add_exact_overflow,
    test_i16vec3s_add_exact_overflow,
    test_i16vec4s_add_exact_overflow:

    + for i16::MAX, 1
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2s_sub_overflow,
    test_i16vec3s_sub_overflow,
    test_i16vec4s_sub_overflow:

    - for i16::MIN, 3
}
test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2s_sub_exact_overflow,
    test_i16vec3s_sub_exact_overflow,
    test_i16vec4s_sub_exact_overflow:

    - for i16::MIN, 1
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_i16vec2s_mul_overflow,
    test_i16vec3s_mul_overflow,
    test_i16vec4s_mul_overflow:

    * for i16::MAX, 3
}

test_nonsimd_binop_edgecase! {
    #[should_panic]
    test_i16vec2s_div_by_zero,
    test_i16vec3s_div_by_zero,
    test_i16vec4s_div_by_zero:

    / for 5i16, 0i16
}

test_nonsimd_binop_edgecase! {
    #[should_panic]
    test_i16vec2s_rem_by_zero,
    test_i16vec3s_rem_by_zero,
    test_i16vec4s_rem_by_zero:

    % for 5i16, 0i16
}
