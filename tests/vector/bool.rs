// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::{fmt::Debug, mem::size_of};

use ggmath::*;

fn assert_typed_eq<T: PartialEq + Debug>(a: T, b: T) {
    assert_eq!(a, b);
}

const _: () = assert!(size_of::<Vec2P<bool>>() == size_of::<[bool; 2]>());

#[test]
fn test_vec2_align() {
    assert_typed_eq(vec2!(false, true).align(), vec2!(false, true));
}

#[test]
fn test_vec2_pack() {
    assert_typed_eq(vec2!(false, true).pack(), vec2p!(false, true));
}

#[test]
fn test_vec2p_align() {
    assert_typed_eq(vec2p!(false, true).align(), vec2!(false, true));
}

#[test]
fn test_vec2p_pack() {
    assert_typed_eq(vec2p!(false, true).pack(), vec2p!(false, true));
}

const _: () = assert!(size_of::<Vec3P<bool>>() == size_of::<[bool; 3]>());

#[test]
fn test_vec3_align() {
    assert_typed_eq(vec3!(false, true, false).align(), vec3!(false, true, false));
}

#[test]
fn test_vec3_pack() {
    assert_typed_eq(vec3!(false, true, false).pack(), vec3p!(false, true, false));
}

#[test]
fn test_vec3p_align() {
    assert_typed_eq(
        vec3p!(false, true, false).align(),
        vec3!(false, true, false),
    );
}

#[test]
fn test_vec3p_pack() {
    assert_typed_eq(
        vec3p!(false, true, false).pack(),
        vec3p!(false, true, false),
    );
}

const _: () = assert!(size_of::<Vec4P<bool>>() == size_of::<[bool; 4]>());

#[test]
fn test_vec4_align() {
    assert_typed_eq(
        vec4!(false, true, false, true).align(),
        vec4!(false, true, false, true),
    );
}

#[test]
fn test_vec4_pack() {
    assert_typed_eq(
        vec4!(false, true, false, true).pack(),
        vec4p!(false, true, false, true),
    );
}

#[test]
fn test_vec4p_align() {
    assert_typed_eq(
        vec4p!(false, true, false, true).align(),
        vec4!(false, true, false, true),
    );
}

#[test]
fn test_vec4p_pack() {
    assert_typed_eq(
        vec4p!(false, true, false, true).pack(),
        vec4p!(false, true, false, true),
    );
}
