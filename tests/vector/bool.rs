// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<bool>>() == size_of::<[bool; 2]>());

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(false, true).align(), vec2!(false, true));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(false, true).pack(), vec2p!(false, true));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(Vec2::from_array([false, true]).as_array(), [false, true]);
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(false), vec2!(false, false));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(false, true).index(0), false);
    assert_eq!(vec2!(false, true).index(1), true);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(false, true).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(false, true).get(0), Some(false));
    assert_eq!(vec2!(false, true).get(1), Some(true));

    assert_eq!(vec2!(false, true).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(false, true).get_unchecked(0), false);
        assert_eq!(vec2!(false, true).get_unchecked(1), true);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(false, true);
        vec.set(0, true);

        assert_eq!(vec, vec2!(true, true));
    }
    {
        let mut vec = vec2!(false, true);
        vec.set(1, false);

        assert_eq!(vec, vec2!(false, false));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(false, true);
    vec.set(2, false);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(false, true);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec2!(true, true));
    }
    {
        let mut vec = vec2!(false, true);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec2!(false, false));
    }

    assert_eq!(
        vec2!(false, true).try_set(2, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(false, true);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec2!(true, true));
        }
        {
            let mut vec = vec2!(false, true);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec2!(false, false));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(false, true).y(), true);
    assert_eq!(vec2!(false, true).yx(), vec2!(true, false));
    assert_eq!(vec2!(false, true).yxy(), vec3!(true, false, true));
    assert_eq!(vec2!(false, true).yxyy(), vec4!(true, false, true, true));
}

#[test]
fn test_vec2_fold() {
    assert_eq!(vec2!(false, true).fold(false, |acc, x| acc | x), true);
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(vec2!(false, true).reduce(|acc, x| acc | x), true);
}

#[test]
fn test_vec2_eq_mask() {
    assert_eq!(
        vec2!(false, true).eq_mask(vec2!(false, true)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(false, true).eq_mask(vec2!(false, false)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(false, true).eq_mask(vec2!(true, false)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ne_mask() {
    assert_eq!(
        vec2!(false, true).ne_mask(vec2!(false, true)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(false, true).ne_mask(vec2!(false, false)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(false, true).ne_mask(vec2!(true, false)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_lt_mask() {
    assert_eq!(
        vec2!(false, true).lt_mask(vec2!(false, true)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(false, true).lt_mask(vec2!(true, false)),
        vec2!(true, false),
    );
}

#[test]
fn test_vec2_gt_mask() {
    assert_eq!(
        vec2!(false, true).gt_mask(vec2!(false, true)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(false, true).gt_mask(vec2!(true, false)),
        vec2!(false, true),
    );
}

#[test]
fn test_vec2_le_mask() {
    assert_eq!(
        vec2!(false, true).le_mask(vec2!(false, true)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(false, true).le_mask(vec2!(true, false)),
        vec2!(true, false),
    );
}

#[test]
fn test_vec2_ge_mask() {
    assert_eq!(
        vec2!(false, true).ge_mask(vec2!(false, true)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(false, true).ge_mask(vec2!(true, false)),
        vec2!(false, true),
    );
}

#[test]
fn test_vec2_eq() {
    assert_eq!(vec2!(false, true) == vec2!(false, true), true);
    assert_eq!(vec2!(false, true) == vec2!(false, false), false);
    assert_eq!(vec2!(false, true) == vec2!(true, false), false);
}

#[test]
fn test_vec2_ne() {
    assert_eq!(vec2!(false, true) != vec2!(false, true), false);
    assert_eq!(vec2!(false, true) != vec2!(false, false), true);
    assert_eq!(vec2!(false, true) != vec2!(true, false), true);
}

#[test]
fn test_vec2_debug() {
    assert_eq!(format!("{:?}", vec2!(false, true)), "(false, true)");
}

#[test]
fn test_vec2_display() {
    assert_eq!(format!("{}", vec2!(false, true)), "(false, true)");
}

#[test]
fn test_vec2p_align() {
    assert_eq!(vec2p!(false, true).align(), vec2!(false, true));
}

#[test]
fn test_vec2p_pack() {
    assert_eq!(vec2p!(false, true).pack(), vec2p!(false, true));
}

#[test]
fn test_vec2p_from_array_as_array() {
    assert_eq!(Vec2P::from_array([false, true]).as_array(), [false, true]);
}

#[test]
fn test_vec2p_splat() {
    assert_eq!(Vec2P::splat(false), vec2p!(false, false));
}

#[test]
fn test_vec2p_index() {
    assert_eq!(vec2p!(false, true).index(0), false);
    assert_eq!(vec2p!(false, true).index(1), true);
}

#[test]
#[should_panic]
fn test_vec2p_index_panic() {
    vec2p!(false, true).index(2);
}

#[test]
fn test_vec2p_get() {
    assert_eq!(vec2p!(false, true).get(0), Some(false));
    assert_eq!(vec2p!(false, true).get(1), Some(true));

    assert_eq!(vec2p!(false, true).get(2), None);
}

#[test]
fn test_vec2p_get_unchecked() {
    unsafe {
        assert_eq!(vec2p!(false, true).get_unchecked(0), false);
        assert_eq!(vec2p!(false, true).get_unchecked(1), true);
    }
}

#[test]
fn test_vec2p_set() {
    {
        let mut vec = vec2p!(false, true);
        vec.set(0, true);

        assert_eq!(vec, vec2p!(true, true));
    }
    {
        let mut vec = vec2p!(false, true);
        vec.set(1, false);

        assert_eq!(vec, vec2p!(false, false));
    }
}

#[test]
#[should_panic]
fn test_vec2p_set_panic() {
    let mut vec = vec2p!(false, true);
    vec.set(2, false);
}

#[test]
fn test_vec2p_try_set() {
    {
        let mut vec = vec2p!(false, true);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec2p!(true, true));
    }
    {
        let mut vec = vec2p!(false, true);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec2p!(false, false));
    }

    assert_eq!(
        vec2p!(false, true).try_set(2, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2p!(false, true);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec2p!(true, true));
        }
        {
            let mut vec = vec2p!(false, true);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec2p!(false, false));
        }
    }
}

#[test]
fn test_vec2p_swizzle() {
    assert_eq!(vec2p!(false, true).y(), true);
    assert_eq!(vec2p!(false, true).yx(), vec2p!(true, false));
    assert_eq!(vec2p!(false, true).yxy(), vec3p!(true, false, true));
    assert_eq!(vec2p!(false, true).yxyy(), vec4p!(true, false, true, true));
}

#[test]
fn test_vec2p_fold() {
    assert_eq!(vec2p!(false, true).fold(false, |acc, x| acc | x), true);
}

#[test]
fn test_vec2p_reduce() {
    assert_eq!(vec2p!(false, true).reduce(|acc, x| acc | x), true);
}

#[test]
fn test_vec2p_eq_mask() {
    assert_eq!(
        vec2p!(false, true).eq_mask(vec2p!(false, true)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(false, true).eq_mask(vec2p!(false, false)),
        vec2p!(true, false),
    );
    assert_eq!(
        vec2p!(false, true).eq_mask(vec2p!(true, false)),
        vec2p!(false, false)
    );
}

#[test]
fn test_vec2p_ne_mask() {
    assert_eq!(
        vec2p!(false, true).ne_mask(vec2p!(false, true)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(false, true).ne_mask(vec2p!(false, false)),
        vec2p!(false, true),
    );
    assert_eq!(
        vec2p!(false, true).ne_mask(vec2p!(true, false)),
        vec2p!(true, true)
    );
}

#[test]
fn test_vec2p_lt_mask() {
    assert_eq!(
        vec2p!(false, true).lt_mask(vec2p!(false, true)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(false, true).lt_mask(vec2p!(true, false)),
        vec2p!(true, false),
    );
}

#[test]
fn test_vec2p_gt_mask() {
    assert_eq!(
        vec2p!(false, true).gt_mask(vec2p!(false, true)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(false, true).gt_mask(vec2p!(true, false)),
        vec2p!(false, true),
    );
}

#[test]
fn test_vec2p_le_mask() {
    assert_eq!(
        vec2p!(false, true).le_mask(vec2p!(false, true)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(false, true).le_mask(vec2p!(true, false)),
        vec2p!(true, false),
    );
}

#[test]
fn test_vec2p_ge_mask() {
    assert_eq!(
        vec2p!(false, true).ge_mask(vec2p!(false, true)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(false, true).ge_mask(vec2p!(true, false)),
        vec2p!(false, true),
    );
}

#[test]
fn test_vec2p_eq() {
    assert_eq!(vec2p!(false, true) == vec2p!(false, true), true);
    assert_eq!(vec2p!(false, true) == vec2p!(false, false), false);
    assert_eq!(vec2p!(false, true) == vec2p!(true, false), false);
}

#[test]
fn test_vec2p_ne() {
    assert_eq!(vec2p!(false, true) != vec2p!(false, true), false);
    assert_eq!(vec2p!(false, true) != vec2p!(false, false), true);
    assert_eq!(vec2p!(false, true) != vec2p!(true, false), true);
}

#[test]
fn test_vec2p_debug() {
    assert_eq!(format!("{:?}", vec2p!(false, true)), "(false, true)");
}

#[test]
fn test_vec2p_display() {
    assert_eq!(format!("{}", vec2p!(false, true)), "(false, true)");
}

const _: () = assert!(size_of::<Vec3P<bool>>() == size_of::<[bool; 3]>());

#[test]
fn test_vec3_align() {
    assert_eq!(vec3!(false, true, false).align(), vec3!(false, true, false));
}

#[test]
fn test_vec3_pack() {
    assert_eq!(vec3!(false, true, false).pack(), vec3p!(false, true, false));
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([false, true, false]).as_array(),
        [false, true, false]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(false), vec3!(false, false, false));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(false, true, false).index(0), false);
    assert_eq!(vec3!(false, true, false).index(1), true);
    assert_eq!(vec3!(false, true, false).index(2), false);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(false, true, false).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(false, true, false).get(0), Some(false));
    assert_eq!(vec3!(false, true, false).get(1), Some(true));
    assert_eq!(vec3!(false, true, false).get(2), Some(false));

    assert_eq!(vec3!(false, true, false).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(false, true, false).get_unchecked(0), false);
        assert_eq!(vec3!(false, true, false).get_unchecked(1), true);
        assert_eq!(vec3!(false, true, false).get_unchecked(2), false);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(false, true, false);
        vec.set(0, true);

        assert_eq!(vec, vec3!(true, true, false));
    }
    {
        let mut vec = vec3!(false, true, false);
        vec.set(1, false);

        assert_eq!(vec, vec3!(false, false, false));
    }
    {
        let mut vec = vec3!(false, true, false);
        vec.set(2, true);

        assert_eq!(vec, vec3!(false, true, true));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(false, true, false);
    vec.set(3, false);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(false, true, false);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec3!(true, true, false));
    }
    {
        let mut vec = vec3!(false, true, false);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec3!(false, false, false));
    }
    {
        let mut vec = vec3!(false, true, false);
        vec.try_set(2, true).unwrap();

        assert_eq!(vec, vec3!(false, true, true));
    }

    assert_eq!(
        vec3!(false, true, false).try_set(3, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(false, true, false);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec3!(true, true, false));
        }
        {
            let mut vec = vec3!(false, true, false);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec3!(false, false, false));
        }
        {
            let mut vec = vec3!(false, true, false);
            vec.set_unchecked(2, true);

            assert_eq!(vec, vec3!(false, true, true));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(false, true, false).z(), false);
    assert_eq!(vec3!(false, true, false).zx(), vec2!(false, false));
    assert_eq!(vec3!(false, true, false).zxy(), vec3!(false, false, true));
    assert_eq!(
        vec3!(false, true, false).zxyz(),
        vec4!(false, false, true, false)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(false, true, false).fold(false, |acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(vec3!(false, true, false).reduce(|acc, x| acc | x), true);
}

#[test]
fn test_vec3_eq_mask() {
    assert_eq!(
        vec3!(false, true, false).eq_mask(vec3!(false, true, false)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(false, true, false).eq_mask(vec3!(false, false, false)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(false, true, false).eq_mask(vec3!(true, false, true)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ne_mask() {
    assert_eq!(
        vec3!(false, true, false).ne_mask(vec3!(false, true, false)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(false, true, false).ne_mask(vec3!(false, false, false)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(false, true, false).ne_mask(vec3!(true, false, true)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_lt_mask() {
    assert_eq!(
        vec3!(false, true, false).lt_mask(vec3!(false, true, false)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(false, true, false).lt_mask(vec3!(true, false, false)),
        vec3!(true, false, false),
    );
}

#[test]
fn test_vec3_gt_mask() {
    assert_eq!(
        vec3!(false, true, false).gt_mask(vec3!(false, true, false)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(false, true, false).gt_mask(vec3!(true, false, false)),
        vec3!(false, true, false),
    );
}

#[test]
fn test_vec3_le_mask() {
    assert_eq!(
        vec3!(false, true, false).le_mask(vec3!(false, true, false)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(false, true, false).le_mask(vec3!(true, false, false)),
        vec3!(true, false, true),
    );
}

#[test]
fn test_vec3_ge_mask() {
    assert_eq!(
        vec3!(false, true, false).ge_mask(vec3!(false, true, false)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(false, true, false).ge_mask(vec3!(true, false, false)),
        vec3!(false, true, true),
    );
}

#[test]
fn test_vec3_eq() {
    assert_eq!(vec3!(false, true, false) == vec3!(false, true, false), true);
    assert_eq!(
        vec3!(false, true, false) == vec3!(false, false, false),
        false
    );
    assert_eq!(vec3!(false, true, false) == vec3!(true, false, true), false);
}

#[test]
fn test_vec3_ne() {
    assert_eq!(
        vec3!(false, true, false) != vec3!(false, true, false),
        false
    );
    assert_eq!(
        vec3!(false, true, false) != vec3!(false, false, false),
        true
    );
    assert_eq!(vec3!(false, true, false) != vec3!(true, false, true), true);
}

#[test]
fn test_vec3_debug() {
    assert_eq!(
        format!("{:?}", vec3!(false, true, false)),
        "(false, true, false)"
    );
}

#[test]
fn test_vec3_display() {
    assert_eq!(
        format!("{}", vec3!(false, true, false)),
        "(false, true, false)"
    );
}

#[test]
fn test_vec3p_align() {
    assert_eq!(
        vec3p!(false, true, false).align(),
        vec3!(false, true, false)
    );
}

#[test]
fn test_vec3p_pack() {
    assert_eq!(
        vec3p!(false, true, false).pack(),
        vec3p!(false, true, false)
    );
}

#[test]
fn test_vec3p_from_array_as_array() {
    assert_eq!(
        Vec3P::from_array([false, true, false]).as_array(),
        [false, true, false]
    );
}

#[test]
fn test_vec3p_splat() {
    assert_eq!(Vec3P::splat(false), vec3p!(false, false, false));
}

#[test]
fn test_vec3p_index() {
    assert_eq!(vec3p!(false, true, false).index(0), false);
    assert_eq!(vec3p!(false, true, false).index(1), true);
    assert_eq!(vec3p!(false, true, false).index(2), false);
}

#[test]
#[should_panic]
fn test_vec3p_index_panic() {
    vec3p!(false, true, false).index(3);
}

#[test]
fn test_vec3p_get() {
    assert_eq!(vec3p!(false, true, false).get(0), Some(false));
    assert_eq!(vec3p!(false, true, false).get(1), Some(true));
    assert_eq!(vec3p!(false, true, false).get(2), Some(false));

    assert_eq!(vec3p!(false, true, false).get(3), None);
}

#[test]
fn test_vec3p_get_unchecked() {
    unsafe {
        assert_eq!(vec3p!(false, true, false).get_unchecked(0), false);
        assert_eq!(vec3p!(false, true, false).get_unchecked(1), true);
        assert_eq!(vec3p!(false, true, false).get_unchecked(2), false);
    }
}

#[test]
fn test_vec3p_set() {
    {
        let mut vec = vec3p!(false, true, false);
        vec.set(0, true);

        assert_eq!(vec, vec3p!(true, true, false));
    }
    {
        let mut vec = vec3p!(false, true, false);
        vec.set(1, false);

        assert_eq!(vec, vec3p!(false, false, false));
    }
    {
        let mut vec = vec3p!(false, true, false);
        vec.set(2, true);

        assert_eq!(vec, vec3p!(false, true, true));
    }
}

#[test]
#[should_panic]
fn test_vec3p_set_panic() {
    let mut vec = vec3p!(false, true, false);
    vec.set(3, false);
}

#[test]
fn test_vec3p_try_set() {
    {
        let mut vec = vec3p!(false, true, false);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec3p!(true, true, false));
    }
    {
        let mut vec = vec3p!(false, true, false);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec3p!(false, false, false));
    }
    {
        let mut vec = vec3p!(false, true, false);
        vec.try_set(2, true).unwrap();

        assert_eq!(vec, vec3p!(false, true, true));
    }

    assert_eq!(
        vec3p!(false, true, false).try_set(3, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3p!(false, true, false);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec3p!(true, true, false));
        }
        {
            let mut vec = vec3p!(false, true, false);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec3p!(false, false, false));
        }
        {
            let mut vec = vec3p!(false, true, false);
            vec.set_unchecked(2, true);

            assert_eq!(vec, vec3p!(false, true, true));
        }
    }
}

#[test]
fn test_vec3p_swizzle() {
    assert_eq!(vec3p!(false, true, false).z(), false);
    assert_eq!(vec3p!(false, true, false).zx(), vec2p!(false, false));
    assert_eq!(vec3p!(false, true, false).zxy(), vec3p!(false, false, true));
    assert_eq!(
        vec3p!(false, true, false).zxyz(),
        vec4p!(false, false, true, false)
    );
}

#[test]
fn test_vec3p_fold() {
    assert_eq!(
        vec3p!(false, true, false).fold(false, |acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec3p_reduce() {
    assert_eq!(vec3p!(false, true, false).reduce(|acc, x| acc | x), true);
}

#[test]
fn test_vec3p_eq_mask() {
    assert_eq!(
        vec3p!(false, true, false).eq_mask(vec3p!(false, true, false)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(false, true, false).eq_mask(vec3p!(false, false, false)),
        vec3p!(true, false, true),
    );
    assert_eq!(
        vec3p!(false, true, false).eq_mask(vec3p!(true, false, true)),
        vec3p!(false, false, false)
    );
}

#[test]
fn test_vec3p_ne_mask() {
    assert_eq!(
        vec3p!(false, true, false).ne_mask(vec3p!(false, true, false)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(false, true, false).ne_mask(vec3p!(false, false, false)),
        vec3p!(false, true, false),
    );
    assert_eq!(
        vec3p!(false, true, false).ne_mask(vec3p!(true, false, true)),
        vec3p!(true, true, true)
    );
}

#[test]
fn test_vec3p_lt_mask() {
    assert_eq!(
        vec3p!(false, true, false).lt_mask(vec3p!(false, true, false)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(false, true, false).lt_mask(vec3p!(true, false, false)),
        vec3p!(true, false, false),
    );
}

#[test]
fn test_vec3p_gt_mask() {
    assert_eq!(
        vec3p!(false, true, false).gt_mask(vec3p!(false, true, false)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(false, true, false).gt_mask(vec3p!(true, false, false)),
        vec3p!(false, true, false),
    );
}

#[test]
fn test_vec3p_le_mask() {
    assert_eq!(
        vec3p!(false, true, false).le_mask(vec3p!(false, true, false)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(false, true, false).le_mask(vec3p!(true, false, false)),
        vec3p!(true, false, true),
    );
}

#[test]
fn test_vec3p_ge_mask() {
    assert_eq!(
        vec3p!(false, true, false).ge_mask(vec3p!(false, true, false)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(false, true, false).ge_mask(vec3p!(true, false, false)),
        vec3p!(false, true, true),
    );
}

#[test]
fn test_vec3p_eq() {
    assert_eq!(
        vec3p!(false, true, false) == vec3p!(false, true, false),
        true
    );
    assert_eq!(
        vec3p!(false, true, false) == vec3p!(false, false, false),
        false
    );
    assert_eq!(
        vec3p!(false, true, false) == vec3p!(true, false, true),
        false
    );
}

#[test]
fn test_vec3p_ne() {
    assert_eq!(
        vec3p!(false, true, false) != vec3p!(false, true, false),
        false
    );
    assert_eq!(
        vec3p!(false, true, false) != vec3p!(false, false, false),
        true
    );
    assert_eq!(
        vec3p!(false, true, false) != vec3p!(true, false, true),
        true
    );
}

#[test]
fn test_vec3p_debug() {
    assert_eq!(
        format!("{:?}", vec3p!(false, true, false)),
        "(false, true, false)"
    );
}

#[test]
fn test_vec3p_display() {
    assert_eq!(
        format!("{}", vec3p!(false, true, false)),
        "(false, true, false)"
    );
}

const _: () = assert!(size_of::<Vec4P<bool>>() == size_of::<[bool; 4]>());

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(false, true, false, true).align(),
        vec4!(false, true, false, true)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(false, true, false, true).pack(),
        vec4p!(false, true, false, true)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([false, true, false, true]).as_array(),
        [false, true, false, true]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(false), vec4!(false, false, false, false));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(false, true, false, true).index(0), false);
    assert_eq!(vec4!(false, true, false, true).index(1), true);
    assert_eq!(vec4!(false, true, false, true).index(2), false);
    assert_eq!(vec4!(false, true, false, true).index(3), true);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(false, true, false, true).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(false, true, false, true).get(0), Some(false));
    assert_eq!(vec4!(false, true, false, true).get(1), Some(true));
    assert_eq!(vec4!(false, true, false, true).get(2), Some(false));
    assert_eq!(vec4!(false, true, false, true).get(3), Some(true));

    assert_eq!(vec4!(false, true, false, true).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(vec4!(false, true, false, true).get_unchecked(0), false);
        assert_eq!(vec4!(false, true, false, true).get_unchecked(1), true);
        assert_eq!(vec4!(false, true, false, true).get_unchecked(2), false);
        assert_eq!(vec4!(false, true, false, true).get_unchecked(3), true);
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(false, true, false, true);
        vec.set(0, true);

        assert_eq!(vec, vec4!(true, true, false, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.set(1, false);

        assert_eq!(vec, vec4!(false, false, false, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.set(2, true);

        assert_eq!(vec, vec4!(false, true, true, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.set(3, false);

        assert_eq!(vec, vec4!(false, true, false, false));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(false, true, false, true);
    vec.set(4, false);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(false, true, false, true);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec4!(true, true, false, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec4!(false, false, false, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.try_set(2, true).unwrap();

        assert_eq!(vec, vec4!(false, true, true, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.try_set(3, false).unwrap();

        assert_eq!(vec, vec4!(false, true, false, false));
    }

    assert_eq!(
        vec4!(false, true, false, true).try_set(4, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(false, true, false, true);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec4!(true, true, false, true));
        }
        {
            let mut vec = vec4!(false, true, false, true);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec4!(false, false, false, true));
        }
        {
            let mut vec = vec4!(false, true, false, true);
            vec.set_unchecked(2, true);

            assert_eq!(vec, vec4!(false, true, true, true));
        }
        {
            let mut vec = vec4!(false, true, false, true);
            vec.set_unchecked(3, false);

            assert_eq!(vec, vec4!(false, true, false, false));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(false, true, false, true).z(), false);
    assert_eq!(vec4!(false, true, false, true).zw(), vec2!(false, true));
    assert_eq!(
        vec4!(false, true, false, true).zwy(),
        vec3!(false, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).zwyz(),
        vec4!(false, true, true, false)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(false, true, false, true).fold(false, |acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(false, true, false, true).reduce(|acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(false, true, false, true).eq_mask(vec4!(false, true, false, true)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).eq_mask(vec4!(false, false, false, true)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(false, true, false, true).eq_mask(vec4!(true, false, true, false)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(false, true, false, true).ne_mask(vec4!(false, true, false, true)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(false, true, false, true).ne_mask(vec4!(false, false, false, true)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(false, true, false, true).ne_mask(vec4!(true, false, true, false)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(false, true, false, true).lt_mask(vec4!(false, true, false, true)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(false, true, false, true).lt_mask(vec4!(true, false, false, true)),
        vec4!(true, false, false, false),
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(false, true, false, true).gt_mask(vec4!(false, true, false, true)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(false, true, false, true).gt_mask(vec4!(true, false, false, true)),
        vec4!(false, true, false, false),
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(false, true, false, true).le_mask(vec4!(false, true, false, true)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).le_mask(vec4!(true, false, false, true)),
        vec4!(true, false, true, true),
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(false, true, false, true).ge_mask(vec4!(false, true, false, true)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).ge_mask(vec4!(true, false, false, true)),
        vec4!(false, true, true, true),
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(false, true, false, true) == vec4!(false, true, false, true),
        true
    );
    assert_eq!(
        vec4!(false, true, false, true) == vec4!(false, false, false, true),
        false
    );
    assert_eq!(
        vec4!(false, true, false, true) == vec4!(true, false, true, false),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(false, true, false, true) != vec4!(false, true, false, true),
        false
    );
    assert_eq!(
        vec4!(false, true, false, true) != vec4!(false, false, false, true),
        true
    );
    assert_eq!(
        vec4!(false, true, false, true) != vec4!(true, false, true, false),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(false, true, false, true)),
        "(false, true, false, true)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(
        format!("{}", vec4!(false, true, false, true)),
        "(false, true, false, true)"
    );
}

#[test]
fn test_vec4p_align() {
    assert_eq!(
        vec4p!(false, true, false, true).align(),
        vec4!(false, true, false, true)
    );
}

#[test]
fn test_vec4p_pack() {
    assert_eq!(
        vec4p!(false, true, false, true).pack(),
        vec4p!(false, true, false, true)
    );
}

#[test]
fn test_vec4p_from_array_as_array() {
    assert_eq!(
        Vec4P::from_array([false, true, false, true]).as_array(),
        [false, true, false, true]
    );
}

#[test]
fn test_vec4p_splat() {
    assert_eq!(Vec4P::splat(false), vec4p!(false, false, false, false));
}

#[test]
fn test_vec4p_index() {
    assert_eq!(vec4p!(false, true, false, true).index(0), false);
    assert_eq!(vec4p!(false, true, false, true).index(1), true);
    assert_eq!(vec4p!(false, true, false, true).index(2), false);
    assert_eq!(vec4p!(false, true, false, true).index(3), true);
}

#[test]
#[should_panic]
fn test_vec4p_index_panic() {
    vec4p!(false, true, false, true).index(4);
}

#[test]
fn test_vec4p_get() {
    assert_eq!(vec4p!(false, true, false, true).get(0), Some(false));
    assert_eq!(vec4p!(false, true, false, true).get(1), Some(true));
    assert_eq!(vec4p!(false, true, false, true).get(2), Some(false));
    assert_eq!(vec4p!(false, true, false, true).get(3), Some(true));

    assert_eq!(vec4p!(false, true, false, true).get(4), None);
}

#[test]
fn test_vec4p_get_unchecked() {
    unsafe {
        assert_eq!(vec4p!(false, true, false, true).get_unchecked(0), false);
        assert_eq!(vec4p!(false, true, false, true).get_unchecked(1), true);
        assert_eq!(vec4p!(false, true, false, true).get_unchecked(2), false);
        assert_eq!(vec4p!(false, true, false, true).get_unchecked(3), true);
    }
}

#[test]
fn test_vec4p_set() {
    {
        let mut vec = vec4p!(false, true, false, true);
        vec.set(0, true);

        assert_eq!(vec, vec4p!(true, true, false, true));
    }
    {
        let mut vec = vec4p!(false, true, false, true);
        vec.set(1, false);

        assert_eq!(vec, vec4p!(false, false, false, true));
    }
    {
        let mut vec = vec4p!(false, true, false, true);
        vec.set(2, true);

        assert_eq!(vec, vec4p!(false, true, true, true));
    }
    {
        let mut vec = vec4p!(false, true, false, true);
        vec.set(3, false);

        assert_eq!(vec, vec4p!(false, true, false, false));
    }
}

#[test]
#[should_panic]
fn test_vec4p_set_panic() {
    let mut vec = vec4p!(false, true, false, true);
    vec.set(4, false);
}

#[test]
fn test_vec4p_try_set() {
    {
        let mut vec = vec4p!(false, true, false, true);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec4p!(true, true, false, true));
    }
    {
        let mut vec = vec4p!(false, true, false, true);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec4p!(false, false, false, true));
    }
    {
        let mut vec = vec4p!(false, true, false, true);
        vec.try_set(2, true).unwrap();

        assert_eq!(vec, vec4p!(false, true, true, true));
    }
    {
        let mut vec = vec4p!(false, true, false, true);
        vec.try_set(3, false).unwrap();

        assert_eq!(vec, vec4p!(false, true, false, false));
    }

    assert_eq!(
        vec4p!(false, true, false, true).try_set(4, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4p!(false, true, false, true);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec4p!(true, true, false, true));
        }
        {
            let mut vec = vec4p!(false, true, false, true);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec4p!(false, false, false, true));
        }
        {
            let mut vec = vec4p!(false, true, false, true);
            vec.set_unchecked(2, true);

            assert_eq!(vec, vec4p!(false, true, true, true));
        }
        {
            let mut vec = vec4p!(false, true, false, true);
            vec.set_unchecked(3, false);

            assert_eq!(vec, vec4p!(false, true, false, false));
        }
    }
}

#[test]
fn test_vec4p_swizzle() {
    assert_eq!(vec4p!(false, true, false, true).z(), false);
    assert_eq!(vec4p!(false, true, false, true).zw(), vec2p!(false, true));
    assert_eq!(
        vec4p!(false, true, false, true).zwy(),
        vec3p!(false, true, true)
    );
    assert_eq!(
        vec4p!(false, true, false, true).zwyz(),
        vec4p!(false, true, true, false)
    );
}

#[test]
fn test_vec4p_fold() {
    assert_eq!(
        vec4p!(false, true, false, true).fold(false, |acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec4p_reduce() {
    assert_eq!(
        vec4p!(false, true, false, true).reduce(|acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec4p_eq_mask() {
    assert_eq!(
        vec4p!(false, true, false, true).eq_mask(vec4p!(false, true, false, true)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(false, true, false, true).eq_mask(vec4p!(false, false, false, true)),
        vec4p!(true, false, true, true),
    );
    assert_eq!(
        vec4p!(false, true, false, true).eq_mask(vec4p!(true, false, true, false)),
        vec4p!(false, false, false, false)
    );
}

#[test]
fn test_vec4p_ne_mask() {
    assert_eq!(
        vec4p!(false, true, false, true).ne_mask(vec4p!(false, true, false, true)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(false, true, false, true).ne_mask(vec4p!(false, false, false, true)),
        vec4p!(false, true, false, false),
    );
    assert_eq!(
        vec4p!(false, true, false, true).ne_mask(vec4p!(true, false, true, false)),
        vec4p!(true, true, true, true)
    );
}

#[test]
fn test_vec4p_lt_mask() {
    assert_eq!(
        vec4p!(false, true, false, true).lt_mask(vec4p!(false, true, false, true)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(false, true, false, true).lt_mask(vec4p!(true, false, false, true)),
        vec4p!(true, false, false, false),
    );
}

#[test]
fn test_vec4p_gt_mask() {
    assert_eq!(
        vec4p!(false, true, false, true).gt_mask(vec4p!(false, true, false, true)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(false, true, false, true).gt_mask(vec4p!(true, false, false, true)),
        vec4p!(false, true, false, false),
    );
}

#[test]
fn test_vec4p_le_mask() {
    assert_eq!(
        vec4p!(false, true, false, true).le_mask(vec4p!(false, true, false, true)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(false, true, false, true).le_mask(vec4p!(true, false, false, true)),
        vec4p!(true, false, true, true),
    );
}

#[test]
fn test_vec4p_ge_mask() {
    assert_eq!(
        vec4p!(false, true, false, true).ge_mask(vec4p!(false, true, false, true)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(false, true, false, true).ge_mask(vec4p!(true, false, false, true)),
        vec4p!(false, true, true, true),
    );
}

#[test]
fn test_vec4p_eq() {
    assert_eq!(
        vec4p!(false, true, false, true) == vec4p!(false, true, false, true),
        true
    );
    assert_eq!(
        vec4p!(false, true, false, true) == vec4p!(false, false, false, true),
        false
    );
    assert_eq!(
        vec4p!(false, true, false, true) == vec4p!(true, false, true, false),
        false
    );
}

#[test]
fn test_vec4p_ne() {
    assert_eq!(
        vec4p!(false, true, false, true) != vec4p!(false, true, false, true),
        false
    );
    assert_eq!(
        vec4p!(false, true, false, true) != vec4p!(false, false, false, true),
        true
    );
    assert_eq!(
        vec4p!(false, true, false, true) != vec4p!(true, false, true, false),
        true
    );
}

#[test]
fn test_vec4p_debug() {
    assert_eq!(
        format!("{:?}", vec4p!(false, true, false, true)),
        "(false, true, false, true)"
    );
}

#[test]
fn test_vec4p_display() {
    assert_eq!(
        format!("{}", vec4p!(false, true, false, true)),
        "(false, true, false, true)"
    );
}
