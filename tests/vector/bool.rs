// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_nonsimd_bool_vec_layout() {
    assert_eq!(size_of::<Vec2S<bool>>(), size_of::<bool>() * 2);
    assert_eq!(size_of::<Vec3S<bool>>(), size_of::<bool>() * 3);
    assert_eq!(size_of::<Vec4S<bool>>(), size_of::<bool>() * 4);

    assert_eq!(align_of::<Vec2S<bool>>(), align_of::<bool>());
    assert_eq!(align_of::<Vec3S<bool>>(), align_of::<bool>());
    assert_eq!(align_of::<Vec4S<bool>>(), align_of::<bool>());
}

#[test]
fn test_simd_bool_vec_constructors() {
    assert_eq!(Vec2::from_array([false, true]).as_array(), [false, true]);
    assert_eq!(
        Vec3::from_array([false, true, false]).as_array(),
        [false, true, false]
    );
    assert_eq!(
        Vec4::from_array([false, true, false, true]).as_array(),
        [false, true, false, true]
    );

    assert_eq!(Vec2::splat(false).as_array(), [false; 2]);
    assert_eq!(Vec3::splat(false).as_array(), [false; 3]);
    assert_eq!(Vec4::splat(false).as_array(), [false; 4]);

    assert_eq!(
        Vec2::from_fn(|i| [false, true][i]).as_array(),
        [false, true]
    );
    assert_eq!(
        Vec3::from_fn(|i| [false, true, false][i]).as_array(),
        [false, true, false]
    );
    assert_eq!(
        Vec4::from_fn(|i| [false, true, false, true][i]).as_array(),
        [false, true, false, true]
    );

    assert_eq!(
        Vec2::const_from_array([false, true]).as_array(),
        [false, true]
    );
    assert_eq!(
        Vec3::const_from_array([false, true, false]).as_array(),
        [false, true, false]
    );
    assert_eq!(
        Vec4::const_from_array([false, true, false, true]).as_array(),
        [false, true, false, true]
    );

    assert_eq!(vec2!(false, true).as_array(), [false, true]);
    assert_eq!(vec2!(vec2!(false, true)).as_array(), [false, true]);
    assert_eq!(vec3!(false, true, false).as_array(), [false, true, false]);
    assert_eq!(
        vec3!(false, vec2!(true, false)).as_array(),
        [false, true, false]
    );
    assert_eq!(
        vec4!(false, true, false, true).as_array(),
        [false, true, false, true]
    );
    assert_eq!(
        vec4!(false, vec2!(true, false), true).as_array(),
        [false, true, false, true]
    );
    assert_eq!(
        vec4!(
            false,
            vec2!(true, false),
            Vector::<1, bool, Simd>::from_array([true])
        )
        .as_array(),
        [false, true, false, true]
    );
}

#[test]
fn test_nonsimd_bool_vec_constructors() {
    assert_eq!(Vec2S::from_array([false, true]).as_array(), [false, true]);
    assert_eq!(
        Vec3S::from_array([false, true, false]).as_array(),
        [false, true, false]
    );
    assert_eq!(
        Vec4S::from_array([false, true, false, true]).as_array(),
        [false, true, false, true]
    );

    assert_eq!(Vec2S::splat(false).as_array(), [false; 2]);
    assert_eq!(Vec3S::splat(false).as_array(), [false; 3]);
    assert_eq!(Vec4S::splat(false).as_array(), [false; 4]);

    assert_eq!(
        Vec2S::from_fn(|i| [false, true][i]).as_array(),
        [false, true]
    );
    assert_eq!(
        Vec3S::from_fn(|i| [false, true, false][i]).as_array(),
        [false, true, false]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [false, true, false, true][i]).as_array(),
        [false, true, false, true]
    );

    assert_eq!(
        Vec2S::const_from_array([false, true]).as_array(),
        [false, true]
    );
    assert_eq!(
        Vec3S::const_from_array([false, true, false]).as_array(),
        [false, true, false]
    );
    assert_eq!(
        Vec4S::const_from_array([false, true, false, true]).as_array(),
        [false, true, false, true]
    );

    assert_eq!(vec2s!(false, true).as_array(), [false, true]);
    assert_eq!(vec2s!(vec2s!(false, true)).as_array(), [false, true]);
    assert_eq!(vec3s!(false, true, false).as_array(), [false, true, false]);
    assert_eq!(
        vec3s!(false, vec2s!(true, false)).as_array(),
        [false, true, false]
    );
    assert_eq!(
        vec4s!(false, true, false, true).as_array(),
        [false, true, false, true]
    );
    assert_eq!(
        vec4s!(false, vec2s!(true, false), true).as_array(),
        [false, true, false, true]
    );
    assert_eq!(
        vec4s!(
            false,
            vec2s!(true, false),
            Vector::<1, bool, NonSimd>::from_array([true])
        )
        .as_array(),
        [false, true, false, true]
    );
}
