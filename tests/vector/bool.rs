// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

#[test]
fn test_vec2_constructor() {
    assert_eq!(vec2!(false, true), Vec2::from_array([false, true]));
    assert_eq!(vec2!(vec2!(false, true)), Vec2::from_array([false, true]));
}

#[test]
fn test_vec2_as_simd() {
    assert_eq!(vec2!(false, true).as_simd(), vec2!(false, true));
}

#[test]
fn test_vec2_as_non_simd() {
    assert_eq!(vec2!(false, true).as_non_simd(), vec2s!(false, true));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(Vec2::from_array([false, true]).as_array(), [false, true]);
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(false), vec2!(false, false));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(false, true).index(0), false);
    assert_eq!(vec2!(false, true).index(1), true);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(false, true).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(false, true).get(0), Some(false));
    assert_eq!(vec2!(false, true).get(1), Some(true));

    assert_eq!(vec2!(false, true).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(false, true).get_unchecked(0), false);
        assert_eq!(vec2!(false, true).get_unchecked(1), true);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(false, true);
        vec.set(0, true);

        assert_eq!(vec, vec2!(true, true));
    }
    {
        let mut vec = vec2!(false, true);
        vec.set(1, false);

        assert_eq!(vec, vec2!(false, false));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(false, true);
    vec.set(2, false);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(false, true);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec2!(true, true));
    }
    {
        let mut vec = vec2!(false, true);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec2!(false, false));
    }

    assert_eq!(
        vec2!(false, true).try_set(2, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(false, true);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec2!(true, true));
        }
        {
            let mut vec = vec2!(false, true);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec2!(false, false));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(false, true).y(), true);
    assert_eq!(vec2!(false, true).yx(), vec2!(true, false));
    assert_eq!(vec2!(false, true).yxy(), vec3!(true, false, true));
    assert_eq!(vec2!(false, true).yxyy(), vec4!(true, false, true, true));
}

#[test]
fn test_vec2_with_swizzle() {
    assert_eq!(vec2!(false, true).with_y(false), vec2!(false, false));
    assert_eq!(
        vec2!(false, true).with_yx(vec2!(false, true)),
        vec2!(true, false)
    );
}

#[test]
fn test_vec2_fold() {
    assert_eq!(vec2!(false, true).fold(false, |acc, x| acc | x), true);
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(vec2!(false, true).reduce(|acc, x| acc | x), true);
}

#[test]
fn test_vec2_eq_mask() {
    assert_eq!(
        vec2!(false, true).eq_mask(vec2!(false, true)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(false, true).eq_mask(vec2!(false, false)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(false, true).eq_mask(vec2!(true, false)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ne_mask() {
    assert_eq!(
        vec2!(false, true).ne_mask(vec2!(false, true)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(false, true).ne_mask(vec2!(false, false)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(false, true).ne_mask(vec2!(true, false)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_lt_mask() {
    assert_eq!(
        vec2!(false, true).lt_mask(vec2!(false, true)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(false, true).lt_mask(vec2!(true, false)),
        vec2!(true, false),
    );
}

#[test]
fn test_vec2_gt_mask() {
    assert_eq!(
        vec2!(false, true).gt_mask(vec2!(false, true)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(false, true).gt_mask(vec2!(true, false)),
        vec2!(false, true),
    );
}

#[test]
fn test_vec2_le_mask() {
    assert_eq!(
        vec2!(false, true).le_mask(vec2!(false, true)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(false, true).le_mask(vec2!(true, false)),
        vec2!(true, false),
    );
}

#[test]
fn test_vec2_ge_mask() {
    assert_eq!(
        vec2!(false, true).ge_mask(vec2!(false, true)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(false, true).ge_mask(vec2!(true, false)),
        vec2!(false, true),
    );
}

#[test]
fn test_vec2_eq() {
    assert_eq!(vec2!(false, true) == vec2!(false, true), true);
    assert_eq!(vec2!(false, true) == vec2!(false, false), false);
    assert_eq!(vec2!(false, true) == vec2!(true, false), false);
}

#[test]
fn test_vec2_ne() {
    assert_eq!(vec2!(false, true) != vec2!(false, true), false);
    assert_eq!(vec2!(false, true) != vec2!(false, false), true);
    assert_eq!(vec2!(false, true) != vec2!(true, false), true);
}

#[test]
fn test_vec2_debug() {
    assert_eq!(format!("{:?}", vec2!(false, true)), "(false, true)");
}

#[test]
fn test_vec2_display() {
    assert_eq!(format!("{}", vec2!(false, true)), "(false, true)");
}

#[test]
fn test_vec2_const_from_array() {
    assert_eq!(
        Vec2::<bool>::const_from_array([false, true]),
        Vec2::from_array([false, true])
    );
}

const _: () = assert!(size_of::<Vec2S<bool>>() == size_of::<[bool; 2]>());

#[test]
fn test_vec2s_constructor() {
    assert_eq!(vec2s!(false, true), Vec2S::from_array([false, true]));
    assert_eq!(
        vec2s!(vec2s!(false, true)),
        Vec2S::from_array([false, true])
    );
}

#[test]
fn test_vec2s_as_simd() {
    assert_eq!(vec2s!(false, true).as_simd(), vec2!(false, true));
}

#[test]
fn test_vec2s_as_non_simd() {
    assert_eq!(vec2s!(false, true).as_non_simd(), vec2s!(false, true));
}

#[test]
fn test_vec2s_from_array_as_array() {
    assert_eq!(Vec2S::from_array([false, true]).as_array(), [false, true]);
}

#[test]
fn test_vec2s_splat() {
    assert_eq!(Vec2S::splat(false), vec2s!(false, false));
}

#[test]
fn test_vec2s_index() {
    assert_eq!(vec2s!(false, true).index(0), false);
    assert_eq!(vec2s!(false, true).index(1), true);
}

#[test]
#[should_panic]
fn test_vec2s_index_panic() {
    vec2s!(false, true).index(2);
}

#[test]
fn test_vec2s_get() {
    assert_eq!(vec2s!(false, true).get(0), Some(false));
    assert_eq!(vec2s!(false, true).get(1), Some(true));

    assert_eq!(vec2s!(false, true).get(2), None);
}

#[test]
fn test_vec2s_get_unchecked() {
    unsafe {
        assert_eq!(vec2s!(false, true).get_unchecked(0), false);
        assert_eq!(vec2s!(false, true).get_unchecked(1), true);
    }
}

#[test]
fn test_vec2s_set() {
    {
        let mut vec = vec2s!(false, true);
        vec.set(0, true);

        assert_eq!(vec, vec2s!(true, true));
    }
    {
        let mut vec = vec2s!(false, true);
        vec.set(1, false);

        assert_eq!(vec, vec2s!(false, false));
    }
}

#[test]
#[should_panic]
fn test_vec2s_set_panic() {
    let mut vec = vec2s!(false, true);
    vec.set(2, false);
}

#[test]
fn test_vec2s_try_set() {
    {
        let mut vec = vec2s!(false, true);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec2s!(true, true));
    }
    {
        let mut vec = vec2s!(false, true);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec2s!(false, false));
    }

    assert_eq!(
        vec2s!(false, true).try_set(2, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2s_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2s!(false, true);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec2s!(true, true));
        }
        {
            let mut vec = vec2s!(false, true);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec2s!(false, false));
        }
    }
}

#[test]
fn test_vec2s_swizzle() {
    assert_eq!(vec2s!(false, true).y(), true);
    assert_eq!(vec2s!(false, true).yx(), vec2s!(true, false));
    assert_eq!(vec2s!(false, true).yxy(), vec3s!(true, false, true));
    assert_eq!(vec2s!(false, true).yxyy(), vec4s!(true, false, true, true));
}

#[test]
fn test_vec2s_with_swizzle() {
    assert_eq!(vec2s!(false, true).with_y(false), vec2s!(false, false));
    assert_eq!(
        vec2s!(false, true).with_yx(vec2s!(false, true)),
        vec2s!(true, false)
    );
}

#[test]
fn test_vec2s_swizzle_ref() {
    assert_eq!(vec2s!(false, true).y_ref(), &true);
    assert_eq!(vec2s!(false, true).xy_ref(), &vec2s!(false, true));
}

#[test]
fn test_vec2s_swizzle_mut() {
    assert_eq!(vec2s!(false, true).y_mut(), &mut true);
    assert_eq!(vec2s!(false, true).xy_mut(), &mut vec2s!(false, true));

    assert_eq!(vec2s!(false, true).x_y_mut(), (&mut false, &mut true));
}

#[test]
fn test_vec2s_fold() {
    assert_eq!(vec2s!(false, true).fold(false, |acc, x| acc | x), true);
}

#[test]
fn test_vec2s_reduce() {
    assert_eq!(vec2s!(false, true).reduce(|acc, x| acc | x), true);
}

#[test]
fn test_vec2s_eq_mask() {
    assert_eq!(
        vec2s!(false, true).eq_mask(vec2s!(false, true)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(false, true).eq_mask(vec2s!(false, false)),
        vec2s!(true, false),
    );
    assert_eq!(
        vec2s!(false, true).eq_mask(vec2s!(true, false)),
        vec2s!(false, false)
    );
}

#[test]
fn test_vec2s_ne_mask() {
    assert_eq!(
        vec2s!(false, true).ne_mask(vec2s!(false, true)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(false, true).ne_mask(vec2s!(false, false)),
        vec2s!(false, true),
    );
    assert_eq!(
        vec2s!(false, true).ne_mask(vec2s!(true, false)),
        vec2s!(true, true)
    );
}

#[test]
fn test_vec2s_lt_mask() {
    assert_eq!(
        vec2s!(false, true).lt_mask(vec2s!(false, true)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(false, true).lt_mask(vec2s!(true, false)),
        vec2s!(true, false),
    );
}

#[test]
fn test_vec2s_gt_mask() {
    assert_eq!(
        vec2s!(false, true).gt_mask(vec2s!(false, true)),
        vec2s!(false, false)
    );
    assert_eq!(
        vec2s!(false, true).gt_mask(vec2s!(true, false)),
        vec2s!(false, true),
    );
}

#[test]
fn test_vec2s_le_mask() {
    assert_eq!(
        vec2s!(false, true).le_mask(vec2s!(false, true)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(false, true).le_mask(vec2s!(true, false)),
        vec2s!(true, false),
    );
}

#[test]
fn test_vec2s_ge_mask() {
    assert_eq!(
        vec2s!(false, true).ge_mask(vec2s!(false, true)),
        vec2s!(true, true)
    );
    assert_eq!(
        vec2s!(false, true).ge_mask(vec2s!(true, false)),
        vec2s!(false, true),
    );
}

#[test]
fn test_vec2s_eq() {
    assert_eq!(vec2s!(false, true) == vec2s!(false, true), true);
    assert_eq!(vec2s!(false, true) == vec2s!(false, false), false);
    assert_eq!(vec2s!(false, true) == vec2s!(true, false), false);
}

#[test]
fn test_vec2s_ne() {
    assert_eq!(vec2s!(false, true) != vec2s!(false, true), false);
    assert_eq!(vec2s!(false, true) != vec2s!(false, false), true);
    assert_eq!(vec2s!(false, true) != vec2s!(true, false), true);
}

#[test]
fn test_vec2s_debug() {
    assert_eq!(format!("{:?}", vec2s!(false, true)), "(false, true)");
}

#[test]
fn test_vec2s_display() {
    assert_eq!(format!("{}", vec2s!(false, true)), "(false, true)");
}

#[test]
fn test_vec2s_const_from_array() {
    assert_eq!(
        Vec2S::<bool>::const_from_array([false, true]),
        Vec2S::from_array([false, true])
    );
}

#[test]
fn test_vec3_constructor() {
    assert_eq!(
        vec3!(false, true, false),
        Vec3::from_array([false, true, false])
    );
    assert_eq!(
        vec3!(false, vec2!(true, false)),
        Vec3::from_array([false, true, false])
    );
    assert_eq!(
        vec3!(vec3!(false, true, false)),
        Vec3::from_array([false, true, false])
    );
}

#[test]
fn test_vec3_as_simd() {
    assert_eq!(
        vec3!(false, true, false).as_simd(),
        vec3!(false, true, false)
    );
}

#[test]
fn test_vec3_as_non_simd() {
    assert_eq!(
        vec3!(false, true, false).as_non_simd(),
        vec3s!(false, true, false)
    );
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([false, true, false]).as_array(),
        [false, true, false]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(false), vec3!(false, false, false));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(false, true, false).index(0), false);
    assert_eq!(vec3!(false, true, false).index(1), true);
    assert_eq!(vec3!(false, true, false).index(2), false);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(false, true, false).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(false, true, false).get(0), Some(false));
    assert_eq!(vec3!(false, true, false).get(1), Some(true));
    assert_eq!(vec3!(false, true, false).get(2), Some(false));

    assert_eq!(vec3!(false, true, false).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(false, true, false).get_unchecked(0), false);
        assert_eq!(vec3!(false, true, false).get_unchecked(1), true);
        assert_eq!(vec3!(false, true, false).get_unchecked(2), false);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(false, true, false);
        vec.set(0, true);

        assert_eq!(vec, vec3!(true, true, false));
    }
    {
        let mut vec = vec3!(false, true, false);
        vec.set(1, false);

        assert_eq!(vec, vec3!(false, false, false));
    }
    {
        let mut vec = vec3!(false, true, false);
        vec.set(2, true);

        assert_eq!(vec, vec3!(false, true, true));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(false, true, false);
    vec.set(3, false);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(false, true, false);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec3!(true, true, false));
    }
    {
        let mut vec = vec3!(false, true, false);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec3!(false, false, false));
    }
    {
        let mut vec = vec3!(false, true, false);
        vec.try_set(2, true).unwrap();

        assert_eq!(vec, vec3!(false, true, true));
    }

    assert_eq!(
        vec3!(false, true, false).try_set(3, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(false, true, false);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec3!(true, true, false));
        }
        {
            let mut vec = vec3!(false, true, false);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec3!(false, false, false));
        }
        {
            let mut vec = vec3!(false, true, false);
            vec.set_unchecked(2, true);

            assert_eq!(vec, vec3!(false, true, true));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(false, true, false).z(), false);
    assert_eq!(vec3!(false, true, false).zx(), vec2!(false, false));
    assert_eq!(vec3!(false, true, false).zxy(), vec3!(false, false, true));
    assert_eq!(
        vec3!(false, true, false).zxyz(),
        vec4!(false, false, true, false)
    );
}

#[test]
fn test_vec3_with_swizzle() {
    assert_eq!(
        vec3!(false, true, false).with_y(false),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(false, true, false).with_yx(vec2!(false, true)),
        vec3!(true, false, false)
    );
    assert_eq!(
        vec3!(false, true, false).with_yxz(vec3!(false, false, true)),
        vec3!(false, false, true)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(false, true, false).fold(false, |acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(vec3!(false, true, false).reduce(|acc, x| acc | x), true);
}

#[test]
fn test_vec3_eq_mask() {
    assert_eq!(
        vec3!(false, true, false).eq_mask(vec3!(false, true, false)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(false, true, false).eq_mask(vec3!(false, false, false)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(false, true, false).eq_mask(vec3!(true, false, true)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ne_mask() {
    assert_eq!(
        vec3!(false, true, false).ne_mask(vec3!(false, true, false)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(false, true, false).ne_mask(vec3!(false, false, false)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(false, true, false).ne_mask(vec3!(true, false, true)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_lt_mask() {
    assert_eq!(
        vec3!(false, true, false).lt_mask(vec3!(false, true, false)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(false, true, false).lt_mask(vec3!(true, false, false)),
        vec3!(true, false, false),
    );
}

#[test]
fn test_vec3_gt_mask() {
    assert_eq!(
        vec3!(false, true, false).gt_mask(vec3!(false, true, false)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(false, true, false).gt_mask(vec3!(true, false, false)),
        vec3!(false, true, false),
    );
}

#[test]
fn test_vec3_le_mask() {
    assert_eq!(
        vec3!(false, true, false).le_mask(vec3!(false, true, false)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(false, true, false).le_mask(vec3!(true, false, false)),
        vec3!(true, false, true),
    );
}

#[test]
fn test_vec3_ge_mask() {
    assert_eq!(
        vec3!(false, true, false).ge_mask(vec3!(false, true, false)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(false, true, false).ge_mask(vec3!(true, false, false)),
        vec3!(false, true, true),
    );
}

#[test]
fn test_vec3_eq() {
    assert_eq!(vec3!(false, true, false) == vec3!(false, true, false), true);
    assert_eq!(
        vec3!(false, true, false) == vec3!(false, false, false),
        false
    );
    assert_eq!(vec3!(false, true, false) == vec3!(true, false, true), false);
}

#[test]
fn test_vec3_ne() {
    assert_eq!(
        vec3!(false, true, false) != vec3!(false, true, false),
        false
    );
    assert_eq!(
        vec3!(false, true, false) != vec3!(false, false, false),
        true
    );
    assert_eq!(vec3!(false, true, false) != vec3!(true, false, true), true);
}

#[test]
fn test_vec3_debug() {
    assert_eq!(
        format!("{:?}", vec3!(false, true, false)),
        "(false, true, false)"
    );
}

#[test]
fn test_vec3_display() {
    assert_eq!(
        format!("{}", vec3!(false, true, false)),
        "(false, true, false)"
    );
}

#[test]
fn test_vec3_const_from_array() {
    assert_eq!(
        Vec3::<bool>::const_from_array([false, true, false]),
        Vec3::from_array([false, true, false])
    );
}

const _: () = assert!(size_of::<Vec3S<bool>>() == size_of::<[bool; 3]>());

#[test]
fn test_vec3s_constructor() {
    assert_eq!(
        vec3s!(false, true, false),
        Vec3S::from_array([false, true, false])
    );
    assert_eq!(
        vec3s!(false, vec2s!(true, false)),
        Vec3S::from_array([false, true, false])
    );
    assert_eq!(
        vec3s!(vec3s!(false, true, false)),
        Vec3S::from_array([false, true, false])
    );
}

#[test]
fn test_vec3s_as_simd() {
    assert_eq!(
        vec3s!(false, true, false).as_simd(),
        vec3!(false, true, false)
    );
}

#[test]
fn test_vec3s_as_non_simd() {
    assert_eq!(
        vec3s!(false, true, false).as_non_simd(),
        vec3s!(false, true, false)
    );
}

#[test]
fn test_vec3s_from_array_as_array() {
    assert_eq!(
        Vec3S::from_array([false, true, false]).as_array(),
        [false, true, false]
    );
}

#[test]
fn test_vec3s_splat() {
    assert_eq!(Vec3S::splat(false), vec3s!(false, false, false));
}

#[test]
fn test_vec3s_index() {
    assert_eq!(vec3s!(false, true, false).index(0), false);
    assert_eq!(vec3s!(false, true, false).index(1), true);
    assert_eq!(vec3s!(false, true, false).index(2), false);
}

#[test]
#[should_panic]
fn test_vec3s_index_panic() {
    vec3s!(false, true, false).index(3);
}

#[test]
fn test_vec3s_get() {
    assert_eq!(vec3s!(false, true, false).get(0), Some(false));
    assert_eq!(vec3s!(false, true, false).get(1), Some(true));
    assert_eq!(vec3s!(false, true, false).get(2), Some(false));

    assert_eq!(vec3s!(false, true, false).get(3), None);
}

#[test]
fn test_vec3s_get_unchecked() {
    unsafe {
        assert_eq!(vec3s!(false, true, false).get_unchecked(0), false);
        assert_eq!(vec3s!(false, true, false).get_unchecked(1), true);
        assert_eq!(vec3s!(false, true, false).get_unchecked(2), false);
    }
}

#[test]
fn test_vec3s_set() {
    {
        let mut vec = vec3s!(false, true, false);
        vec.set(0, true);

        assert_eq!(vec, vec3s!(true, true, false));
    }
    {
        let mut vec = vec3s!(false, true, false);
        vec.set(1, false);

        assert_eq!(vec, vec3s!(false, false, false));
    }
    {
        let mut vec = vec3s!(false, true, false);
        vec.set(2, true);

        assert_eq!(vec, vec3s!(false, true, true));
    }
}

#[test]
#[should_panic]
fn test_vec3s_set_panic() {
    let mut vec = vec3s!(false, true, false);
    vec.set(3, false);
}

#[test]
fn test_vec3s_try_set() {
    {
        let mut vec = vec3s!(false, true, false);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec3s!(true, true, false));
    }
    {
        let mut vec = vec3s!(false, true, false);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec3s!(false, false, false));
    }
    {
        let mut vec = vec3s!(false, true, false);
        vec.try_set(2, true).unwrap();

        assert_eq!(vec, vec3s!(false, true, true));
    }

    assert_eq!(
        vec3s!(false, true, false).try_set(3, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3s_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3s!(false, true, false);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec3s!(true, true, false));
        }
        {
            let mut vec = vec3s!(false, true, false);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec3s!(false, false, false));
        }
        {
            let mut vec = vec3s!(false, true, false);
            vec.set_unchecked(2, true);

            assert_eq!(vec, vec3s!(false, true, true));
        }
    }
}

#[test]
fn test_vec3s_swizzle() {
    assert_eq!(vec3s!(false, true, false).z(), false);
    assert_eq!(vec3s!(false, true, false).zx(), vec2s!(false, false));
    assert_eq!(vec3s!(false, true, false).zxy(), vec3s!(false, false, true));
    assert_eq!(
        vec3s!(false, true, false).zxyz(),
        vec4s!(false, false, true, false)
    );
}

#[test]
fn test_vec3s_with_swizzle() {
    assert_eq!(
        vec3s!(false, true, false).with_y(false),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(false, true, false).with_yx(vec2s!(false, true)),
        vec3s!(true, false, false)
    );
    assert_eq!(
        vec3s!(false, true, false).with_yxz(vec3s!(false, false, true)),
        vec3s!(false, false, true)
    );
}

#[test]
fn test_vec3s_swizzle_ref() {
    assert_eq!(vec3s!(false, true, false).y_ref(), &true);
    assert_eq!(vec3s!(false, true, false).yz_ref(), &vec2s!(true, false));
    assert_eq!(
        vec3s!(false, true, false).xyz_ref(),
        &vec3s!(false, true, false)
    );
}

#[test]
fn test_vec3s_swizzle_mut() {
    assert_eq!(vec3s!(false, true, false).y_mut(), &mut true);
    assert_eq!(
        vec3s!(false, true, false).yz_mut(),
        &mut vec2s!(true, false)
    );
    assert_eq!(
        vec3s!(false, true, false).xyz_mut(),
        &mut vec3s!(false, true, false)
    );

    assert_eq!(
        vec3s!(false, true, false).x_yz_mut(),
        (&mut false, &mut vec2s!(true, false))
    );
}

#[test]
fn test_vec3s_fold() {
    assert_eq!(
        vec3s!(false, true, false).fold(false, |acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec3s_reduce() {
    assert_eq!(vec3s!(false, true, false).reduce(|acc, x| acc | x), true);
}

#[test]
fn test_vec3s_eq_mask() {
    assert_eq!(
        vec3s!(false, true, false).eq_mask(vec3s!(false, true, false)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(false, true, false).eq_mask(vec3s!(false, false, false)),
        vec3s!(true, false, true),
    );
    assert_eq!(
        vec3s!(false, true, false).eq_mask(vec3s!(true, false, true)),
        vec3s!(false, false, false)
    );
}

#[test]
fn test_vec3s_ne_mask() {
    assert_eq!(
        vec3s!(false, true, false).ne_mask(vec3s!(false, true, false)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(false, true, false).ne_mask(vec3s!(false, false, false)),
        vec3s!(false, true, false),
    );
    assert_eq!(
        vec3s!(false, true, false).ne_mask(vec3s!(true, false, true)),
        vec3s!(true, true, true)
    );
}

#[test]
fn test_vec3s_lt_mask() {
    assert_eq!(
        vec3s!(false, true, false).lt_mask(vec3s!(false, true, false)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(false, true, false).lt_mask(vec3s!(true, false, false)),
        vec3s!(true, false, false),
    );
}

#[test]
fn test_vec3s_gt_mask() {
    assert_eq!(
        vec3s!(false, true, false).gt_mask(vec3s!(false, true, false)),
        vec3s!(false, false, false)
    );
    assert_eq!(
        vec3s!(false, true, false).gt_mask(vec3s!(true, false, false)),
        vec3s!(false, true, false),
    );
}

#[test]
fn test_vec3s_le_mask() {
    assert_eq!(
        vec3s!(false, true, false).le_mask(vec3s!(false, true, false)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(false, true, false).le_mask(vec3s!(true, false, false)),
        vec3s!(true, false, true),
    );
}

#[test]
fn test_vec3s_ge_mask() {
    assert_eq!(
        vec3s!(false, true, false).ge_mask(vec3s!(false, true, false)),
        vec3s!(true, true, true)
    );
    assert_eq!(
        vec3s!(false, true, false).ge_mask(vec3s!(true, false, false)),
        vec3s!(false, true, true),
    );
}

#[test]
fn test_vec3s_eq() {
    assert_eq!(
        vec3s!(false, true, false) == vec3s!(false, true, false),
        true
    );
    assert_eq!(
        vec3s!(false, true, false) == vec3s!(false, false, false),
        false
    );
    assert_eq!(
        vec3s!(false, true, false) == vec3s!(true, false, true),
        false
    );
}

#[test]
fn test_vec3s_ne() {
    assert_eq!(
        vec3s!(false, true, false) != vec3s!(false, true, false),
        false
    );
    assert_eq!(
        vec3s!(false, true, false) != vec3s!(false, false, false),
        true
    );
    assert_eq!(
        vec3s!(false, true, false) != vec3s!(true, false, true),
        true
    );
}

#[test]
fn test_vec3s_debug() {
    assert_eq!(
        format!("{:?}", vec3s!(false, true, false)),
        "(false, true, false)"
    );
}

#[test]
fn test_vec3s_display() {
    assert_eq!(
        format!("{}", vec3s!(false, true, false)),
        "(false, true, false)"
    );
}

#[test]
fn test_vec3s_const_from_array() {
    assert_eq!(
        Vec3S::<bool>::const_from_array([false, true, false]),
        Vec3S::from_array([false, true, false])
    );
}

#[test]
fn test_vec4_constructor() {
    assert_eq!(
        vec4!(false, true, false, true),
        Vec4::from_array([false, true, false, true])
    );
    assert_eq!(
        vec4!(false, vec2!(true, false), true),
        Vec4::from_array([false, true, false, true])
    );
    assert_eq!(
        vec4!(vec4!(false, true, false, true)),
        Vec4::from_array([false, true, false, true])
    );
}

#[test]
fn test_vec4_as_simd() {
    assert_eq!(
        vec4!(false, true, false, true).as_simd(),
        vec4!(false, true, false, true)
    );
}

#[test]
fn test_vec4_as_non_simd() {
    assert_eq!(
        vec4!(false, true, false, true).as_non_simd(),
        vec4s!(false, true, false, true)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([false, true, false, true]).as_array(),
        [false, true, false, true]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(false), vec4!(false, false, false, false));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(false, true, false, true).index(0), false);
    assert_eq!(vec4!(false, true, false, true).index(1), true);
    assert_eq!(vec4!(false, true, false, true).index(2), false);
    assert_eq!(vec4!(false, true, false, true).index(3), true);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(false, true, false, true).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(false, true, false, true).get(0), Some(false));
    assert_eq!(vec4!(false, true, false, true).get(1), Some(true));
    assert_eq!(vec4!(false, true, false, true).get(2), Some(false));
    assert_eq!(vec4!(false, true, false, true).get(3), Some(true));

    assert_eq!(vec4!(false, true, false, true).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(vec4!(false, true, false, true).get_unchecked(0), false);
        assert_eq!(vec4!(false, true, false, true).get_unchecked(1), true);
        assert_eq!(vec4!(false, true, false, true).get_unchecked(2), false);
        assert_eq!(vec4!(false, true, false, true).get_unchecked(3), true);
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(false, true, false, true);
        vec.set(0, true);

        assert_eq!(vec, vec4!(true, true, false, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.set(1, false);

        assert_eq!(vec, vec4!(false, false, false, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.set(2, true);

        assert_eq!(vec, vec4!(false, true, true, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.set(3, false);

        assert_eq!(vec, vec4!(false, true, false, false));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(false, true, false, true);
    vec.set(4, false);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(false, true, false, true);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec4!(true, true, false, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec4!(false, false, false, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.try_set(2, true).unwrap();

        assert_eq!(vec, vec4!(false, true, true, true));
    }
    {
        let mut vec = vec4!(false, true, false, true);
        vec.try_set(3, false).unwrap();

        assert_eq!(vec, vec4!(false, true, false, false));
    }

    assert_eq!(
        vec4!(false, true, false, true).try_set(4, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(false, true, false, true);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec4!(true, true, false, true));
        }
        {
            let mut vec = vec4!(false, true, false, true);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec4!(false, false, false, true));
        }
        {
            let mut vec = vec4!(false, true, false, true);
            vec.set_unchecked(2, true);

            assert_eq!(vec, vec4!(false, true, true, true));
        }
        {
            let mut vec = vec4!(false, true, false, true);
            vec.set_unchecked(3, false);

            assert_eq!(vec, vec4!(false, true, false, false));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(false, true, false, true).z(), false);
    assert_eq!(vec4!(false, true, false, true).zw(), vec2!(false, true));
    assert_eq!(
        vec4!(false, true, false, true).zwy(),
        vec3!(false, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).zwyz(),
        vec4!(false, true, true, false)
    );
}

#[test]
fn test_vec4_with_swizzle() {
    assert_eq!(
        vec4!(false, true, false, true).with_y(false),
        vec4!(false, false, false, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).with_yx(vec2!(false, true)),
        vec4!(true, false, false, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).with_yxz(vec3!(false, false, true)),
        vec4!(false, false, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).with_yxzw(vec4!(false, false, true, false)),
        vec4!(false, false, true, false)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(false, true, false, true).fold(false, |acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(false, true, false, true).reduce(|acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(false, true, false, true).eq_mask(vec4!(false, true, false, true)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).eq_mask(vec4!(false, false, false, true)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(false, true, false, true).eq_mask(vec4!(true, false, true, false)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(false, true, false, true).ne_mask(vec4!(false, true, false, true)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(false, true, false, true).ne_mask(vec4!(false, false, false, true)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(false, true, false, true).ne_mask(vec4!(true, false, true, false)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(false, true, false, true).lt_mask(vec4!(false, true, false, true)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(false, true, false, true).lt_mask(vec4!(true, false, false, true)),
        vec4!(true, false, false, false),
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(false, true, false, true).gt_mask(vec4!(false, true, false, true)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(false, true, false, true).gt_mask(vec4!(true, false, false, true)),
        vec4!(false, true, false, false),
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(false, true, false, true).le_mask(vec4!(false, true, false, true)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).le_mask(vec4!(true, false, false, true)),
        vec4!(true, false, true, true),
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(false, true, false, true).ge_mask(vec4!(false, true, false, true)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(false, true, false, true).ge_mask(vec4!(true, false, false, true)),
        vec4!(false, true, true, true),
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(false, true, false, true) == vec4!(false, true, false, true),
        true
    );
    assert_eq!(
        vec4!(false, true, false, true) == vec4!(false, false, false, true),
        false
    );
    assert_eq!(
        vec4!(false, true, false, true) == vec4!(true, false, true, false),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(false, true, false, true) != vec4!(false, true, false, true),
        false
    );
    assert_eq!(
        vec4!(false, true, false, true) != vec4!(false, false, false, true),
        true
    );
    assert_eq!(
        vec4!(false, true, false, true) != vec4!(true, false, true, false),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(false, true, false, true)),
        "(false, true, false, true)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(
        format!("{}", vec4!(false, true, false, true)),
        "(false, true, false, true)"
    );
}

#[test]
fn test_vec4_const_from_array() {
    assert_eq!(
        Vec4::<bool>::const_from_array([false, true, false, true]),
        Vec4::from_array([false, true, false, true])
    );
}

const _: () = assert!(size_of::<Vec4S<bool>>() == size_of::<[bool; 4]>());

#[test]
fn test_vec4s_constructor() {
    assert_eq!(
        vec4s!(false, true, false, true),
        Vec4S::from_array([false, true, false, true])
    );
    assert_eq!(
        vec4s!(false, vec2s!(true, false), true),
        Vec4S::from_array([false, true, false, true])
    );
    assert_eq!(
        vec4s!(vec4s!(false, true, false, true)),
        Vec4S::from_array([false, true, false, true])
    );
}

#[test]
fn test_vec4s_as_simd() {
    assert_eq!(
        vec4s!(false, true, false, true).as_simd(),
        vec4!(false, true, false, true)
    );
}

#[test]
fn test_vec4s_as_non_simd() {
    assert_eq!(
        vec4s!(false, true, false, true).as_non_simd(),
        vec4s!(false, true, false, true)
    );
}

#[test]
fn test_vec4s_from_array_as_array() {
    assert_eq!(
        Vec4S::from_array([false, true, false, true]).as_array(),
        [false, true, false, true]
    );
}

#[test]
fn test_vec4s_splat() {
    assert_eq!(Vec4S::splat(false), vec4s!(false, false, false, false));
}

#[test]
fn test_vec4s_index() {
    assert_eq!(vec4s!(false, true, false, true).index(0), false);
    assert_eq!(vec4s!(false, true, false, true).index(1), true);
    assert_eq!(vec4s!(false, true, false, true).index(2), false);
    assert_eq!(vec4s!(false, true, false, true).index(3), true);
}

#[test]
#[should_panic]
fn test_vec4s_index_panic() {
    vec4s!(false, true, false, true).index(4);
}

#[test]
fn test_vec4s_get() {
    assert_eq!(vec4s!(false, true, false, true).get(0), Some(false));
    assert_eq!(vec4s!(false, true, false, true).get(1), Some(true));
    assert_eq!(vec4s!(false, true, false, true).get(2), Some(false));
    assert_eq!(vec4s!(false, true, false, true).get(3), Some(true));

    assert_eq!(vec4s!(false, true, false, true).get(4), None);
}

#[test]
fn test_vec4s_get_unchecked() {
    unsafe {
        assert_eq!(vec4s!(false, true, false, true).get_unchecked(0), false);
        assert_eq!(vec4s!(false, true, false, true).get_unchecked(1), true);
        assert_eq!(vec4s!(false, true, false, true).get_unchecked(2), false);
        assert_eq!(vec4s!(false, true, false, true).get_unchecked(3), true);
    }
}

#[test]
fn test_vec4s_set() {
    {
        let mut vec = vec4s!(false, true, false, true);
        vec.set(0, true);

        assert_eq!(vec, vec4s!(true, true, false, true));
    }
    {
        let mut vec = vec4s!(false, true, false, true);
        vec.set(1, false);

        assert_eq!(vec, vec4s!(false, false, false, true));
    }
    {
        let mut vec = vec4s!(false, true, false, true);
        vec.set(2, true);

        assert_eq!(vec, vec4s!(false, true, true, true));
    }
    {
        let mut vec = vec4s!(false, true, false, true);
        vec.set(3, false);

        assert_eq!(vec, vec4s!(false, true, false, false));
    }
}

#[test]
#[should_panic]
fn test_vec4s_set_panic() {
    let mut vec = vec4s!(false, true, false, true);
    vec.set(4, false);
}

#[test]
fn test_vec4s_try_set() {
    {
        let mut vec = vec4s!(false, true, false, true);
        vec.try_set(0, true).unwrap();

        assert_eq!(vec, vec4s!(true, true, false, true));
    }
    {
        let mut vec = vec4s!(false, true, false, true);
        vec.try_set(1, false).unwrap();

        assert_eq!(vec, vec4s!(false, false, false, true));
    }
    {
        let mut vec = vec4s!(false, true, false, true);
        vec.try_set(2, true).unwrap();

        assert_eq!(vec, vec4s!(false, true, true, true));
    }
    {
        let mut vec = vec4s!(false, true, false, true);
        vec.try_set(3, false).unwrap();

        assert_eq!(vec, vec4s!(false, true, false, false));
    }

    assert_eq!(
        vec4s!(false, true, false, true).try_set(4, false),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4s_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4s!(false, true, false, true);
            vec.set_unchecked(0, true);

            assert_eq!(vec, vec4s!(true, true, false, true));
        }
        {
            let mut vec = vec4s!(false, true, false, true);
            vec.set_unchecked(1, false);

            assert_eq!(vec, vec4s!(false, false, false, true));
        }
        {
            let mut vec = vec4s!(false, true, false, true);
            vec.set_unchecked(2, true);

            assert_eq!(vec, vec4s!(false, true, true, true));
        }
        {
            let mut vec = vec4s!(false, true, false, true);
            vec.set_unchecked(3, false);

            assert_eq!(vec, vec4s!(false, true, false, false));
        }
    }
}

#[test]
fn test_vec4s_swizzle() {
    assert_eq!(vec4s!(false, true, false, true).z(), false);
    assert_eq!(vec4s!(false, true, false, true).zw(), vec2s!(false, true));
    assert_eq!(
        vec4s!(false, true, false, true).zwy(),
        vec3s!(false, true, true)
    );
    assert_eq!(
        vec4s!(false, true, false, true).zwyz(),
        vec4s!(false, true, true, false)
    );
}

#[test]
fn test_vec4s_with_swizzle() {
    assert_eq!(
        vec4s!(false, true, false, true).with_y(false),
        vec4s!(false, false, false, true)
    );
    assert_eq!(
        vec4s!(false, true, false, true).with_yx(vec2s!(false, true)),
        vec4s!(true, false, false, true)
    );
    assert_eq!(
        vec4s!(false, true, false, true).with_yxz(vec3s!(false, false, true)),
        vec4s!(false, false, true, true)
    );
    assert_eq!(
        vec4s!(false, true, false, true).with_yxzw(vec4s!(false, false, true, false)),
        vec4s!(false, false, true, false)
    );
}

#[test]
fn test_vec4s_swizzle_set() {
    let mut vec = vec4s!(false, true, false, true);
    vec.set_yxz(vec3s!(false, false, true));

    assert_eq!(vec, vec4s!(false, false, true, true));
}

#[test]
fn test_vec4s_swizzle_ref() {
    assert_eq!(vec4s!(false, true, false, true).y_ref(), &true);
    assert_eq!(
        vec4s!(false, true, false, true).yz_ref(),
        &vec2s!(true, false)
    );
    assert_eq!(
        vec4s!(false, true, false, true).xyz_ref(),
        &vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(false, true, false, true).xyzw_ref(),
        &vec4s!(false, true, false, true)
    );
}

#[test]
fn test_vec4s_swizzle_mut() {
    assert_eq!(vec4s!(false, true, false, true).y_mut(), &mut true);
    assert_eq!(
        vec4s!(false, true, false, true).yz_mut(),
        &mut vec2s!(true, false)
    );
    assert_eq!(
        vec4s!(false, true, false, true).xyz_mut(),
        &mut vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(false, true, false, true).xyzw_mut(),
        &mut vec4s!(false, true, false, true)
    );

    assert_eq!(
        vec4s!(false, true, false, true).x_yz_mut(),
        (&mut false, &mut vec2s!(true, false))
    );
}

#[test]
fn test_vec4s_fold() {
    assert_eq!(
        vec4s!(false, true, false, true).fold(false, |acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec4s_reduce() {
    assert_eq!(
        vec4s!(false, true, false, true).reduce(|acc, x| acc | x),
        true
    );
}

#[test]
fn test_vec4s_eq_mask() {
    assert_eq!(
        vec4s!(false, true, false, true).eq_mask(vec4s!(false, true, false, true)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(false, true, false, true).eq_mask(vec4s!(false, false, false, true)),
        vec4s!(true, false, true, true),
    );
    assert_eq!(
        vec4s!(false, true, false, true).eq_mask(vec4s!(true, false, true, false)),
        vec4s!(false, false, false, false)
    );
}

#[test]
fn test_vec4s_ne_mask() {
    assert_eq!(
        vec4s!(false, true, false, true).ne_mask(vec4s!(false, true, false, true)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(false, true, false, true).ne_mask(vec4s!(false, false, false, true)),
        vec4s!(false, true, false, false),
    );
    assert_eq!(
        vec4s!(false, true, false, true).ne_mask(vec4s!(true, false, true, false)),
        vec4s!(true, true, true, true)
    );
}

#[test]
fn test_vec4s_lt_mask() {
    assert_eq!(
        vec4s!(false, true, false, true).lt_mask(vec4s!(false, true, false, true)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(false, true, false, true).lt_mask(vec4s!(true, false, false, true)),
        vec4s!(true, false, false, false),
    );
}

#[test]
fn test_vec4s_gt_mask() {
    assert_eq!(
        vec4s!(false, true, false, true).gt_mask(vec4s!(false, true, false, true)),
        vec4s!(false, false, false, false)
    );
    assert_eq!(
        vec4s!(false, true, false, true).gt_mask(vec4s!(true, false, false, true)),
        vec4s!(false, true, false, false),
    );
}

#[test]
fn test_vec4s_le_mask() {
    assert_eq!(
        vec4s!(false, true, false, true).le_mask(vec4s!(false, true, false, true)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(false, true, false, true).le_mask(vec4s!(true, false, false, true)),
        vec4s!(true, false, true, true),
    );
}

#[test]
fn test_vec4s_ge_mask() {
    assert_eq!(
        vec4s!(false, true, false, true).ge_mask(vec4s!(false, true, false, true)),
        vec4s!(true, true, true, true)
    );
    assert_eq!(
        vec4s!(false, true, false, true).ge_mask(vec4s!(true, false, false, true)),
        vec4s!(false, true, true, true),
    );
}

#[test]
fn test_vec4s_eq() {
    assert_eq!(
        vec4s!(false, true, false, true) == vec4s!(false, true, false, true),
        true
    );
    assert_eq!(
        vec4s!(false, true, false, true) == vec4s!(false, false, false, true),
        false
    );
    assert_eq!(
        vec4s!(false, true, false, true) == vec4s!(true, false, true, false),
        false
    );
}

#[test]
fn test_vec4s_ne() {
    assert_eq!(
        vec4s!(false, true, false, true) != vec4s!(false, true, false, true),
        false
    );
    assert_eq!(
        vec4s!(false, true, false, true) != vec4s!(false, false, false, true),
        true
    );
    assert_eq!(
        vec4s!(false, true, false, true) != vec4s!(true, false, true, false),
        true
    );
}

#[test]
fn test_vec4s_debug() {
    assert_eq!(
        format!("{:?}", vec4s!(false, true, false, true)),
        "(false, true, false, true)"
    );
}

#[test]
fn test_vec4s_display() {
    assert_eq!(
        format!("{}", vec4s!(false, true, false, true)),
        "(false, true, false, true)"
    );
}

#[test]
fn test_vec4s_const_from_array() {
    assert_eq!(
        Vec4S::<bool>::const_from_array([false, true, false, true]),
        Vec4S::from_array([false, true, false, true])
    );
}
