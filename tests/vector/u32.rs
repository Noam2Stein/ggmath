// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<u32>>() == size_of::<[u32; 2]>());

#[test]
fn test_vec2_constructor() {
    assert_eq!(vec2!(0u32, 1u32), Vec2::from_array([0u32, 1u32]));
    assert_eq!(vec2!(vec2!(0u32, 1u32)), Vec2::from_array([0u32, 1u32]));
}

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(0u32, 1u32).align(), vec2!(0u32, 1u32));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(0u32, 1u32).pack(), vec2p!(0u32, 1u32));
}

#[test]
fn test_vec2_from_array_as_array() {
    assert_eq!(Vec2::from_array([0u32, 1u32]).as_array(), [0u32, 1u32]);
}

#[test]
fn test_vec2_splat() {
    assert_eq!(Vec2::splat(0u32), vec2!(0u32, 0u32));
}

#[test]
fn test_vec2_index() {
    assert_eq!(vec2!(0u32, 1u32).index(0), 0u32);
    assert_eq!(vec2!(0u32, 1u32).index(1), 1u32);
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(0u32, 1u32).index(2);
}

#[test]
fn test_vec2_get() {
    assert_eq!(vec2!(0u32, 1u32).get(0), Some(0u32));
    assert_eq!(vec2!(0u32, 1u32).get(1), Some(1u32));

    assert_eq!(vec2!(0u32, 1u32).get(2), None);
}

#[test]
fn test_vec2_get_unchecked() {
    unsafe {
        assert_eq!(vec2!(0u32, 1u32).get_unchecked(0), 0u32);
        assert_eq!(vec2!(0u32, 1u32).get_unchecked(1), 1u32);
    }
}

#[test]
fn test_vec2_set() {
    {
        let mut vec = vec2!(0u32, 1u32);
        vec.set(0, 50u32);

        assert_eq!(vec, vec2!(50u32, 1u32));
    }
    {
        let mut vec = vec2!(0u32, 1u32);
        vec.set(1, 50u32);

        assert_eq!(vec, vec2!(0u32, 50u32));
    }
}

#[test]
#[should_panic]
fn test_vec2_set_panic() {
    let mut vec = vec2!(0u32, 1u32);
    vec.set(2, 0u32);
}

#[test]
fn test_vec2_try_set() {
    {
        let mut vec = vec2!(0u32, 1u32);
        vec.try_set(0, 50u32).unwrap();

        assert_eq!(vec, vec2!(50u32, 1u32));
    }
    {
        let mut vec = vec2!(0u32, 1u32);
        vec.try_set(1, 50u32).unwrap();

        assert_eq!(vec, vec2!(0u32, 50u32));
    }

    assert_eq!(
        vec2!(0u32, 1u32).try_set(2, 0u32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2!(0u32, 1u32);
            vec.set_unchecked(0, 50u32);

            assert_eq!(vec, vec2!(50u32, 1u32));
        }
        {
            let mut vec = vec2!(0u32, 1u32);
            vec.set_unchecked(1, 50u32);

            assert_eq!(vec, vec2!(0u32, 50u32));
        }
    }
}

#[test]
fn test_vec2_swizzle() {
    assert_eq!(vec2!(0u32, 1u32).y(), 1u32);
    assert_eq!(vec2!(0u32, 1u32).yx(), vec2!(1u32, 0u32));
    assert_eq!(vec2!(0u32, 1u32).yxy(), vec3!(1u32, 0u32, 1u32));
    assert_eq!(vec2!(0u32, 1u32).yxyy(), vec4!(1u32, 0u32, 1u32, 1u32));
}

#[test]
fn test_vec2_with_swizzle() {
    assert_eq!(vec2!(0u32, 1u32).with_y(0u32), vec2!(0u32, 0u32));
    assert_eq!(
        vec2!(0u32, 1u32).with_yx(vec2!(0u32, 1u32)),
        vec2!(1u32, 0u32)
    );
}

#[test]
fn test_vec2_fold() {
    assert_eq!(
        vec2!(0u32, 1u32).fold(13, |acc, x| acc + x),
        13 + 0u32 + 1u32
    );
}

#[test]
fn test_vec2_reduce() {
    assert_eq!(vec2!(0u32, 1u32).reduce(|acc, x| acc + x), 0u32 + 1u32);
}

#[test]
fn test_vec2_eq_mask() {
    assert_eq!(
        vec2!(0u32, 1u32).eq_mask(vec2!(0u32, 1u32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0u32, 1u32).eq_mask(vec2!(0u32, 0u32)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0u32, 1u32).eq_mask(vec2!(2u32, 3u32)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ne_mask() {
    assert_eq!(
        vec2!(0u32, 1u32).ne_mask(vec2!(0u32, 1u32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0u32, 1u32).ne_mask(vec2!(0u32, 0u32)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0u32, 1u32).ne_mask(vec2!(2u32, 3u32)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_lt_mask() {
    assert_eq!(
        vec2!(0u32, 1u32).lt_mask(vec2!(0u32, 1u32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0u32, 1u32).lt_mask(vec2!(1u32, 0u32)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0u32, 1u32).lt_mask(vec2!(2u32, 3u32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2u32, 3u32).lt_mask(vec2!(0u32, 1u32)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_gt_mask() {
    assert_eq!(
        vec2!(0u32, 1u32).gt_mask(vec2!(0u32, 1u32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(0u32, 1u32).gt_mask(vec2!(1u32, 0u32)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0u32, 1u32).gt_mask(vec2!(2u32, 3u32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2u32, 3u32).gt_mask(vec2!(0u32, 1u32)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_le_mask() {
    assert_eq!(
        vec2!(0u32, 1u32).le_mask(vec2!(0u32, 1u32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0u32, 1u32).le_mask(vec2!(1u32, 0u32)),
        vec2!(true, false),
    );
    assert_eq!(
        vec2!(0u32, 1u32).le_mask(vec2!(2u32, 3u32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(2u32, 3u32).le_mask(vec2!(0u32, 1u32)),
        vec2!(false, false)
    );
}

#[test]
fn test_vec2_ge_mask() {
    assert_eq!(
        vec2!(0u32, 1u32).ge_mask(vec2!(0u32, 1u32)),
        vec2!(true, true)
    );
    assert_eq!(
        vec2!(0u32, 1u32).ge_mask(vec2!(1u32, 0u32)),
        vec2!(false, true),
    );
    assert_eq!(
        vec2!(0u32, 1u32).ge_mask(vec2!(2u32, 3u32)),
        vec2!(false, false)
    );
    assert_eq!(
        vec2!(2u32, 3u32).ge_mask(vec2!(0u32, 1u32)),
        vec2!(true, true)
    );
}

#[test]
fn test_vec2_eq() {
    assert_eq!(vec2!(0u32, 1u32) == vec2!(0u32, 1u32), true);
    assert_eq!(vec2!(0u32, 1u32) == vec2!(0u32, 0u32), false);
    assert_eq!(vec2!(0u32, 1u32) == vec2!(2u32, 3u32), false);
}

#[test]
fn test_vec2_ne() {
    assert_eq!(vec2!(0u32, 1u32) != vec2!(0u32, 1u32), false);
    assert_eq!(vec2!(0u32, 1u32) != vec2!(0u32, 0u32), true);
    assert_eq!(vec2!(0u32, 1u32) != vec2!(2u32, 3u32), true);
}

#[test]
fn test_vec2_debug() {
    assert_eq!(format!("{:?}", vec2!(0u32, 1u32)), "(0, 1)");
}

#[test]
fn test_vec2_display() {
    assert_eq!(format!("{}", vec2!(0u32, 1u32)), "(0, 1)");
}

#[test]
fn test_vec2_const_from_array() {
    assert_eq!(
        Vec2::<u32>::const_from_array([0u32, 1u32]),
        Vec2::from_array([0u32, 1u32])
    );
}

#[test]
fn test_vec2p_constructor() {
    assert_eq!(vec2p!(0u32, 1u32), Vec2P::from_array([0u32, 1u32]));
    assert_eq!(vec2p!(vec2p!(0u32, 1u32)), Vec2P::from_array([0u32, 1u32]));
}

#[test]
fn test_vec2p_align() {
    assert_eq!(vec2p!(0u32, 1u32).align(), vec2!(0u32, 1u32));
}

#[test]
fn test_vec2p_pack() {
    assert_eq!(vec2p!(0u32, 1u32).pack(), vec2p!(0u32, 1u32));
}

#[test]
fn test_vec2p_from_array_as_array() {
    assert_eq!(Vec2P::from_array([0u32, 1u32]).as_array(), [0u32, 1u32]);
}

#[test]
fn test_vec2p_splat() {
    assert_eq!(Vec2P::splat(0u32), vec2p!(0u32, 0u32));
}

#[test]
fn test_vec2p_index() {
    assert_eq!(vec2p!(0u32, 1u32).index(0), 0u32);
    assert_eq!(vec2p!(0u32, 1u32).index(1), 1u32);
}

#[test]
#[should_panic]
fn test_vec2p_index_panic() {
    vec2p!(0u32, 1u32).index(2);
}

#[test]
fn test_vec2p_get() {
    assert_eq!(vec2p!(0u32, 1u32).get(0), Some(0u32));
    assert_eq!(vec2p!(0u32, 1u32).get(1), Some(1u32));

    assert_eq!(vec2p!(0u32, 1u32).get(2), None);
}

#[test]
fn test_vec2p_get_unchecked() {
    unsafe {
        assert_eq!(vec2p!(0u32, 1u32).get_unchecked(0), 0u32);
        assert_eq!(vec2p!(0u32, 1u32).get_unchecked(1), 1u32);
    }
}

#[test]
fn test_vec2p_set() {
    {
        let mut vec = vec2p!(0u32, 1u32);
        vec.set(0, 50u32);

        assert_eq!(vec, vec2p!(50u32, 1u32));
    }
    {
        let mut vec = vec2p!(0u32, 1u32);
        vec.set(1, 50u32);

        assert_eq!(vec, vec2p!(0u32, 50u32));
    }
}

#[test]
#[should_panic]
fn test_vec2p_set_panic() {
    let mut vec = vec2p!(0u32, 1u32);
    vec.set(2, 0u32);
}

#[test]
fn test_vec2p_try_set() {
    {
        let mut vec = vec2p!(0u32, 1u32);
        vec.try_set(0, 50u32).unwrap();

        assert_eq!(vec, vec2p!(50u32, 1u32));
    }
    {
        let mut vec = vec2p!(0u32, 1u32);
        vec.try_set(1, 50u32).unwrap();

        assert_eq!(vec, vec2p!(0u32, 50u32));
    }

    assert_eq!(
        vec2p!(0u32, 1u32).try_set(2, 0u32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec2p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec2p!(0u32, 1u32);
            vec.set_unchecked(0, 50u32);

            assert_eq!(vec, vec2p!(50u32, 1u32));
        }
        {
            let mut vec = vec2p!(0u32, 1u32);
            vec.set_unchecked(1, 50u32);

            assert_eq!(vec, vec2p!(0u32, 50u32));
        }
    }
}

#[test]
fn test_vec2p_swizzle() {
    assert_eq!(vec2p!(0u32, 1u32).y(), 1u32);
    assert_eq!(vec2p!(0u32, 1u32).yx(), vec2p!(1u32, 0u32));
    assert_eq!(vec2p!(0u32, 1u32).yxy(), vec3p!(1u32, 0u32, 1u32));
    assert_eq!(vec2p!(0u32, 1u32).yxyy(), vec4p!(1u32, 0u32, 1u32, 1u32));
}

#[test]
fn test_vec2p_with_swizzle() {
    assert_eq!(vec2p!(0u32, 1u32).with_y(0u32), vec2p!(0u32, 0u32));
    assert_eq!(
        vec2p!(0u32, 1u32).with_yx(vec2p!(0u32, 1u32)),
        vec2p!(1u32, 0u32)
    );
}

#[test]
fn test_vec2p_swizzle_ref() {
    assert_eq!(vec2p!(0u32, 1u32).y_ref(), &1u32);
    assert_eq!(vec2p!(0u32, 1u32).xy_ref(), &vec2p!(0u32, 1u32));
}

#[test]
fn test_vec2p_swizzle_mut() {
    assert_eq!(vec2p!(0u32, 1u32).y_mut(), &mut 1u32);
    assert_eq!(vec2p!(0u32, 1u32).xy_mut(), &mut vec2p!(0u32, 1u32));

    assert_eq!(vec2p!(0u32, 1u32).x_y_mut(), (&mut 0u32, &mut 1u32));
}

#[test]
fn test_vec2p_fold() {
    assert_eq!(
        vec2p!(0u32, 1u32).fold(13, |acc, x| acc + x),
        13 + 0u32 + 1u32
    );
}

#[test]
fn test_vec2p_reduce() {
    assert_eq!(vec2p!(0u32, 1u32).reduce(|acc, x| acc + x), 0u32 + 1u32);
}

#[test]
fn test_vec2p_eq_mask() {
    assert_eq!(
        vec2p!(0u32, 1u32).eq_mask(vec2p!(0u32, 1u32)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(0u32, 1u32).eq_mask(vec2p!(0u32, 0u32)),
        vec2p!(true, false),
    );
    assert_eq!(
        vec2p!(0u32, 1u32).eq_mask(vec2p!(2u32, 3u32)),
        vec2p!(false, false)
    );
}

#[test]
fn test_vec2p_ne_mask() {
    assert_eq!(
        vec2p!(0u32, 1u32).ne_mask(vec2p!(0u32, 1u32)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(0u32, 1u32).ne_mask(vec2p!(0u32, 0u32)),
        vec2p!(false, true),
    );
    assert_eq!(
        vec2p!(0u32, 1u32).ne_mask(vec2p!(2u32, 3u32)),
        vec2p!(true, true)
    );
}

#[test]
fn test_vec2p_lt_mask() {
    assert_eq!(
        vec2p!(0u32, 1u32).lt_mask(vec2p!(0u32, 1u32)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(0u32, 1u32).lt_mask(vec2p!(1u32, 0u32)),
        vec2p!(true, false),
    );
    assert_eq!(
        vec2p!(0u32, 1u32).lt_mask(vec2p!(2u32, 3u32)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(2u32, 3u32).lt_mask(vec2p!(0u32, 1u32)),
        vec2p!(false, false)
    );
}

#[test]
fn test_vec2p_gt_mask() {
    assert_eq!(
        vec2p!(0u32, 1u32).gt_mask(vec2p!(0u32, 1u32)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(0u32, 1u32).gt_mask(vec2p!(1u32, 0u32)),
        vec2p!(false, true),
    );
    assert_eq!(
        vec2p!(0u32, 1u32).gt_mask(vec2p!(2u32, 3u32)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(2u32, 3u32).gt_mask(vec2p!(0u32, 1u32)),
        vec2p!(true, true)
    );
}

#[test]
fn test_vec2p_le_mask() {
    assert_eq!(
        vec2p!(0u32, 1u32).le_mask(vec2p!(0u32, 1u32)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(0u32, 1u32).le_mask(vec2p!(1u32, 0u32)),
        vec2p!(true, false),
    );
    assert_eq!(
        vec2p!(0u32, 1u32).le_mask(vec2p!(2u32, 3u32)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(2u32, 3u32).le_mask(vec2p!(0u32, 1u32)),
        vec2p!(false, false)
    );
}

#[test]
fn test_vec2p_ge_mask() {
    assert_eq!(
        vec2p!(0u32, 1u32).ge_mask(vec2p!(0u32, 1u32)),
        vec2p!(true, true)
    );
    assert_eq!(
        vec2p!(0u32, 1u32).ge_mask(vec2p!(1u32, 0u32)),
        vec2p!(false, true),
    );
    assert_eq!(
        vec2p!(0u32, 1u32).ge_mask(vec2p!(2u32, 3u32)),
        vec2p!(false, false)
    );
    assert_eq!(
        vec2p!(2u32, 3u32).ge_mask(vec2p!(0u32, 1u32)),
        vec2p!(true, true)
    );
}

#[test]
fn test_vec2p_eq() {
    assert_eq!(vec2p!(0u32, 1u32) == vec2p!(0u32, 1u32), true);
    assert_eq!(vec2p!(0u32, 1u32) == vec2p!(0u32, 0u32), false);
    assert_eq!(vec2p!(0u32, 1u32) == vec2p!(2u32, 3u32), false);
}

#[test]
fn test_vec2p_ne() {
    assert_eq!(vec2p!(0u32, 1u32) != vec2p!(0u32, 1u32), false);
    assert_eq!(vec2p!(0u32, 1u32) != vec2p!(0u32, 0u32), true);
    assert_eq!(vec2p!(0u32, 1u32) != vec2p!(2u32, 3u32), true);
}

#[test]
fn test_vec2p_debug() {
    assert_eq!(format!("{:?}", vec2p!(0u32, 1u32)), "(0, 1)");
}

#[test]
fn test_vec2p_display() {
    assert_eq!(format!("{}", vec2p!(0u32, 1u32)), "(0, 1)");
}

#[test]
fn test_vec2p_const_from_array() {
    assert_eq!(
        Vec2P::<u32>::const_from_array([0u32, 1u32]),
        Vec2P::from_array([0u32, 1u32])
    );
}

const _: () = assert!(size_of::<Vec3P<u32>>() == size_of::<[u32; 3]>());

#[test]
fn test_vec3_constructor() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32),
        Vec3::from_array([0u32, 1u32, 2u32])
    );
    assert_eq!(
        vec3!(0u32, vec2!(1u32, 2u32)),
        Vec3::from_array([0u32, 1u32, 2u32])
    );
    assert_eq!(
        vec3!(vec3!(0u32, 1u32, 2u32)),
        Vec3::from_array([0u32, 1u32, 2u32])
    );
}

#[test]
fn test_vec3_align() {
    assert_eq!(vec3!(0u32, 1u32, 2u32).align(), vec3!(0u32, 1u32, 2u32));
}

#[test]
fn test_vec3_pack() {
    assert_eq!(vec3!(0u32, 1u32, 2u32).pack(), vec3p!(0u32, 1u32, 2u32));
}

#[test]
fn test_vec3_from_array_as_array() {
    assert_eq!(
        Vec3::from_array([0u32, 1u32, 2u32]).as_array(),
        [0u32, 1u32, 2u32]
    );
}

#[test]
fn test_vec3_splat() {
    assert_eq!(Vec3::splat(0u32), vec3!(0u32, 0u32, 0u32));
}

#[test]
fn test_vec3_index() {
    assert_eq!(vec3!(0u32, 1u32, 2u32).index(0), 0u32);
    assert_eq!(vec3!(0u32, 1u32, 2u32).index(1), 1u32);
    assert_eq!(vec3!(0u32, 1u32, 2u32).index(2), 2u32);
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(0u32, 1u32, 2u32).index(3);
}

#[test]
fn test_vec3_get() {
    assert_eq!(vec3!(0u32, 1u32, 2u32).get(0), Some(0u32));
    assert_eq!(vec3!(0u32, 1u32, 2u32).get(1), Some(1u32));
    assert_eq!(vec3!(0u32, 1u32, 2u32).get(2), Some(2u32));

    assert_eq!(vec3!(0u32, 1u32, 2u32).get(3), None);
}

#[test]
fn test_vec3_get_unchecked() {
    unsafe {
        assert_eq!(vec3!(0u32, 1u32, 2u32).get_unchecked(0), 0u32);
        assert_eq!(vec3!(0u32, 1u32, 2u32).get_unchecked(1), 1u32);
        assert_eq!(vec3!(0u32, 1u32, 2u32).get_unchecked(2), 2u32);
    }
}

#[test]
fn test_vec3_set() {
    {
        let mut vec = vec3!(0u32, 1u32, 2u32);
        vec.set(0, 50u32);

        assert_eq!(vec, vec3!(50u32, 1u32, 2u32));
    }
    {
        let mut vec = vec3!(0u32, 1u32, 2u32);
        vec.set(1, 50u32);

        assert_eq!(vec, vec3!(0u32, 50u32, 2u32));
    }
    {
        let mut vec = vec3!(0u32, 1u32, 2u32);
        vec.set(2, 50u32);

        assert_eq!(vec, vec3!(0u32, 1u32, 50u32));
    }
}

#[test]
#[should_panic]
fn test_vec3_set_panic() {
    let mut vec = vec3!(0u32, 1u32, 2u32);
    vec.set(3, 0u32);
}

#[test]
fn test_vec3_try_set() {
    {
        let mut vec = vec3!(0u32, 1u32, 2u32);
        vec.try_set(0, 50u32).unwrap();

        assert_eq!(vec, vec3!(50u32, 1u32, 2u32));
    }
    {
        let mut vec = vec3!(0u32, 1u32, 2u32);
        vec.try_set(1, 50u32).unwrap();

        assert_eq!(vec, vec3!(0u32, 50u32, 2u32));
    }
    {
        let mut vec = vec3!(0u32, 1u32, 2u32);
        vec.try_set(2, 50u32).unwrap();

        assert_eq!(vec, vec3!(0u32, 1u32, 50u32));
    }

    assert_eq!(
        vec3!(0u32, 1u32, 2u32).try_set(3, 0u32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3!(0u32, 1u32, 2u32);
            vec.set_unchecked(0, 50u32);

            assert_eq!(vec, vec3!(50u32, 1u32, 2u32));
        }
        {
            let mut vec = vec3!(0u32, 1u32, 2u32);
            vec.set_unchecked(1, 50u32);

            assert_eq!(vec, vec3!(0u32, 50u32, 2u32));
        }
        {
            let mut vec = vec3!(0u32, 1u32, 2u32);
            vec.set_unchecked(2, 50u32);

            assert_eq!(vec, vec3!(0u32, 1u32, 50u32));
        }
    }
}

#[test]
fn test_vec3_swizzle() {
    assert_eq!(vec3!(0u32, 1u32, 2u32).z(), 2u32);
    assert_eq!(vec3!(0u32, 1u32, 2u32).zx(), vec2!(2u32, 0u32));
    assert_eq!(vec3!(0u32, 1u32, 2u32).zxy(), vec3!(2u32, 0u32, 1u32));
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).zxyz(),
        vec4!(2u32, 0u32, 1u32, 2u32)
    );
}

#[test]
fn test_vec3_with_swizzle() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).with_y(0u32),
        vec3!(0u32, 0u32, 2u32)
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).with_yx(vec2!(0u32, 1u32)),
        vec3!(1u32, 0u32, 2u32)
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).with_yxz(vec3!(0u32, 2u32, 1u32)),
        vec3!(2u32, 0u32, 1u32)
    );
}

#[test]
fn test_vec3_fold() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).fold(13, |acc, x| acc + x),
        13 + 0u32 + 1u32 + 2u32
    );
}

#[test]
fn test_vec3_reduce() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).reduce(|acc, x| acc + x),
        0u32 + 1u32 + 2u32
    );
}

#[test]
fn test_vec3_eq_mask() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).eq_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).eq_mask(vec3!(0u32, 0u32, 2u32)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).eq_mask(vec3!(3u32, 4u32, 5u32)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ne_mask() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).ne_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).ne_mask(vec3!(0u32, 0u32, 2u32)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).ne_mask(vec3!(3u32, 4u32, 5u32)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_lt_mask() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).lt_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).lt_mask(vec3!(1u32, 0u32, 2u32)),
        vec3!(true, false, false),
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).lt_mask(vec3!(3u32, 4u32, 5u32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3u32, 4u32, 5u32).lt_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_gt_mask() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).gt_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).gt_mask(vec3!(1u32, 0u32, 2u32)),
        vec3!(false, true, false),
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).gt_mask(vec3!(3u32, 4u32, 5u32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3u32, 4u32, 5u32).gt_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_le_mask() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).le_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).le_mask(vec3!(1u32, 0u32, 2u32)),
        vec3!(true, false, true),
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).le_mask(vec3!(3u32, 4u32, 5u32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(3u32, 4u32, 5u32).le_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(false, false, false)
    );
}

#[test]
fn test_vec3_ge_mask() {
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).ge_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(true, true, true)
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).ge_mask(vec3!(1u32, 0u32, 2u32)),
        vec3!(false, true, true),
    );
    assert_eq!(
        vec3!(0u32, 1u32, 2u32).ge_mask(vec3!(3u32, 4u32, 5u32)),
        vec3!(false, false, false)
    );
    assert_eq!(
        vec3!(3u32, 4u32, 5u32).ge_mask(vec3!(0u32, 1u32, 2u32)),
        vec3!(true, true, true)
    );
}

#[test]
fn test_vec3_eq() {
    assert_eq!(vec3!(0u32, 1u32, 2u32) == vec3!(0u32, 1u32, 2u32), true);
    assert_eq!(vec3!(0u32, 1u32, 2u32) == vec3!(0u32, 0u32, 2u32), false);
    assert_eq!(vec3!(0u32, 1u32, 2u32) == vec3!(3u32, 4u32, 5u32), false);
}

#[test]
fn test_vec3_ne() {
    assert_eq!(vec3!(0u32, 1u32, 2u32) != vec3!(0u32, 1u32, 2u32), false);
    assert_eq!(vec3!(0u32, 1u32, 2u32) != vec3!(0u32, 0u32, 2u32), true);
    assert_eq!(vec3!(0u32, 1u32, 2u32) != vec3!(3u32, 4u32, 5u32), true);
}

#[test]
fn test_vec3_debug() {
    assert_eq!(format!("{:?}", vec3!(0u32, 1u32, 2u32)), "(0, 1, 2)");
}

#[test]
fn test_vec3_display() {
    assert_eq!(format!("{}", vec3!(0u32, 1u32, 2u32)), "(0, 1, 2)");
}

#[test]
fn test_vec3_const_from_array() {
    assert_eq!(
        Vec3::<u32>::const_from_array([0u32, 1u32, 2u32]),
        Vec3::from_array([0u32, 1u32, 2u32])
    );
}

#[test]
fn test_vec3p_constructor() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32),
        Vec3P::from_array([0u32, 1u32, 2u32])
    );
    assert_eq!(
        vec3p!(0u32, vec2p!(1u32, 2u32)),
        Vec3P::from_array([0u32, 1u32, 2u32])
    );
    assert_eq!(
        vec3p!(vec3p!(0u32, 1u32, 2u32)),
        Vec3P::from_array([0u32, 1u32, 2u32])
    );
}

#[test]
fn test_vec3p_align() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32).align(), vec3!(0u32, 1u32, 2u32));
}

#[test]
fn test_vec3p_pack() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32).pack(), vec3p!(0u32, 1u32, 2u32));
}

#[test]
fn test_vec3p_from_array_as_array() {
    assert_eq!(
        Vec3P::from_array([0u32, 1u32, 2u32]).as_array(),
        [0u32, 1u32, 2u32]
    );
}

#[test]
fn test_vec3p_splat() {
    assert_eq!(Vec3P::splat(0u32), vec3p!(0u32, 0u32, 0u32));
}

#[test]
fn test_vec3p_index() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32).index(0), 0u32);
    assert_eq!(vec3p!(0u32, 1u32, 2u32).index(1), 1u32);
    assert_eq!(vec3p!(0u32, 1u32, 2u32).index(2), 2u32);
}

#[test]
#[should_panic]
fn test_vec3p_index_panic() {
    vec3p!(0u32, 1u32, 2u32).index(3);
}

#[test]
fn test_vec3p_get() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32).get(0), Some(0u32));
    assert_eq!(vec3p!(0u32, 1u32, 2u32).get(1), Some(1u32));
    assert_eq!(vec3p!(0u32, 1u32, 2u32).get(2), Some(2u32));

    assert_eq!(vec3p!(0u32, 1u32, 2u32).get(3), None);
}

#[test]
fn test_vec3p_get_unchecked() {
    unsafe {
        assert_eq!(vec3p!(0u32, 1u32, 2u32).get_unchecked(0), 0u32);
        assert_eq!(vec3p!(0u32, 1u32, 2u32).get_unchecked(1), 1u32);
        assert_eq!(vec3p!(0u32, 1u32, 2u32).get_unchecked(2), 2u32);
    }
}

#[test]
fn test_vec3p_set() {
    {
        let mut vec = vec3p!(0u32, 1u32, 2u32);
        vec.set(0, 50u32);

        assert_eq!(vec, vec3p!(50u32, 1u32, 2u32));
    }
    {
        let mut vec = vec3p!(0u32, 1u32, 2u32);
        vec.set(1, 50u32);

        assert_eq!(vec, vec3p!(0u32, 50u32, 2u32));
    }
    {
        let mut vec = vec3p!(0u32, 1u32, 2u32);
        vec.set(2, 50u32);

        assert_eq!(vec, vec3p!(0u32, 1u32, 50u32));
    }
}

#[test]
#[should_panic]
fn test_vec3p_set_panic() {
    let mut vec = vec3p!(0u32, 1u32, 2u32);
    vec.set(3, 0u32);
}

#[test]
fn test_vec3p_try_set() {
    {
        let mut vec = vec3p!(0u32, 1u32, 2u32);
        vec.try_set(0, 50u32).unwrap();

        assert_eq!(vec, vec3p!(50u32, 1u32, 2u32));
    }
    {
        let mut vec = vec3p!(0u32, 1u32, 2u32);
        vec.try_set(1, 50u32).unwrap();

        assert_eq!(vec, vec3p!(0u32, 50u32, 2u32));
    }
    {
        let mut vec = vec3p!(0u32, 1u32, 2u32);
        vec.try_set(2, 50u32).unwrap();

        assert_eq!(vec, vec3p!(0u32, 1u32, 50u32));
    }

    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).try_set(3, 0u32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec3p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec3p!(0u32, 1u32, 2u32);
            vec.set_unchecked(0, 50u32);

            assert_eq!(vec, vec3p!(50u32, 1u32, 2u32));
        }
        {
            let mut vec = vec3p!(0u32, 1u32, 2u32);
            vec.set_unchecked(1, 50u32);

            assert_eq!(vec, vec3p!(0u32, 50u32, 2u32));
        }
        {
            let mut vec = vec3p!(0u32, 1u32, 2u32);
            vec.set_unchecked(2, 50u32);

            assert_eq!(vec, vec3p!(0u32, 1u32, 50u32));
        }
    }
}

#[test]
fn test_vec3p_swizzle() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32).z(), 2u32);
    assert_eq!(vec3p!(0u32, 1u32, 2u32).zx(), vec2p!(2u32, 0u32));
    assert_eq!(vec3p!(0u32, 1u32, 2u32).zxy(), vec3p!(2u32, 0u32, 1u32));
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).zxyz(),
        vec4p!(2u32, 0u32, 1u32, 2u32)
    );
}

#[test]
fn test_vec3p_with_swizzle() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).with_y(0u32),
        vec3p!(0u32, 0u32, 2u32)
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).with_yx(vec2p!(0u32, 1u32)),
        vec3p!(1u32, 0u32, 2u32)
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).with_yxz(vec3p!(0u32, 2u32, 1u32)),
        vec3p!(2u32, 0u32, 1u32)
    );
}

#[test]
fn test_vec3p_swizzle_ref() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32).y_ref(), &1u32);
    assert_eq!(vec3p!(0u32, 1u32, 2u32).yz_ref(), &vec2p!(1u32, 2u32));
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).xyz_ref(),
        &vec3p!(0u32, 1u32, 2u32)
    );
}

#[test]
fn test_vec3p_swizzle_mut() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32).y_mut(), &mut 1u32);
    assert_eq!(vec3p!(0u32, 1u32, 2u32).yz_mut(), &mut vec2p!(1u32, 2u32));
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).xyz_mut(),
        &mut vec3p!(0u32, 1u32, 2u32)
    );

    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).x_yz_mut(),
        (&mut 0u32, &mut vec2p!(1u32, 2u32))
    );
}

#[test]
fn test_vec3p_fold() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).fold(13, |acc, x| acc + x),
        13 + 0u32 + 1u32 + 2u32
    );
}

#[test]
fn test_vec3p_reduce() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).reduce(|acc, x| acc + x),
        0u32 + 1u32 + 2u32
    );
}

#[test]
fn test_vec3p_eq_mask() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).eq_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).eq_mask(vec3p!(0u32, 0u32, 2u32)),
        vec3p!(true, false, true),
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).eq_mask(vec3p!(3u32, 4u32, 5u32)),
        vec3p!(false, false, false)
    );
}

#[test]
fn test_vec3p_ne_mask() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).ne_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).ne_mask(vec3p!(0u32, 0u32, 2u32)),
        vec3p!(false, true, false),
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).ne_mask(vec3p!(3u32, 4u32, 5u32)),
        vec3p!(true, true, true)
    );
}

#[test]
fn test_vec3p_lt_mask() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).lt_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).lt_mask(vec3p!(1u32, 0u32, 2u32)),
        vec3p!(true, false, false),
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).lt_mask(vec3p!(3u32, 4u32, 5u32)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(3u32, 4u32, 5u32).lt_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(false, false, false)
    );
}

#[test]
fn test_vec3p_gt_mask() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).gt_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).gt_mask(vec3p!(1u32, 0u32, 2u32)),
        vec3p!(false, true, false),
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).gt_mask(vec3p!(3u32, 4u32, 5u32)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(3u32, 4u32, 5u32).gt_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(true, true, true)
    );
}

#[test]
fn test_vec3p_le_mask() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).le_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).le_mask(vec3p!(1u32, 0u32, 2u32)),
        vec3p!(true, false, true),
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).le_mask(vec3p!(3u32, 4u32, 5u32)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(3u32, 4u32, 5u32).le_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(false, false, false)
    );
}

#[test]
fn test_vec3p_ge_mask() {
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).ge_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(true, true, true)
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).ge_mask(vec3p!(1u32, 0u32, 2u32)),
        vec3p!(false, true, true),
    );
    assert_eq!(
        vec3p!(0u32, 1u32, 2u32).ge_mask(vec3p!(3u32, 4u32, 5u32)),
        vec3p!(false, false, false)
    );
    assert_eq!(
        vec3p!(3u32, 4u32, 5u32).ge_mask(vec3p!(0u32, 1u32, 2u32)),
        vec3p!(true, true, true)
    );
}

#[test]
fn test_vec3p_eq() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32) == vec3p!(0u32, 1u32, 2u32), true);
    assert_eq!(vec3p!(0u32, 1u32, 2u32) == vec3p!(0u32, 0u32, 2u32), false);
    assert_eq!(vec3p!(0u32, 1u32, 2u32) == vec3p!(3u32, 4u32, 5u32), false);
}

#[test]
fn test_vec3p_ne() {
    assert_eq!(vec3p!(0u32, 1u32, 2u32) != vec3p!(0u32, 1u32, 2u32), false);
    assert_eq!(vec3p!(0u32, 1u32, 2u32) != vec3p!(0u32, 0u32, 2u32), true);
    assert_eq!(vec3p!(0u32, 1u32, 2u32) != vec3p!(3u32, 4u32, 5u32), true);
}

#[test]
fn test_vec3p_debug() {
    assert_eq!(format!("{:?}", vec3p!(0u32, 1u32, 2u32)), "(0, 1, 2)");
}

#[test]
fn test_vec3p_display() {
    assert_eq!(format!("{}", vec3p!(0u32, 1u32, 2u32)), "(0, 1, 2)");
}

#[test]
fn test_vec3p_const_from_array() {
    assert_eq!(
        Vec3P::<u32>::const_from_array([0u32, 1u32, 2u32]),
        Vec3P::from_array([0u32, 1u32, 2u32])
    );
}

const _: () = assert!(size_of::<Vec4P<u32>>() == size_of::<[u32; 4]>());

#[test]
fn test_vec4_constructor() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32),
        Vec4::from_array([0u32, 1u32, 2u32, 3u32])
    );
    assert_eq!(
        vec4!(0u32, vec2!(1u32, 2u32), 3u32),
        Vec4::from_array([0u32, 1u32, 2u32, 3u32])
    );
    assert_eq!(
        vec4!(vec4!(0u32, 1u32, 2u32, 3u32)),
        Vec4::from_array([0u32, 1u32, 2u32, 3u32])
    );
}

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).align(),
        vec4!(0u32, 1u32, 2u32, 3u32)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).pack(),
        vec4p!(0u32, 1u32, 2u32, 3u32)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0u32, 1u32, 2u32, 3u32]).as_array(),
        [0u32, 1u32, 2u32, 3u32]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0u32), vec4!(0u32, 0u32, 0u32, 0u32));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).index(0), 0u32);
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).index(1), 1u32);
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).index(2), 2u32);
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).index(3), 3u32);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0u32, 1u32, 2u32, 3u32).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get(0), Some(0u32));
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get(1), Some(1u32));
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get(2), Some(2u32));
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get(3), Some(3u32));

    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get_unchecked(0), 0u32);
        assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get_unchecked(1), 1u32);
        assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get_unchecked(2), 2u32);
        assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).get_unchecked(3), 3u32);
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
        vec.set(0, 50u32);

        assert_eq!(vec, vec4!(50u32, 1u32, 2u32, 3u32));
    }
    {
        let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
        vec.set(1, 50u32);

        assert_eq!(vec, vec4!(0u32, 50u32, 2u32, 3u32));
    }
    {
        let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
        vec.set(2, 50u32);

        assert_eq!(vec, vec4!(0u32, 1u32, 50u32, 3u32));
    }
    {
        let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
        vec.set(3, 50u32);

        assert_eq!(vec, vec4!(0u32, 1u32, 2u32, 50u32));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
    vec.set(4, 0u32);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
        vec.try_set(0, 50u32).unwrap();

        assert_eq!(vec, vec4!(50u32, 1u32, 2u32, 3u32));
    }
    {
        let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
        vec.try_set(1, 50u32).unwrap();

        assert_eq!(vec, vec4!(0u32, 50u32, 2u32, 3u32));
    }
    {
        let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
        vec.try_set(2, 50u32).unwrap();

        assert_eq!(vec, vec4!(0u32, 1u32, 50u32, 3u32));
    }
    {
        let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
        vec.try_set(3, 50u32).unwrap();

        assert_eq!(vec, vec4!(0u32, 1u32, 2u32, 50u32));
    }

    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).try_set(4, 0u32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
            vec.set_unchecked(0, 50u32);

            assert_eq!(vec, vec4!(50u32, 1u32, 2u32, 3u32));
        }
        {
            let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
            vec.set_unchecked(1, 50u32);

            assert_eq!(vec, vec4!(0u32, 50u32, 2u32, 3u32));
        }
        {
            let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
            vec.set_unchecked(2, 50u32);

            assert_eq!(vec, vec4!(0u32, 1u32, 50u32, 3u32));
        }
        {
            let mut vec = vec4!(0u32, 1u32, 2u32, 3u32);
            vec.set_unchecked(3, 50u32);

            assert_eq!(vec, vec4!(0u32, 1u32, 2u32, 50u32));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).z(), 2u32);
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).zw(), vec2!(2u32, 3u32));
    assert_eq!(vec4!(0u32, 1u32, 2u32, 3u32).zwy(), vec3!(2u32, 3u32, 1u32));
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).zwyz(),
        vec4!(2u32, 3u32, 1u32, 2u32)
    );
}

#[test]
fn test_vec4_with_swizzle() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).with_y(0u32),
        vec4!(0u32, 0u32, 2u32, 3u32)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).with_yx(vec2!(0u32, 1u32)),
        vec4!(1u32, 0u32, 2u32, 3u32)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).with_yxz(vec3!(0u32, 2u32, 1u32)),
        vec4!(2u32, 0u32, 1u32, 3u32)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).with_yxzw(vec4!(0u32, 2u32, 1u32, 0u32)),
        vec4!(2u32, 0u32, 1u32, 0u32)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).fold(13, |acc, x| acc + x),
        13 + 0u32 + 1u32 + 2u32 + 3u32
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).reduce(|acc, x| acc + x),
        0u32 + 1u32 + 2u32 + 3u32
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).eq_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).eq_mask(vec4!(0u32, 0u32, 2u32, 3u32)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).eq_mask(vec4!(4u32, 5u32, 6u32, 7u32)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).ne_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).ne_mask(vec4!(0u32, 0u32, 2u32, 3u32)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).ne_mask(vec4!(4u32, 5u32, 6u32, 7u32)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).lt_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).lt_mask(vec4!(1u32, 0u32, 2u32, 3u32)),
        vec4!(true, false, false, false),
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).lt_mask(vec4!(4u32, 5u32, 6u32, 7u32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4u32, 5u32, 6u32, 7u32).lt_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).gt_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).gt_mask(vec4!(1u32, 0u32, 2u32, 3u32)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).gt_mask(vec4!(4u32, 5u32, 6u32, 7u32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4u32, 5u32, 6u32, 7u32).gt_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).le_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).le_mask(vec4!(1u32, 0u32, 2u32, 3u32)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).le_mask(vec4!(4u32, 5u32, 6u32, 7u32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4u32, 5u32, 6u32, 7u32).le_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).ge_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).ge_mask(vec4!(1u32, 0u32, 2u32, 3u32)),
        vec4!(false, true, true, true),
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32).ge_mask(vec4!(4u32, 5u32, 6u32, 7u32)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4u32, 5u32, 6u32, 7u32).ge_mask(vec4!(0u32, 1u32, 2u32, 3u32)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32) == vec4!(0u32, 1u32, 2u32, 3u32),
        true
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32) == vec4!(0u32, 0u32, 2u32, 3u32),
        false
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32) == vec4!(4u32, 5u32, 6u32, 7u32),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32) != vec4!(0u32, 1u32, 2u32, 3u32),
        false
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32) != vec4!(0u32, 0u32, 2u32, 3u32),
        true
    );
    assert_eq!(
        vec4!(0u32, 1u32, 2u32, 3u32) != vec4!(4u32, 5u32, 6u32, 7u32),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0u32, 1u32, 2u32, 3u32)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(format!("{}", vec4!(0u32, 1u32, 2u32, 3u32)), "(0, 1, 2, 3)");
}

#[test]
fn test_vec4_const_from_array() {
    assert_eq!(
        Vec4::<u32>::const_from_array([0u32, 1u32, 2u32, 3u32]),
        Vec4::from_array([0u32, 1u32, 2u32, 3u32])
    );
}

#[test]
fn test_vec4p_constructor() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32),
        Vec4P::from_array([0u32, 1u32, 2u32, 3u32])
    );
    assert_eq!(
        vec4p!(0u32, vec2p!(1u32, 2u32), 3u32),
        Vec4P::from_array([0u32, 1u32, 2u32, 3u32])
    );
    assert_eq!(
        vec4p!(vec4p!(0u32, 1u32, 2u32, 3u32)),
        Vec4P::from_array([0u32, 1u32, 2u32, 3u32])
    );
}

#[test]
fn test_vec4p_align() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).align(),
        vec4!(0u32, 1u32, 2u32, 3u32)
    );
}

#[test]
fn test_vec4p_pack() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).pack(),
        vec4p!(0u32, 1u32, 2u32, 3u32)
    );
}

#[test]
fn test_vec4p_from_array_as_array() {
    assert_eq!(
        Vec4P::from_array([0u32, 1u32, 2u32, 3u32]).as_array(),
        [0u32, 1u32, 2u32, 3u32]
    );
}

#[test]
fn test_vec4p_splat() {
    assert_eq!(Vec4P::splat(0u32), vec4p!(0u32, 0u32, 0u32, 0u32));
}

#[test]
fn test_vec4p_index() {
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).index(0), 0u32);
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).index(1), 1u32);
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).index(2), 2u32);
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).index(3), 3u32);
}

#[test]
#[should_panic]
fn test_vec4p_index_panic() {
    vec4p!(0u32, 1u32, 2u32, 3u32).index(4);
}

#[test]
fn test_vec4p_get() {
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get(0), Some(0u32));
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get(1), Some(1u32));
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get(2), Some(2u32));
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get(3), Some(3u32));

    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get(4), None);
}

#[test]
fn test_vec4p_get_unchecked() {
    unsafe {
        assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get_unchecked(0), 0u32);
        assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get_unchecked(1), 1u32);
        assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get_unchecked(2), 2u32);
        assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).get_unchecked(3), 3u32);
    }
}

#[test]
fn test_vec4p_set() {
    {
        let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
        vec.set(0, 50u32);

        assert_eq!(vec, vec4p!(50u32, 1u32, 2u32, 3u32));
    }
    {
        let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
        vec.set(1, 50u32);

        assert_eq!(vec, vec4p!(0u32, 50u32, 2u32, 3u32));
    }
    {
        let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
        vec.set(2, 50u32);

        assert_eq!(vec, vec4p!(0u32, 1u32, 50u32, 3u32));
    }
    {
        let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
        vec.set(3, 50u32);

        assert_eq!(vec, vec4p!(0u32, 1u32, 2u32, 50u32));
    }
}

#[test]
#[should_panic]
fn test_vec4p_set_panic() {
    let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
    vec.set(4, 0u32);
}

#[test]
fn test_vec4p_try_set() {
    {
        let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
        vec.try_set(0, 50u32).unwrap();

        assert_eq!(vec, vec4p!(50u32, 1u32, 2u32, 3u32));
    }
    {
        let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
        vec.try_set(1, 50u32).unwrap();

        assert_eq!(vec, vec4p!(0u32, 50u32, 2u32, 3u32));
    }
    {
        let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
        vec.try_set(2, 50u32).unwrap();

        assert_eq!(vec, vec4p!(0u32, 1u32, 50u32, 3u32));
    }
    {
        let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
        vec.try_set(3, 50u32).unwrap();

        assert_eq!(vec, vec4p!(0u32, 1u32, 2u32, 50u32));
    }

    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).try_set(4, 0u32),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4p_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
            vec.set_unchecked(0, 50u32);

            assert_eq!(vec, vec4p!(50u32, 1u32, 2u32, 3u32));
        }
        {
            let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
            vec.set_unchecked(1, 50u32);

            assert_eq!(vec, vec4p!(0u32, 50u32, 2u32, 3u32));
        }
        {
            let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
            vec.set_unchecked(2, 50u32);

            assert_eq!(vec, vec4p!(0u32, 1u32, 50u32, 3u32));
        }
        {
            let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
            vec.set_unchecked(3, 50u32);

            assert_eq!(vec, vec4p!(0u32, 1u32, 2u32, 50u32));
        }
    }
}

#[test]
fn test_vec4p_swizzle() {
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).z(), 2u32);
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).zw(), vec2p!(2u32, 3u32));
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).zwy(),
        vec3p!(2u32, 3u32, 1u32)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).zwyz(),
        vec4p!(2u32, 3u32, 1u32, 2u32)
    );
}

#[test]
fn test_vec4p_with_swizzle() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).with_y(0u32),
        vec4p!(0u32, 0u32, 2u32, 3u32)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).with_yx(vec2p!(0u32, 1u32)),
        vec4p!(1u32, 0u32, 2u32, 3u32)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).with_yxz(vec3p!(0u32, 2u32, 1u32)),
        vec4p!(2u32, 0u32, 1u32, 3u32)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).with_yxzw(vec4p!(0u32, 2u32, 1u32, 0u32)),
        vec4p!(2u32, 0u32, 1u32, 0u32)
    );
}

#[test]
fn test_vec4p_swizzle_set() {
    let mut vec = vec4p!(0u32, 1u32, 2u32, 3u32);
    vec.set_yxz(vec3p!(0u32, 2u32, 1u32));

    assert_eq!(vec, vec4p!(2u32, 0u32, 1u32, 3u32));
}

#[test]
fn test_vec4p_swizzle_ref() {
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).y_ref(), &1u32);
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).yz_ref(), &vec2p!(1u32, 2u32));
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).xyz_ref(),
        &vec3p!(0u32, 1u32, 2u32)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).xyzw_ref(),
        &vec4p!(0u32, 1u32, 2u32, 3u32)
    );
}

#[test]
fn test_vec4p_swizzle_mut() {
    assert_eq!(vec4p!(0u32, 1u32, 2u32, 3u32).y_mut(), &mut 1u32);
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).yz_mut(),
        &mut vec2p!(1u32, 2u32)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).xyz_mut(),
        &mut vec3p!(0u32, 1u32, 2u32)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).xyzw_mut(),
        &mut vec4p!(0u32, 1u32, 2u32, 3u32)
    );

    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).x_yz_mut(),
        (&mut 0u32, &mut vec2p!(1u32, 2u32))
    );
}

#[test]
fn test_vec4p_fold() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).fold(13, |acc, x| acc + x),
        13 + 0u32 + 1u32 + 2u32 + 3u32
    );
}

#[test]
fn test_vec4p_reduce() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).reduce(|acc, x| acc + x),
        0u32 + 1u32 + 2u32 + 3u32
    );
}

#[test]
fn test_vec4p_eq_mask() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).eq_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).eq_mask(vec4p!(0u32, 0u32, 2u32, 3u32)),
        vec4p!(true, false, true, true),
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).eq_mask(vec4p!(4u32, 5u32, 6u32, 7u32)),
        vec4p!(false, false, false, false)
    );
}

#[test]
fn test_vec4p_ne_mask() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).ne_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).ne_mask(vec4p!(0u32, 0u32, 2u32, 3u32)),
        vec4p!(false, true, false, false),
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).ne_mask(vec4p!(4u32, 5u32, 6u32, 7u32)),
        vec4p!(true, true, true, true)
    );
}

#[test]
fn test_vec4p_lt_mask() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).lt_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).lt_mask(vec4p!(1u32, 0u32, 2u32, 3u32)),
        vec4p!(true, false, false, false),
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).lt_mask(vec4p!(4u32, 5u32, 6u32, 7u32)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(4u32, 5u32, 6u32, 7u32).lt_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(false, false, false, false)
    );
}

#[test]
fn test_vec4p_gt_mask() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).gt_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).gt_mask(vec4p!(1u32, 0u32, 2u32, 3u32)),
        vec4p!(false, true, false, false),
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).gt_mask(vec4p!(4u32, 5u32, 6u32, 7u32)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(4u32, 5u32, 6u32, 7u32).gt_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(true, true, true, true)
    );
}

#[test]
fn test_vec4p_le_mask() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).le_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).le_mask(vec4p!(1u32, 0u32, 2u32, 3u32)),
        vec4p!(true, false, true, true),
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).le_mask(vec4p!(4u32, 5u32, 6u32, 7u32)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(4u32, 5u32, 6u32, 7u32).le_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(false, false, false, false)
    );
}

#[test]
fn test_vec4p_ge_mask() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).ge_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(true, true, true, true)
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).ge_mask(vec4p!(1u32, 0u32, 2u32, 3u32)),
        vec4p!(false, true, true, true),
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32).ge_mask(vec4p!(4u32, 5u32, 6u32, 7u32)),
        vec4p!(false, false, false, false)
    );
    assert_eq!(
        vec4p!(4u32, 5u32, 6u32, 7u32).ge_mask(vec4p!(0u32, 1u32, 2u32, 3u32)),
        vec4p!(true, true, true, true)
    );
}

#[test]
fn test_vec4p_eq() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32) == vec4p!(0u32, 1u32, 2u32, 3u32),
        true
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32) == vec4p!(0u32, 0u32, 2u32, 3u32),
        false
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32) == vec4p!(4u32, 5u32, 6u32, 7u32),
        false
    );
}

#[test]
fn test_vec4p_ne() {
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32) != vec4p!(0u32, 1u32, 2u32, 3u32),
        false
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32) != vec4p!(0u32, 0u32, 2u32, 3u32),
        true
    );
    assert_eq!(
        vec4p!(0u32, 1u32, 2u32, 3u32) != vec4p!(4u32, 5u32, 6u32, 7u32),
        true
    );
}

#[test]
fn test_vec4p_debug() {
    assert_eq!(
        format!("{:?}", vec4p!(0u32, 1u32, 2u32, 3u32)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4p_display() {
    assert_eq!(
        format!("{}", vec4p!(0u32, 1u32, 2u32, 3u32)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4p_const_from_array() {
    assert_eq!(
        Vec4P::<u32>::const_from_array([0u32, 1u32, 2u32, 3u32]),
        Vec4P::from_array([0u32, 1u32, 2u32, 3u32])
    );
}
