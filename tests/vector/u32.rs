// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_simd_primitive_fns() {
    assert_eq!(Vec2::from_array([1u32, 2u32]).as_array(), [1u32, 2u32]);
    assert_eq!(
        Vec3::from_array([1u32, 2u32, 3u32]).as_array(),
        [1u32, 2u32, 3u32]
    );
    assert_eq!(
        Vec4::from_array([1u32, 2u32, 3u32, 4u32]).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(Vec2::splat(1u32).as_array(), [1u32; 2]);
    assert_eq!(Vec3::splat(1u32).as_array(), [1u32; 3]);
    assert_eq!(Vec4::splat(1u32).as_array(), [1u32; 4]);

    assert_eq!(Vec2::from_fn(|i| [1u32, 2u32][i]).as_array(), [1u32, 2u32]);
    assert_eq!(
        Vec3::from_fn(|i| [1u32, 2u32, 3u32][i]).as_array(),
        [1u32, 2u32, 3u32]
    );
    assert_eq!(
        Vec4::from_fn(|i| [1u32, 2u32, 3u32, 4u32][i]).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(
        Vec2::const_from_array([1u32, 2u32]).as_array(),
        [1u32, 2u32]
    );
    assert_eq!(
        Vec3::const_from_array([1u32, 2u32, 3u32]).as_array(),
        [1u32, 2u32, 3u32]
    );
    assert_eq!(
        Vec4::const_from_array([1u32, 2u32, 3u32, 4u32]).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(vec2!(1u32, 2u32).as_array(), [1u32, 2u32]);
    assert_eq!(vec2!(vec2!(1u32, 2u32)).as_array(), [1u32, 2u32]);
    assert_eq!(vec3!(1u32, 2u32, 3u32).as_array(), [1u32, 2u32, 3u32]);
    assert_eq!(
        vec3!(1u32, vec2!(2u32, 3u32)).as_array(),
        [1u32, 2u32, 3u32]
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );
    assert_eq!(
        vec4!(1u32, vec2!(2u32, 3u32), 4u32).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );
    assert_eq!(
        vec4!(
            1u32,
            vec2!(2u32, 3u32),
            Vector::<1, u32, Simd>::from_array([4u32])
        )
        .as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(vec2!(1u32, 2u32).as_array_ref(), &[1u32, 2u32]);
    assert_eq!(vec3!(1u32, 2u32, 3u32).as_array_ref(), &[1u32, 2u32, 3u32]);
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).as_array_ref(),
        &[1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(vec2!(1u32, 2u32).as_mut_array(), &mut [1u32, 2u32]);
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).as_mut_array(),
        &mut [1u32, 2u32, 3u32]
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).as_mut_array(),
        &mut [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(vec2!(1u32, 2u32).as_simd(), vec2!(1u32, 2u32));
    assert_eq!(vec3!(1u32, 2u32, 3u32).as_simd(), vec3!(1u32, 2u32, 3u32));
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).as_simd(),
        vec4!(1u32, 2u32, 3u32, 4u32)
    );

    assert_eq!(vec2!(1u32, 2u32).as_nonsimd(), vec2s!(1u32, 2u32));
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).as_nonsimd(),
        vec3s!(1u32, 2u32, 3u32)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).as_nonsimd(),
        vec4s!(1u32, 2u32, 3u32, 4u32)
    );

    assert_eq!(vec2!(1u32, 2u32).len(), 2);
    assert_eq!(vec3!(1u32, 2u32, 3u32).len(), 3);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).len(), 4);

    assert_eq!(vec2!(1u32, 2u32).is_simd(), true);
    assert_eq!(vec3!(1u32, 2u32, 3u32).is_simd(), true);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).is_simd(), true);

    assert_eq!(vec2!(1u32, 2u32).get(0), Some(1u32));
    assert_eq!(vec2!(1u32, 2u32).get(1), Some(2u32));
    assert_eq!(vec2!(1u32, 2u32).get(2), None);
    assert_eq!(vec2!(1u32, 2u32).get(3), None);

    assert_eq!(vec3!(1u32, 2u32, 3u32).get(0), Some(1u32));
    assert_eq!(vec3!(1u32, 2u32, 3u32).get(1), Some(2u32));
    assert_eq!(vec3!(1u32, 2u32, 3u32).get(2), Some(3u32));
    assert_eq!(vec3!(1u32, 2u32, 3u32).get(3), None);
    assert_eq!(vec3!(1u32, 2u32, 3u32).get(4), None);

    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get(0), Some(1u32));
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get(1), Some(2u32));
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get(2), Some(3u32));
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get(3), Some(4u32));
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get(4), None);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get(5), None);

    assert_eq!(vec2!(1u32, 2u32).get_mut(0), Some(&mut 1u32));
    assert_eq!(vec2!(1u32, 2u32).get_mut(1), Some(&mut 2u32));
    assert_eq!(vec2!(1u32, 2u32).get_mut(2), None);
    assert_eq!(vec2!(1u32, 2u32).get_mut(3), None);

    assert_eq!(vec3!(1u32, 2u32, 3u32).get_mut(0), Some(&mut 1u32));
    assert_eq!(vec3!(1u32, 2u32, 3u32).get_mut(1), Some(&mut 2u32));
    assert_eq!(vec3!(1u32, 2u32, 3u32).get_mut(2), Some(&mut 3u32));
    assert_eq!(vec3!(1u32, 2u32, 3u32).get_mut(3), None);
    assert_eq!(vec3!(1u32, 2u32, 3u32).get_mut(4), None);

    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_mut(0), Some(&mut 1u32));
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_mut(1), Some(&mut 2u32));
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_mut(2), Some(&mut 3u32));
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_mut(3), Some(&mut 4u32));
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_mut(4), None);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_mut(5), None);

    unsafe {
        assert_eq!(vec2!(1u32, 2u32).get_unchecked(0), 1u32);
        assert_eq!(vec2!(1u32, 2u32).get_unchecked(1), 2u32);

        assert_eq!(vec3!(1u32, 2u32, 3u32).get_unchecked(0), 1u32);
        assert_eq!(vec3!(1u32, 2u32, 3u32).get_unchecked(1), 2u32);
        assert_eq!(vec3!(1u32, 2u32, 3u32).get_unchecked(2), 3u32);

        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_unchecked(0), 1u32);
        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_unchecked(1), 2u32);
        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_unchecked(2), 3u32);
        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).get_unchecked(3), 4u32);

        assert_eq!(vec2!(1u32, 2u32).get_unchecked_mut(0), &mut 1u32);
        assert_eq!(vec2!(1u32, 2u32).get_unchecked_mut(1), &mut 2u32);

        assert_eq!(vec3!(1u32, 2u32, 3u32).get_unchecked_mut(0), &mut 1u32);
        assert_eq!(vec3!(1u32, 2u32, 3u32).get_unchecked_mut(1), &mut 2u32);
        assert_eq!(vec3!(1u32, 2u32, 3u32).get_unchecked_mut(2), &mut 3u32);

        assert_eq!(
            vec4!(1u32, 2u32, 3u32, 4u32).get_unchecked_mut(0),
            &mut 1u32
        );
        assert_eq!(
            vec4!(1u32, 2u32, 3u32, 4u32).get_unchecked_mut(1),
            &mut 2u32
        );
        assert_eq!(
            vec4!(1u32, 2u32, 3u32, 4u32).get_unchecked_mut(2),
            &mut 3u32
        );
        assert_eq!(
            vec4!(1u32, 2u32, 3u32, 4u32).get_unchecked_mut(3),
            &mut 4u32
        );
    }

    assert_eq!(
        vec2!(1u32, 2u32).iter().collect::<Vec<u32>>(),
        vec![1u32, 2u32]
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).iter().collect::<Vec<u32>>(),
        vec![1u32, 2u32, 3u32]
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).iter().collect::<Vec<u32>>(),
        vec![1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(
        vec2!(1u32, 2u32).iter_mut().collect::<Vec<&mut u32>>(),
        vec![&mut 1u32, &mut 2u32]
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32)
            .iter_mut()
            .collect::<Vec<&mut u32>>(),
        vec![&mut 1u32, &mut 2u32, &mut 3u32]
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32)
            .iter_mut()
            .collect::<Vec<&mut u32>>(),
        vec![&mut 1u32, &mut 2u32, &mut 3u32, &mut 4u32]
    );

    assert_eq!(vec2!(1u32, 2u32).map(|x| x == 2u32), vec2!(false, true));
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).map(|x| x == 2u32),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).map(|x| x == 2u32),
        vec4!(false, true, false, false)
    );

    assert_eq!(
        vec2!(1u32, 2u32).zip(vec2!(2u32, 1u32)),
        vec2!((1u32, 2u32), (2u32, 1u32))
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).zip(vec3!(2u32, 3u32, 1u32)),
        vec3!((1u32, 2u32), (2u32, 3u32), (3u32, 1u32))
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).zip(vec4!(2u32, 3u32, 4u32, 1u32)),
        vec4!((1u32, 2u32), (2u32, 3u32), (3u32, 4u32), (4u32, 1u32))
    );

    assert_eq!(vec2!(1u32, 2u32).reverse(), vec2!(2u32, 1u32));
    assert_eq!(vec3!(1u32, 2u32, 3u32).reverse(), vec3!(3u32, 2u32, 1u32));
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).reverse(),
        vec4!(4u32, 3u32, 2u32, 1u32)
    );

    assert_eq!(
        vec2!(1u32, 2u32).get_const_vec2::<0, 1>(),
        vec2!(1u32, 2u32)
    );
    assert_eq!(
        vec2!(1u32, 2u32).get_const_vec2::<1, 0>(),
        vec2!(2u32, 1u32)
    );
    assert_eq!(
        vec2!(1u32, 2u32).get_const_vec2::<1, 1>(),
        vec2!(2u32, 2u32)
    );

    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec2::<0, 1>(),
        vec2!(1u32, 2u32)
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec2::<0, 2>(),
        vec2!(1u32, 3u32)
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec2::<2, 1>(),
        vec2!(3u32, 2u32)
    );

    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec2::<0, 1>(),
        vec2!(1u32, 2u32)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec2::<1, 3>(),
        vec2!(2u32, 4u32)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec2::<3, 1>(),
        vec2!(4u32, 2u32)
    );

    assert_eq!(
        vec2!(1u32, 2u32).get_const_vec3::<0, 1, 1>(),
        vec3!(1u32, 2u32, 2u32)
    );
    assert_eq!(
        vec2!(1u32, 2u32).get_const_vec3::<1, 0, 1>(),
        vec3!(2u32, 1u32, 2u32)
    );

    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec3::<0, 1, 2>(),
        vec3!(1u32, 2u32, 3u32)
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec3::<1, 0, 2>(),
        vec3!(2u32, 1u32, 3u32)
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec3::<2, 1, 0>(),
        vec3!(3u32, 2u32, 1u32)
    );

    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec3::<0, 1, 2>(),
        vec3!(1u32, 2u32, 3u32)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec3::<1, 0, 2>(),
        vec3!(2u32, 1u32, 3u32)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec3::<2, 1, 0>(),
        vec3!(3u32, 2u32, 1u32)
    );

    assert_eq!(
        vec2!(1u32, 2u32).get_const_vec4::<0, 1, 1, 0>(),
        vec4!(1u32, 2u32, 2u32, 1u32)
    );
    assert_eq!(
        vec2!(1u32, 2u32).get_const_vec4::<1, 0, 1, 0>(),
        vec4!(2u32, 1u32, 2u32, 1u32)
    );
    assert_eq!(
        vec2!(1u32, 2u32).get_const_vec4::<1, 1, 0, 0>(),
        vec4!(2u32, 2u32, 1u32, 1u32)
    );

    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec4::<0, 1, 2, 0>(),
        vec4!(1u32, 2u32, 3u32, 1u32)
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec4::<1, 0, 2, 0>(),
        vec4!(2u32, 1u32, 3u32, 1u32)
    );
    assert_eq!(
        vec3!(1u32, 2u32, 3u32).get_const_vec4::<2, 1, 0, 0>(),
        vec4!(3u32, 2u32, 1u32, 1u32)
    );

    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec4::<0, 1, 2, 3>(),
        vec4!(1u32, 2u32, 3u32, 4u32)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec4::<1, 0, 2, 3>(),
        vec4!(2u32, 1u32, 3u32, 4u32)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec4::<2, 1, 0, 3>(),
        vec4!(3u32, 2u32, 1u32, 4u32)
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32).get_const_vec4::<3, 1, 2, 0>(),
        vec4!(4u32, 2u32, 3u32, 1u32)
    );

    assert_eq!(vec2!(1u32, 2u32)[0], 1u32);
    assert_eq!(vec2!(1u32, 2u32)[1], 2u32);

    assert_eq!(vec3!(1u32, 2u32, 3u32)[0], 1u32);
    assert_eq!(vec3!(1u32, 2u32, 3u32)[1], 2u32);
    assert_eq!(vec3!(1u32, 2u32, 3u32)[2], 3u32);

    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32)[0], 1u32);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32)[1], 2u32);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32)[2], 3u32);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32)[3], 4u32);

    assert_eq!(&mut vec2!(1u32, 2u32)[0], &mut 1u32);
    assert_eq!(&mut vec2!(1u32, 2u32)[1], &mut 2u32);

    assert_eq!(&mut vec3!(1u32, 2u32, 3u32)[0], &mut 1u32);
    assert_eq!(&mut vec3!(1u32, 2u32, 3u32)[1], &mut 2u32);
    assert_eq!(&mut vec3!(1u32, 2u32, 3u32)[2], &mut 3u32);

    assert_eq!(&mut vec4!(1u32, 2u32, 3u32, 4u32)[0], &mut 1u32);
    assert_eq!(&mut vec4!(1u32, 2u32, 3u32, 4u32)[1], &mut 2u32);
    assert_eq!(&mut vec4!(1u32, 2u32, 3u32, 4u32)[2], &mut 3u32);
    assert_eq!(&mut vec4!(1u32, 2u32, 3u32, 4u32)[3], &mut 4u32);

    assert_eq!(vec2!(1u32, 2u32) == vec2!(1u32, 2u32), true);
    assert_eq!(vec2!(1u32, 2u32) == vec2!(2u32, 1u32), false);
    assert_eq!(vec2!(1u32, 2u32) == vec2!(2u32, 2u32), false);

    assert_eq!(vec3!(1u32, 2u32, 3u32) == vec3!(1u32, 2u32, 3u32), true);
    assert_eq!(vec3!(1u32, 2u32, 3u32) == vec3!(4u32, 3u32, 2u32), false);
    assert_eq!(vec3!(1u32, 2u32, 3u32) == vec3!(2u32, 2u32, 3u32), false);

    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32) == vec4!(1u32, 2u32, 3u32, 4u32),
        true
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32) == vec4!(4u32, 3u32, 2u32, 1u32),
        false
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32) == vec4!(2u32, 2u32, 2u32, 4u32),
        false
    );

    assert_eq!(vec2!(1u32, 2u32) != vec2!(1u32, 2u32), false);
    assert_eq!(vec2!(1u32, 2u32) != vec2!(2u32, 1u32), true);
    assert_eq!(vec2!(1u32, 2u32) != vec2!(2u32, 2u32), true);

    assert_eq!(vec3!(1u32, 2u32, 3u32) != vec3!(1u32, 2u32, 3u32), false);
    assert_eq!(vec3!(1u32, 2u32, 3u32) != vec3!(4u32, 3u32, 2u32), true);
    assert_eq!(vec3!(1u32, 2u32, 3u32) != vec3!(2u32, 2u32, 3u32), true);

    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32) != vec4!(1u32, 2u32, 3u32, 4u32),
        false
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32) != vec4!(4u32, 3u32, 2u32, 1u32),
        true
    );
    assert_eq!(
        vec4!(1u32, 2u32, 3u32, 4u32) != vec4!(2u32, 2u32, 2u32, 4u32),
        true
    );

    assert_eq!(vec2!(1u32, 2u32).to_string(), "(1, 2)");
    assert_eq!(vec3!(1u32, 2u32, 3u32).to_string(), "(1, 2, 3)");
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2!(1u32, 2u32)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3!(1u32, 2u32, 3u32)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4!(1u32, 2u32, 3u32, 4u32)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2!(1u32, 2u32).x, 1u32);
    assert_eq!(vec2!(1u32, 2u32).y, 2u32);

    assert_eq!(vec3!(1u32, 2u32, 3u32).x, 1u32);
    assert_eq!(vec3!(1u32, 2u32, 3u32).y, 2u32);
    assert_eq!(vec3!(1u32, 2u32, 3u32).z, 3u32);

    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).x, 1u32);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).y, 2u32);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).z, 3u32);
    assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).w, 4u32);

    assert_eq!(&mut vec2!(1u32, 2u32).x, &mut 1u32);
    assert_eq!(&mut vec2!(1u32, 2u32).y, &mut 2u32);

    assert_eq!(&mut vec3!(1u32, 2u32, 3u32).x, &mut 1u32);
    assert_eq!(&mut vec3!(1u32, 2u32, 3u32).y, &mut 2u32);
    assert_eq!(&mut vec3!(1u32, 2u32, 3u32).z, &mut 3u32);

    assert_eq!(&mut vec4!(1u32, 2u32, 3u32, 4u32).x, &mut 1u32);
    assert_eq!(&mut vec4!(1u32, 2u32, 3u32, 4u32).y, &mut 2u32);
    assert_eq!(&mut vec4!(1u32, 2u32, 3u32, 4u32).z, &mut 3u32);
    assert_eq!(&mut vec4!(1u32, 2u32, 3u32, 4u32).w, &mut 4u32);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2!(1u32, 2u32).xy(), vec2!(1u32, 2u32));
        assert_eq!(vec2!(1u32, 2u32).yx(), vec2!(2u32, 1u32));
        assert_eq!(vec2!(1u32, 2u32).yy(), vec2!(2u32, 2u32));

        assert_eq!(vec3!(1u32, 2u32, 3u32).xy(), vec2!(1u32, 2u32));
        assert_eq!(vec3!(1u32, 2u32, 3u32).xz(), vec2!(1u32, 3u32));
        assert_eq!(vec3!(1u32, 2u32, 3u32).zy(), vec2!(3u32, 2u32));

        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).xy(), vec2!(1u32, 2u32));
        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).yw(), vec2!(2u32, 4u32));
        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).wy(), vec2!(4u32, 2u32));

        assert_eq!(vec2!(1u32, 2u32).xyy(), vec3!(1u32, 2u32, 2u32));
        assert_eq!(vec2!(1u32, 2u32).yxy(), vec3!(2u32, 1u32, 2u32));

        assert_eq!(vec3!(1u32, 2u32, 3u32).xyz(), vec3!(1u32, 2u32, 3u32));
        assert_eq!(vec3!(1u32, 2u32, 3u32).yxz(), vec3!(2u32, 1u32, 3u32));
        assert_eq!(vec3!(1u32, 2u32, 3u32).zyx(), vec3!(3u32, 2u32, 1u32));

        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).xyz(), vec3!(1u32, 2u32, 3u32));
        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).yxz(), vec3!(2u32, 1u32, 3u32));
        assert_eq!(vec4!(1u32, 2u32, 3u32, 4u32).zyx(), vec3!(3u32, 2u32, 1u32));

        assert_eq!(vec2!(1u32, 2u32).xyyx(), vec4!(1u32, 2u32, 2u32, 1u32));
        assert_eq!(vec2!(1u32, 2u32).yxyx(), vec4!(2u32, 1u32, 2u32, 1u32));
        assert_eq!(vec2!(1u32, 2u32).yyxx(), vec4!(2u32, 2u32, 1u32, 1u32));

        assert_eq!(
            vec3!(1u32, 2u32, 3u32).xyzx(),
            vec4!(1u32, 2u32, 3u32, 1u32)
        );
        assert_eq!(
            vec3!(1u32, 2u32, 3u32).yxzx(),
            vec4!(2u32, 1u32, 3u32, 1u32)
        );
        assert_eq!(
            vec3!(1u32, 2u32, 3u32).zyxx(),
            vec4!(3u32, 2u32, 1u32, 1u32)
        );

        assert_eq!(
            vec4!(1u32, 2u32, 3u32, 4u32).xyzw(),
            vec4!(1u32, 2u32, 3u32, 4u32)
        );
        assert_eq!(
            vec4!(1u32, 2u32, 3u32, 4u32).yxzw(),
            vec4!(2u32, 1u32, 3u32, 4u32)
        );
        assert_eq!(
            vec4!(1u32, 2u32, 3u32, 4u32).zyxw(),
            vec4!(3u32, 2u32, 1u32, 4u32)
        );
        assert_eq!(
            vec4!(1u32, 2u32, 3u32, 4u32).wyzx(),
            vec4!(4u32, 2u32, 3u32, 1u32)
        );
    }
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!(1u32, 2u32)[2];
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!(1u32, 2u32, 3u32)[3];
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(1u32, 2u32, 3u32, 4u32)[4];
}

#[test]
fn test_nonsimd_primitive_fns() {
    assert_eq!(size_of::<Vec2S<u32>>(), size_of::<u32>() * 2);
    assert_eq!(size_of::<Vec3S<u32>>(), size_of::<u32>() * 3);
    assert_eq!(size_of::<Vec4S<u32>>(), size_of::<u32>() * 4);

    assert_eq!(align_of::<Vec2S<u32>>(), align_of::<u32>());
    assert_eq!(align_of::<Vec3S<u32>>(), align_of::<u32>());
    assert_eq!(align_of::<Vec4S<u32>>(), align_of::<u32>());

    assert_eq!(Vec2S::from_array([1u32, 2u32]).as_array(), [1u32, 2u32]);
    assert_eq!(
        Vec3S::from_array([1u32, 2u32, 3u32]).as_array(),
        [1u32, 2u32, 3u32]
    );
    assert_eq!(
        Vec4S::from_array([1u32, 2u32, 3u32, 4u32]).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(Vec2S::splat(1u32).as_array(), [1u32; 2]);
    assert_eq!(Vec3S::splat(1u32).as_array(), [1u32; 3]);
    assert_eq!(Vec4S::splat(1u32).as_array(), [1u32; 4]);

    assert_eq!(Vec2S::from_fn(|i| [1u32, 2u32][i]).as_array(), [1u32, 2u32]);
    assert_eq!(
        Vec3S::from_fn(|i| [1u32, 2u32, 3u32][i]).as_array(),
        [1u32, 2u32, 3u32]
    );
    assert_eq!(
        Vec4S::from_fn(|i| [1u32, 2u32, 3u32, 4u32][i]).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(
        Vec2S::const_from_array([1u32, 2u32]).as_array(),
        [1u32, 2u32]
    );
    assert_eq!(
        Vec3S::const_from_array([1u32, 2u32, 3u32]).as_array(),
        [1u32, 2u32, 3u32]
    );
    assert_eq!(
        Vec4S::const_from_array([1u32, 2u32, 3u32, 4u32]).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(vec2s!(1u32, 2u32).as_array(), [1u32, 2u32]);
    assert_eq!(vec2s!(vec2s!(1u32, 2u32)).as_array(), [1u32, 2u32]);
    assert_eq!(vec3s!(1u32, 2u32, 3u32).as_array(), [1u32, 2u32, 3u32]);
    assert_eq!(
        vec3s!(1u32, vec2s!(2u32, 3u32)).as_array(),
        [1u32, 2u32, 3u32]
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );
    assert_eq!(
        vec4s!(1u32, vec2s!(2u32, 3u32), 4u32).as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );
    assert_eq!(
        vec4s!(
            1u32,
            vec2s!(2u32, 3u32),
            Vector::<1, u32, NonSimd>::from_array([4u32])
        )
        .as_array(),
        [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(vec2s!(1u32, 2u32).as_array_ref(), &[1u32, 2u32]);
    assert_eq!(vec3s!(1u32, 2u32, 3u32).as_array_ref(), &[1u32, 2u32, 3u32]);
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).as_array_ref(),
        &[1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(vec2s!(1u32, 2u32).as_mut_array(), &mut [1u32, 2u32]);
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).as_mut_array(),
        &mut [1u32, 2u32, 3u32]
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).as_mut_array(),
        &mut [1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(vec2s!(1u32, 2u32).as_simd(), vec2!(1u32, 2u32));
    assert_eq!(vec3s!(1u32, 2u32, 3u32).as_simd(), vec3!(1u32, 2u32, 3u32));
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).as_simd(),
        vec4!(1u32, 2u32, 3u32, 4u32)
    );

    assert_eq!(vec2s!(1u32, 2u32).as_nonsimd(), vec2s!(1u32, 2u32));
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).as_nonsimd(),
        vec3s!(1u32, 2u32, 3u32)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).as_nonsimd(),
        vec4s!(1u32, 2u32, 3u32, 4u32)
    );

    assert_eq!(vec2s!(1u32, 2u32).len(), 2);
    assert_eq!(vec3s!(1u32, 2u32, 3u32).len(), 3);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).len(), 4);

    assert_eq!(vec2s!(1u32, 2u32).is_simd(), false);
    assert_eq!(vec3s!(1u32, 2u32, 3u32).is_simd(), false);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).is_simd(), false);

    assert_eq!(vec2s!(1u32, 2u32).get(0), Some(1u32));
    assert_eq!(vec2s!(1u32, 2u32).get(1), Some(2u32));
    assert_eq!(vec2s!(1u32, 2u32).get(2), None);
    assert_eq!(vec2s!(1u32, 2u32).get(3), None);

    assert_eq!(vec3s!(1u32, 2u32, 3u32).get(0), Some(1u32));
    assert_eq!(vec3s!(1u32, 2u32, 3u32).get(1), Some(2u32));
    assert_eq!(vec3s!(1u32, 2u32, 3u32).get(2), Some(3u32));
    assert_eq!(vec3s!(1u32, 2u32, 3u32).get(3), None);
    assert_eq!(vec3s!(1u32, 2u32, 3u32).get(4), None);

    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get(0), Some(1u32));
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get(1), Some(2u32));
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get(2), Some(3u32));
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get(3), Some(4u32));
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get(4), None);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get(5), None);

    assert_eq!(vec2s!(1u32, 2u32).get_mut(0), Some(&mut 1u32));
    assert_eq!(vec2s!(1u32, 2u32).get_mut(1), Some(&mut 2u32));
    assert_eq!(vec2s!(1u32, 2u32).get_mut(2), None);
    assert_eq!(vec2s!(1u32, 2u32).get_mut(3), None);

    assert_eq!(vec3s!(1u32, 2u32, 3u32).get_mut(0), Some(&mut 1u32));
    assert_eq!(vec3s!(1u32, 2u32, 3u32).get_mut(1), Some(&mut 2u32));
    assert_eq!(vec3s!(1u32, 2u32, 3u32).get_mut(2), Some(&mut 3u32));
    assert_eq!(vec3s!(1u32, 2u32, 3u32).get_mut(3), None);
    assert_eq!(vec3s!(1u32, 2u32, 3u32).get_mut(4), None);

    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_mut(0), Some(&mut 1u32));
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_mut(1), Some(&mut 2u32));
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_mut(2), Some(&mut 3u32));
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_mut(3), Some(&mut 4u32));
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_mut(4), None);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_mut(5), None);

    unsafe {
        assert_eq!(vec2s!(1u32, 2u32).get_unchecked(0), 1u32);
        assert_eq!(vec2s!(1u32, 2u32).get_unchecked(1), 2u32);

        assert_eq!(vec3s!(1u32, 2u32, 3u32).get_unchecked(0), 1u32);
        assert_eq!(vec3s!(1u32, 2u32, 3u32).get_unchecked(1), 2u32);
        assert_eq!(vec3s!(1u32, 2u32, 3u32).get_unchecked(2), 3u32);

        assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_unchecked(0), 1u32);
        assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_unchecked(1), 2u32);
        assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_unchecked(2), 3u32);
        assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).get_unchecked(3), 4u32);

        assert_eq!(vec2s!(1u32, 2u32).get_unchecked_mut(0), &mut 1u32);
        assert_eq!(vec2s!(1u32, 2u32).get_unchecked_mut(1), &mut 2u32);

        assert_eq!(vec3s!(1u32, 2u32, 3u32).get_unchecked_mut(0), &mut 1u32);
        assert_eq!(vec3s!(1u32, 2u32, 3u32).get_unchecked_mut(1), &mut 2u32);
        assert_eq!(vec3s!(1u32, 2u32, 3u32).get_unchecked_mut(2), &mut 3u32);

        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).get_unchecked_mut(0),
            &mut 1u32
        );
        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).get_unchecked_mut(1),
            &mut 2u32
        );
        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).get_unchecked_mut(2),
            &mut 3u32
        );
        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).get_unchecked_mut(3),
            &mut 4u32
        );
    }

    assert_eq!(
        vec2s!(1u32, 2u32).iter().collect::<Vec<u32>>(),
        vec![1u32, 2u32]
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).iter().collect::<Vec<u32>>(),
        vec![1u32, 2u32, 3u32]
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).iter().collect::<Vec<u32>>(),
        vec![1u32, 2u32, 3u32, 4u32]
    );

    assert_eq!(
        vec2s!(1u32, 2u32).iter_mut().collect::<Vec<&mut u32>>(),
        vec![&mut 1u32, &mut 2u32]
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32)
            .iter_mut()
            .collect::<Vec<&mut u32>>(),
        vec![&mut 1u32, &mut 2u32, &mut 3u32]
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32)
            .iter_mut()
            .collect::<Vec<&mut u32>>(),
        vec![&mut 1u32, &mut 2u32, &mut 3u32, &mut 4u32]
    );

    assert_eq!(vec2s!(1u32, 2u32).map(|x| x == 2u32), vec2s!(false, true));
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).map(|x| x == 2u32),
        vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).map(|x| x == 2u32),
        vec4s!(false, true, false, false)
    );

    assert_eq!(
        vec2s!(1u32, 2u32).zip(vec2s!(2u32, 1u32)),
        vec2s!((1u32, 2u32), (2u32, 1u32))
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).zip(vec3s!(2u32, 3u32, 1u32)),
        vec3s!((1u32, 2u32), (2u32, 3u32), (3u32, 1u32))
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).zip(vec4s!(2u32, 3u32, 4u32, 1u32)),
        vec4s!((1u32, 2u32), (2u32, 3u32), (3u32, 4u32), (4u32, 1u32))
    );

    assert_eq!(vec2s!(1u32, 2u32).reverse(), vec2s!(2u32, 1u32));
    assert_eq!(vec3s!(1u32, 2u32, 3u32).reverse(), vec3s!(3u32, 2u32, 1u32));
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).reverse(),
        vec4s!(4u32, 3u32, 2u32, 1u32)
    );

    assert_eq!(
        vec2s!(1u32, 2u32).get_const_vec2::<0, 1>(),
        vec2s!(1u32, 2u32)
    );
    assert_eq!(
        vec2s!(1u32, 2u32).get_const_vec2::<1, 0>(),
        vec2s!(2u32, 1u32)
    );
    assert_eq!(
        vec2s!(1u32, 2u32).get_const_vec2::<1, 1>(),
        vec2s!(2u32, 2u32)
    );

    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec2::<0, 1>(),
        vec2s!(1u32, 2u32)
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec2::<0, 2>(),
        vec2s!(1u32, 3u32)
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec2::<2, 1>(),
        vec2s!(3u32, 2u32)
    );

    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec2::<0, 1>(),
        vec2s!(1u32, 2u32)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec2::<1, 3>(),
        vec2s!(2u32, 4u32)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec2::<3, 1>(),
        vec2s!(4u32, 2u32)
    );

    assert_eq!(
        vec2s!(1u32, 2u32).get_const_vec3::<0, 1, 1>(),
        vec3s!(1u32, 2u32, 2u32)
    );
    assert_eq!(
        vec2s!(1u32, 2u32).get_const_vec3::<1, 0, 1>(),
        vec3s!(2u32, 1u32, 2u32)
    );

    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec3::<0, 1, 2>(),
        vec3s!(1u32, 2u32, 3u32)
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec3::<1, 0, 2>(),
        vec3s!(2u32, 1u32, 3u32)
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec3::<2, 1, 0>(),
        vec3s!(3u32, 2u32, 1u32)
    );

    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec3::<0, 1, 2>(),
        vec3s!(1u32, 2u32, 3u32)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec3::<1, 0, 2>(),
        vec3s!(2u32, 1u32, 3u32)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec3::<2, 1, 0>(),
        vec3s!(3u32, 2u32, 1u32)
    );

    assert_eq!(
        vec2s!(1u32, 2u32).get_const_vec4::<0, 1, 1, 0>(),
        vec4s!(1u32, 2u32, 2u32, 1u32)
    );
    assert_eq!(
        vec2s!(1u32, 2u32).get_const_vec4::<1, 0, 1, 0>(),
        vec4s!(2u32, 1u32, 2u32, 1u32)
    );
    assert_eq!(
        vec2s!(1u32, 2u32).get_const_vec4::<1, 1, 0, 0>(),
        vec4s!(2u32, 2u32, 1u32, 1u32)
    );

    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec4::<0, 1, 2, 0>(),
        vec4s!(1u32, 2u32, 3u32, 1u32)
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec4::<1, 0, 2, 0>(),
        vec4s!(2u32, 1u32, 3u32, 1u32)
    );
    assert_eq!(
        vec3s!(1u32, 2u32, 3u32).get_const_vec4::<2, 1, 0, 0>(),
        vec4s!(3u32, 2u32, 1u32, 1u32)
    );

    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec4::<0, 1, 2, 3>(),
        vec4s!(1u32, 2u32, 3u32, 4u32)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec4::<1, 0, 2, 3>(),
        vec4s!(2u32, 1u32, 3u32, 4u32)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec4::<2, 1, 0, 3>(),
        vec4s!(3u32, 2u32, 1u32, 4u32)
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32).get_const_vec4::<3, 1, 2, 0>(),
        vec4s!(4u32, 2u32, 3u32, 1u32)
    );

    assert_eq!(vec2s!(1u32, 2u32)[0], 1u32);
    assert_eq!(vec2s!(1u32, 2u32)[1], 2u32);

    assert_eq!(vec3s!(1u32, 2u32, 3u32)[0], 1u32);
    assert_eq!(vec3s!(1u32, 2u32, 3u32)[1], 2u32);
    assert_eq!(vec3s!(1u32, 2u32, 3u32)[2], 3u32);

    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32)[0], 1u32);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32)[1], 2u32);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32)[2], 3u32);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32)[3], 4u32);

    assert_eq!(&mut vec2s!(1u32, 2u32)[0], &mut 1u32);
    assert_eq!(&mut vec2s!(1u32, 2u32)[1], &mut 2u32);

    assert_eq!(&mut vec3s!(1u32, 2u32, 3u32)[0], &mut 1u32);
    assert_eq!(&mut vec3s!(1u32, 2u32, 3u32)[1], &mut 2u32);
    assert_eq!(&mut vec3s!(1u32, 2u32, 3u32)[2], &mut 3u32);

    assert_eq!(&mut vec4s!(1u32, 2u32, 3u32, 4u32)[0], &mut 1u32);
    assert_eq!(&mut vec4s!(1u32, 2u32, 3u32, 4u32)[1], &mut 2u32);
    assert_eq!(&mut vec4s!(1u32, 2u32, 3u32, 4u32)[2], &mut 3u32);
    assert_eq!(&mut vec4s!(1u32, 2u32, 3u32, 4u32)[3], &mut 4u32);

    assert_eq!(vec2s!(1u32, 2u32) == vec2s!(1u32, 2u32), true);
    assert_eq!(vec2s!(1u32, 2u32) == vec2s!(2u32, 1u32), false);
    assert_eq!(vec2s!(1u32, 2u32) == vec2s!(2u32, 2u32), false);

    assert_eq!(vec3s!(1u32, 2u32, 3u32) == vec3s!(1u32, 2u32, 3u32), true);
    assert_eq!(vec3s!(1u32, 2u32, 3u32) == vec3s!(4u32, 3u32, 2u32), false);
    assert_eq!(vec3s!(1u32, 2u32, 3u32) == vec3s!(2u32, 2u32, 3u32), false);

    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32) == vec4s!(1u32, 2u32, 3u32, 4u32),
        true
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32) == vec4s!(4u32, 3u32, 2u32, 1u32),
        false
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32) == vec4s!(2u32, 2u32, 2u32, 4u32),
        false
    );

    assert_eq!(vec2s!(1u32, 2u32) != vec2s!(1u32, 2u32), false);
    assert_eq!(vec2s!(1u32, 2u32) != vec2s!(2u32, 1u32), true);
    assert_eq!(vec2s!(1u32, 2u32) != vec2s!(2u32, 2u32), true);

    assert_eq!(vec3s!(1u32, 2u32, 3u32) != vec3s!(1u32, 2u32, 3u32), false);
    assert_eq!(vec3s!(1u32, 2u32, 3u32) != vec3s!(4u32, 3u32, 2u32), true);
    assert_eq!(vec3s!(1u32, 2u32, 3u32) != vec3s!(2u32, 2u32, 3u32), true);

    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32) != vec4s!(1u32, 2u32, 3u32, 4u32),
        false
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32) != vec4s!(4u32, 3u32, 2u32, 1u32),
        true
    );
    assert_eq!(
        vec4s!(1u32, 2u32, 3u32, 4u32) != vec4s!(2u32, 2u32, 2u32, 4u32),
        true
    );

    assert_eq!(vec2s!(1u32, 2u32).to_string(), "(1, 2)");
    assert_eq!(vec3s!(1u32, 2u32, 3u32).to_string(), "(1, 2, 3)");
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).to_string(), "(1, 2, 3, 4)");

    assert_eq!(format!("{:?}", vec2s!(1u32, 2u32)), "(1, 2)");
    assert_eq!(format!("{:?}", vec3s!(1u32, 2u32, 3u32)), "(1, 2, 3)");
    assert_eq!(
        format!("{:?}", vec4s!(1u32, 2u32, 3u32, 4u32)),
        "(1, 2, 3, 4)"
    );

    assert_eq!(vec2s!(1u32, 2u32).x, 1u32);
    assert_eq!(vec2s!(1u32, 2u32).y, 2u32);

    assert_eq!(vec3s!(1u32, 2u32, 3u32).x, 1u32);
    assert_eq!(vec3s!(1u32, 2u32, 3u32).y, 2u32);
    assert_eq!(vec3s!(1u32, 2u32, 3u32).z, 3u32);

    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).x, 1u32);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).y, 2u32);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).z, 3u32);
    assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).w, 4u32);

    assert_eq!(&mut vec2s!(1u32, 2u32).x, &mut 1u32);
    assert_eq!(&mut vec2s!(1u32, 2u32).y, &mut 2u32);

    assert_eq!(&mut vec3s!(1u32, 2u32, 3u32).x, &mut 1u32);
    assert_eq!(&mut vec3s!(1u32, 2u32, 3u32).y, &mut 2u32);
    assert_eq!(&mut vec3s!(1u32, 2u32, 3u32).z, &mut 3u32);

    assert_eq!(&mut vec4s!(1u32, 2u32, 3u32, 4u32).x, &mut 1u32);
    assert_eq!(&mut vec4s!(1u32, 2u32, 3u32, 4u32).y, &mut 2u32);
    assert_eq!(&mut vec4s!(1u32, 2u32, 3u32, 4u32).z, &mut 3u32);
    assert_eq!(&mut vec4s!(1u32, 2u32, 3u32, 4u32).w, &mut 4u32);

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2s!(1u32, 2u32).xy(), vec2s!(1u32, 2u32));
        assert_eq!(vec2s!(1u32, 2u32).yx(), vec2s!(2u32, 1u32));
        assert_eq!(vec2s!(1u32, 2u32).yy(), vec2s!(2u32, 2u32));

        assert_eq!(vec3s!(1u32, 2u32, 3u32).xy(), vec2s!(1u32, 2u32));
        assert_eq!(vec3s!(1u32, 2u32, 3u32).xz(), vec2s!(1u32, 3u32));
        assert_eq!(vec3s!(1u32, 2u32, 3u32).zy(), vec2s!(3u32, 2u32));

        assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).xy(), vec2s!(1u32, 2u32));
        assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).yw(), vec2s!(2u32, 4u32));
        assert_eq!(vec4s!(1u32, 2u32, 3u32, 4u32).wy(), vec2s!(4u32, 2u32));

        assert_eq!(vec2s!(1u32, 2u32).xyy(), vec3s!(1u32, 2u32, 2u32));
        assert_eq!(vec2s!(1u32, 2u32).yxy(), vec3s!(2u32, 1u32, 2u32));

        assert_eq!(vec3s!(1u32, 2u32, 3u32).xyz(), vec3s!(1u32, 2u32, 3u32));
        assert_eq!(vec3s!(1u32, 2u32, 3u32).yxz(), vec3s!(2u32, 1u32, 3u32));
        assert_eq!(vec3s!(1u32, 2u32, 3u32).zyx(), vec3s!(3u32, 2u32, 1u32));

        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).xyz(),
            vec3s!(1u32, 2u32, 3u32)
        );
        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).yxz(),
            vec3s!(2u32, 1u32, 3u32)
        );
        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).zyx(),
            vec3s!(3u32, 2u32, 1u32)
        );

        assert_eq!(vec2s!(1u32, 2u32).xyyx(), vec4s!(1u32, 2u32, 2u32, 1u32));
        assert_eq!(vec2s!(1u32, 2u32).yxyx(), vec4s!(2u32, 1u32, 2u32, 1u32));
        assert_eq!(vec2s!(1u32, 2u32).yyxx(), vec4s!(2u32, 2u32, 1u32, 1u32));

        assert_eq!(
            vec3s!(1u32, 2u32, 3u32).xyzx(),
            vec4s!(1u32, 2u32, 3u32, 1u32)
        );
        assert_eq!(
            vec3s!(1u32, 2u32, 3u32).yxzx(),
            vec4s!(2u32, 1u32, 3u32, 1u32)
        );
        assert_eq!(
            vec3s!(1u32, 2u32, 3u32).zyxx(),
            vec4s!(3u32, 2u32, 1u32, 1u32)
        );

        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).xyzw(),
            vec4s!(1u32, 2u32, 3u32, 4u32)
        );
        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).yxzw(),
            vec4s!(2u32, 1u32, 3u32, 4u32)
        );
        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).zyxw(),
            vec4s!(3u32, 2u32, 1u32, 4u32)
        );
        assert_eq!(
            vec4s!(1u32, 2u32, 3u32, 4u32).wyzx(),
            vec4s!(4u32, 2u32, 3u32, 1u32)
        );
    }
}

#[test]
#[should_panic]
fn test_vec2s_index_panic() {
    vec2!(1u32, 2u32)[2];
}

#[test]
#[should_panic]
fn test_vec3s_index_panic() {
    vec3!(1u32, 2u32, 3u32)[3];
}

#[test]
#[should_panic]
fn test_vec4s_index_panic() {
    vec4!(1u32, 2u32, 3u32, 4u32)[4];
}

#[test]
fn test_simd_int_fns() {
    assert_eq!(!vec2!(5u32, 7u32), vec2!(!5u32, !7u32));
    assert_eq!(!vec3!(5u32, 7u32, 9u32), vec3!(!5u32, !7u32, !9u32));
    assert_eq!(
        !vec4!(5u32, 7u32, 9u32, 11u32),
        vec4!(!5u32, !7u32, !9u32, !11u32)
    );

    assert_eq!(
        vec2!(5u32, 7u32) + vec2!(9u32, 11u32),
        vec2!(5u32 + 9u32, 7u32 + 11u32)
    );
    assert_eq!(
        vec3!(5u32, 7u32, 9u32) + vec3!(11u32, 13u32, 15u32),
        vec3!(5u32 + 11u32, 7u32 + 13u32, 9u32 + 15u32)
    );
    assert_eq!(
        vec4!(5u32, 7u32, 9u32, 11u32) + vec4!(13u32, 15u32, 17u32, 19u32),
        vec4!(5u32 + 13u32, 7u32 + 15u32, 9u32 + 17u32, 11u32 + 19u32)
    );

    assert_eq!(
        vec2!(9u32, 11u32) - vec2!(5u32, 7u32),
        vec2!(9u32 - 5u32, 11u32 - 7u32)
    );
    assert_eq!(
        vec3!(9u32, 11u32, 13u32) - vec3!(5u32, 7u32, 9u32),
        vec3!(9u32 - 5u32, 11u32 - 7u32, 13u32 - 9u32)
    );
    assert_eq!(
        vec4!(9u32, 11u32, 13u32, 15u32) - vec4!(5u32, 7u32, 9u32, 11u32),
        vec4!(9u32 - 5u32, 11u32 - 7u32, 13u32 - 9u32, 15u32 - 11u32)
    );

    assert_eq!(
        vec2!(2u32, 4u32) * vec2!(3u32, 5u32),
        vec2!(2u32 * 3u32, 4u32 * 5u32)
    );
    assert_eq!(
        vec3!(2u32, 4u32, 6u32) * vec3!(3u32, 5u32, 7u32),
        vec3!(2u32 * 3u32, 4u32 * 5u32, 6u32 * 7u32)
    );
    assert_eq!(
        vec4!(2u32, 4u32, 6u32, 8u32) * vec4!(3u32, 5u32, 7u32, 9u32),
        vec4!(2u32 * 3u32, 4u32 * 5u32, 6u32 * 7u32, 8u32 * 9u32)
    );

    assert_eq!(
        vec2!(21u32, 23u32) / vec2!(4u32, 50u32),
        vec2!(21u32 / 4u32, 23u32 / 50u32)
    );
    assert_eq!(
        vec3!(21u32, 23u32, 25u32) / vec3!(4u32, 50u32, 3u32),
        vec3!(21u32 / 4u32, 23u32 / 50u32, 25u32 / 3u32)
    );
    assert_eq!(
        vec4!(21u32, 23u32, 25u32, 27u32) / vec4!(4u32, 50u32, 3u32, 10u32),
        vec4!(21u32 / 4u32, 23u32 / 50u32, 25u32 / 3u32, 27u32 / 10u32)
    );

    assert_eq!(
        vec2!(16u32, 19u32) / vec2!(5u32, 5u32),
        vec2!(16u32 / 5u32, 19u32 / 5u32)
    );
    assert_eq!(
        vec3!(16u32, 19u32, 22u32) / vec3!(5u32, 5u32, 5u32),
        vec3!(16u32 / 5u32, 19u32 / 5u32, 22u32 / 5u32)
    );
    assert_eq!(
        vec4!(16u32, 19u32, 22u32, 25u32) / vec4!(5u32, 5u32, 5u32, 5u32),
        vec4!(16u32 / 5u32, 19u32 / 5u32, 22u32 / 5u32, 25u32 / 5u32)
    );

    assert_eq!(
        vec2!(21u32, 23u32) % vec2!(4u32, 50u32),
        vec2!(21u32 % 4u32, 23u32 % 50u32)
    );
    assert_eq!(
        vec3!(21u32, 23u32, 25u32) % vec3!(4u32, 50u32, 3u32),
        vec3!(21u32 % 4u32, 23u32 % 50u32, 25u32 % 3u32)
    );
    assert_eq!(
        vec4!(21u32, 23u32, 25u32, 27u32) % vec4!(4u32, 50u32, 3u32, 10u32),
        vec4!(21u32 % 4u32, 23u32 % 50u32, 25u32 % 3u32, 27u32 % 10u32)
    );

    assert_eq!(
        vec2!(21u32, 23u32) & vec2!(4u32, 50u32),
        vec2!(21u32 & 4u32, 23u32 & 50u32)
    );
    assert_eq!(
        vec3!(21u32, 23u32, 25u32) & vec3!(4u32, 50u32, 3u32),
        vec3!(21u32 & 4u32, 23u32 & 50u32, 25u32 & 3u32)
    );
    assert_eq!(
        vec4!(21u32, 23u32, 25u32, 27u32) & vec4!(4u32, 50u32, 3u32, 10u32),
        vec4!(21u32 & 4u32, 23u32 & 50u32, 25u32 & 3u32, 27u32 & 10u32)
    );

    assert_eq!(
        vec2!(21u32, 23u32) | vec2!(4u32, 50u32),
        vec2!(21u32 | 4u32, 23u32 | 50u32)
    );
    assert_eq!(
        vec3!(21u32, 23u32, 25u32) | vec3!(4u32, 50u32, 3u32),
        vec3!(21u32 | 4u32, 23u32 | 50u32, 25u32 | 3u32)
    );
    assert_eq!(
        vec4!(21u32, 23u32, 25u32, 27u32) | vec4!(4u32, 50u32, 3u32, 10u32),
        vec4!(21u32 | 4u32, 23u32 | 50u32, 25u32 | 3u32, 27u32 | 10u32)
    );

    assert_eq!(
        vec2!(21u32, 23u32) ^ vec2!(4u32, 50u32),
        vec2!(21u32 ^ 4u32, 23u32 ^ 50u32)
    );
    assert_eq!(
        vec3!(21u32, 23u32, 25u32) ^ vec3!(4u32, 50u32, 3u32),
        vec3!(21u32 ^ 4u32, 23u32 ^ 50u32, 25u32 ^ 3u32)
    );
    assert_eq!(
        vec4!(21u32, 23u32, 25u32, 27u32) ^ vec4!(4u32, 50u32, 3u32, 10u32),
        vec4!(21u32 ^ 4u32, 23u32 ^ 50u32, 25u32 ^ 3u32, 27u32 ^ 10u32)
    );

    assert_eq!(Vec2::ZERO, vec2!(0u32, 0u32));
    assert_eq!(Vec3::ZERO, vec3!(0u32, 0u32, 0u32));
    assert_eq!(Vec4::ZERO, vec4!(0u32, 0u32, 0u32, 0u32));

    assert_eq!(Vec2::ONE, vec2!(1u32, 1u32));
    assert_eq!(Vec3::ONE, vec3!(1u32, 1u32, 1u32));
    assert_eq!(Vec4::ONE, vec4!(1u32, 1u32, 1u32, 1u32));

    assert_eq!(Vec2::X, vec2!(1u32, 0u32));
    assert_eq!(Vec3::Y, vec3!(0u32, 1u32, 0u32));
    assert_eq!(Vec4::Z, vec4!(0u32, 0u32, 1u32, 0u32));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2::RIGHT, Vec2::X);
        assert_eq!(Vec3::RIGHT, Vec3::X);
        assert_eq!(Vec4::RIGHT, Vec4::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2::LEFT, Vec2::X);
        assert_eq!(Vec3::LEFT, Vec3::X);
        assert_eq!(Vec4::LEFT, Vec4::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3::BACKWARDS, Vec3::Z);
        assert_eq!(Vec4::BACKWARDS, Vec4::Z);
    }
}

macro_rules! test_simd_binop_edgecase {
    ( $(#[$attr:meta])* $vec2_fn:ident, $vec3_fn:ident, $vec4_fn:ident: $op:tt for $lhs:expr, $rhs:expr) => {
        #[test]
        $(#[$attr])*
        fn $vec2_fn() {
            assert_eq!(vec2!(1u32, $lhs) $op vec2!(1u32, $rhs), vec2!(1u32 $op 1u32, $lhs $op $rhs));
        }

        #[test]
        $(#[$attr])*
        fn $vec3_fn() {
            assert_eq!(vec3!(1u32, $lhs, 1u32) $op vec3!(1u32, $rhs, 1u32), vec3!(1u32 $op 1u32, $lhs $op $rhs, 1u32 $op 1u32));
        }

        #[test]
        $(#[$attr])*
        fn $vec4_fn() {
            assert_eq!(vec4!(1u32, $lhs, 1u32, 1u32) $op vec4!(1u32, $rhs, 1u32, 1u32), vec4!(1u32 $op 1u32, $lhs $op $rhs, 1u32 $op 1u32, 1u32 $op 1u32));
        }
    }
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2_add_overflow,
    test_uvec3_add_overflow,
    test_uvec4_add_overflow:

    + for u32::MAX, 3
}
test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2_add_exact_overflow,
    test_uvec3_add_exact_overflow,
    test_uvec4_add_exact_overflow:

    + for u32::MAX, 1
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2_sub_overflow,
    test_uvec3_sub_overflow,
    test_uvec4_sub_overflow:

    - for u32::MIN, 3
}
test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2_sub_exact_overflow,
    test_uvec3_sub_exact_overflow,
    test_uvec4_sub_exact_overflow:

    - for u32::MIN, 1
}

test_simd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2_mul_overflow,
    test_uvec3_mul_overflow,
    test_uvec4_mul_overflow:

    * for u32::MAX, 3
}

test_simd_binop_edgecase! {
    #[should_panic]
    test_uvec2_div_by_zero,
    test_uvec3_div_by_zero,
    test_uvec4_div_by_zero:

    / for 5u32, 0u32
}

test_simd_binop_edgecase! {
    #[should_panic]
    test_uvec2_rem_by_zero,
    test_uvec3_rem_by_zero,
    test_uvec4_rem_by_zero:

    % for 5u32, 0u32
}

#[test]
fn test_nonsimd_int_fns() {
    assert_eq!(!vec2s!(5u32, 7u32), vec2s!(!5u32, !7u32));
    assert_eq!(!vec3s!(5u32, 7u32, 9u32), vec3s!(!5u32, !7u32, !9u32));
    assert_eq!(
        !vec4s!(5u32, 7u32, 9u32, 11u32),
        vec4s!(!5u32, !7u32, !9u32, !11u32)
    );

    assert_eq!(
        vec2s!(5u32, 7u32) + vec2s!(9u32, 11u32),
        vec2s!(5u32 + 9u32, 7u32 + 11u32)
    );
    assert_eq!(
        vec3s!(5u32, 7u32, 9u32) + vec3s!(11u32, 13u32, 15u32),
        vec3s!(5u32 + 11u32, 7u32 + 13u32, 9u32 + 15u32)
    );
    assert_eq!(
        vec4s!(5u32, 7u32, 9u32, 11u32) + vec4s!(13u32, 15u32, 17u32, 19u32),
        vec4s!(5u32 + 13u32, 7u32 + 15u32, 9u32 + 17u32, 11u32 + 19u32)
    );

    assert_eq!(
        vec2s!(9u32, 11u32) - vec2s!(5u32, 7u32),
        vec2s!(9u32 - 5u32, 11u32 - 7u32)
    );
    assert_eq!(
        vec3s!(9u32, 11u32, 13u32) - vec3s!(5u32, 7u32, 9u32),
        vec3s!(9u32 - 5u32, 11u32 - 7u32, 13u32 - 9u32)
    );
    assert_eq!(
        vec4s!(9u32, 11u32, 13u32, 15u32) - vec4s!(5u32, 7u32, 9u32, 11u32),
        vec4s!(9u32 - 5u32, 11u32 - 7u32, 13u32 - 9u32, 15u32 - 11u32)
    );

    assert_eq!(
        vec2s!(2u32, 4u32) * vec2s!(3u32, 5u32),
        vec2s!(2u32 * 3u32, 4u32 * 5u32)
    );
    assert_eq!(
        vec3s!(2u32, 4u32, 6u32) * vec3s!(3u32, 5u32, 7u32),
        vec3s!(2u32 * 3u32, 4u32 * 5u32, 6u32 * 7u32)
    );
    assert_eq!(
        vec4s!(2u32, 4u32, 6u32, 8u32) * vec4s!(3u32, 5u32, 7u32, 9u32),
        vec4s!(2u32 * 3u32, 4u32 * 5u32, 6u32 * 7u32, 8u32 * 9u32)
    );

    assert_eq!(
        vec2s!(21u32, 23u32) / vec2s!(4u32, 50u32),
        vec2s!(21u32 / 4u32, 23u32 / 50u32)
    );
    assert_eq!(
        vec3s!(21u32, 23u32, 25u32) / vec3s!(4u32, 50u32, 3u32),
        vec3s!(21u32 / 4u32, 23u32 / 50u32, 25u32 / 3u32)
    );
    assert_eq!(
        vec4s!(21u32, 23u32, 25u32, 27u32) / vec4s!(4u32, 50u32, 3u32, 10u32),
        vec4s!(21u32 / 4u32, 23u32 / 50u32, 25u32 / 3u32, 27u32 / 10u32)
    );

    assert_eq!(
        vec2s!(16u32, 19u32) / vec2s!(5u32, 5u32),
        vec2s!(16u32 / 5u32, 19u32 / 5u32)
    );
    assert_eq!(
        vec3s!(16u32, 19u32, 22u32) / vec3s!(5u32, 5u32, 5u32),
        vec3s!(16u32 / 5u32, 19u32 / 5u32, 22u32 / 5u32)
    );
    assert_eq!(
        vec4s!(16u32, 19u32, 22u32, 25u32) / vec4s!(5u32, 5u32, 5u32, 5u32),
        vec4s!(16u32 / 5u32, 19u32 / 5u32, 22u32 / 5u32, 25u32 / 5u32)
    );

    assert_eq!(
        vec2s!(21u32, 23u32) % vec2s!(4u32, 50u32),
        vec2s!(21u32 % 4u32, 23u32 % 50u32)
    );
    assert_eq!(
        vec3s!(21u32, 23u32, 25u32) % vec3s!(4u32, 50u32, 3u32),
        vec3s!(21u32 % 4u32, 23u32 % 50u32, 25u32 % 3u32)
    );
    assert_eq!(
        vec4s!(21u32, 23u32, 25u32, 27u32) % vec4s!(4u32, 50u32, 3u32, 10u32),
        vec4s!(21u32 % 4u32, 23u32 % 50u32, 25u32 % 3u32, 27u32 % 10u32)
    );

    assert_eq!(
        vec2s!(21u32, 23u32) & vec2s!(4u32, 50u32),
        vec2s!(21u32 & 4u32, 23u32 & 50u32)
    );
    assert_eq!(
        vec3s!(21u32, 23u32, 25u32) & vec3s!(4u32, 50u32, 3u32),
        vec3s!(21u32 & 4u32, 23u32 & 50u32, 25u32 & 3u32)
    );
    assert_eq!(
        vec4s!(21u32, 23u32, 25u32, 27u32) & vec4s!(4u32, 50u32, 3u32, 10u32),
        vec4s!(21u32 & 4u32, 23u32 & 50u32, 25u32 & 3u32, 27u32 & 10u32)
    );

    assert_eq!(
        vec2s!(21u32, 23u32) | vec2s!(4u32, 50u32),
        vec2s!(21u32 | 4u32, 23u32 | 50u32)
    );
    assert_eq!(
        vec3s!(21u32, 23u32, 25u32) | vec3s!(4u32, 50u32, 3u32),
        vec3s!(21u32 | 4u32, 23u32 | 50u32, 25u32 | 3u32)
    );
    assert_eq!(
        vec4s!(21u32, 23u32, 25u32, 27u32) | vec4s!(4u32, 50u32, 3u32, 10u32),
        vec4s!(21u32 | 4u32, 23u32 | 50u32, 25u32 | 3u32, 27u32 | 10u32)
    );

    assert_eq!(
        vec2s!(21u32, 23u32) ^ vec2s!(4u32, 50u32),
        vec2s!(21u32 ^ 4u32, 23u32 ^ 50u32)
    );
    assert_eq!(
        vec3s!(21u32, 23u32, 25u32) ^ vec3s!(4u32, 50u32, 3u32),
        vec3s!(21u32 ^ 4u32, 23u32 ^ 50u32, 25u32 ^ 3u32)
    );
    assert_eq!(
        vec4s!(21u32, 23u32, 25u32, 27u32) ^ vec4s!(4u32, 50u32, 3u32, 10u32),
        vec4s!(21u32 ^ 4u32, 23u32 ^ 50u32, 25u32 ^ 3u32, 27u32 ^ 10u32)
    );

    assert_eq!(Vec2S::ZERO, vec2s!(0u32, 0u32));
    assert_eq!(Vec3S::ZERO, vec3s!(0u32, 0u32, 0u32));
    assert_eq!(Vec4S::ZERO, vec4s!(0u32, 0u32, 0u32, 0u32));

    assert_eq!(Vec2S::ONE, vec2s!(1u32, 1u32));
    assert_eq!(Vec3S::ONE, vec3s!(1u32, 1u32, 1u32));
    assert_eq!(Vec4S::ONE, vec4s!(1u32, 1u32, 1u32, 1u32));

    assert_eq!(Vec2S::X, vec2s!(1u32, 0u32));
    assert_eq!(Vec3S::Y, vec3s!(0u32, 1u32, 0u32));
    assert_eq!(Vec4S::Z, vec4s!(0u32, 0u32, 1u32, 0u32));

    #[cfg(feature = "right")]
    {
        use ggmath::right::*;

        assert_eq!(Vec2S::RIGHT, Vec2S::X);
        assert_eq!(Vec3S::RIGHT, Vec3S::X);
        assert_eq!(Vec4S::RIGHT, Vec4S::X);
    }

    #[cfg(feature = "left")]
    {
        use ggmath::left::*;

        assert_eq!(Vec2S::LEFT, Vec2S::X);
        assert_eq!(Vec3S::LEFT, Vec3S::X);
        assert_eq!(Vec4S::LEFT, Vec4S::X);
    }

    #[cfg(feature = "backwards")]
    {
        use ggmath::backwards::*;

        assert_eq!(Vec3S::BACKWARDS, Vec3S::Z);
        assert_eq!(Vec4S::BACKWARDS, Vec4S::Z);
    }
}

macro_rules! test_nonsimd_binop_edgecase {
    ( $(#[$attr:meta])* $vec2_fn:ident, $vec3_fn:ident, $vec4_fn:ident: $op:tt for $lhs:expr, $rhs:expr) => {
        #[test]
        $(#[$attr])*
        fn $vec2_fn() {
            assert_eq!(vec2s!(1u32, $lhs) $op vec2s!(1u32, $rhs), vec2s!(1u32 $op 1u32, $lhs $op $rhs));
        }

        #[test]
        $(#[$attr])*
        fn $vec3_fn() {
            assert_eq!(vec3s!(1u32, $lhs, 1u32) $op vec3s!(1u32, $rhs, 1u32), vec3s!(1u32 $op 1u32, $lhs $op $rhs, 1u32 $op 1u32));
        }

        #[test]
        $(#[$attr])*
        fn $vec4_fn() {
            assert_eq!(vec4s!(1u32, $lhs, 1u32, 1u32) $op vec4s!(1u32, $rhs, 1u32, 1u32), vec4s!(1u32 $op 1u32, $lhs $op $rhs, 1u32 $op 1u32, 1u32 $op 1u32));
        }
    }
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2s_add_overflow,
    test_uvec3s_add_overflow,
    test_uvec4s_add_overflow:

    + for u32::MAX, 3
}
test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2s_add_exact_overflow,
    test_uvec3s_add_exact_overflow,
    test_uvec4s_add_exact_overflow:

    + for u32::MAX, 1
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2s_sub_overflow,
    test_uvec3s_sub_overflow,
    test_uvec4s_sub_overflow:

    - for u32::MIN, 3
}
test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2s_sub_exact_overflow,
    test_uvec3s_sub_exact_overflow,
    test_uvec4s_sub_exact_overflow:

    - for u32::MIN, 1
}

test_nonsimd_binop_edgecase! {
    #[cfg_attr(debug_assertions, should_panic)]
    test_uvec2s_mul_overflow,
    test_uvec3s_mul_overflow,
    test_uvec4s_mul_overflow:

    * for u32::MAX, 3
}

test_nonsimd_binop_edgecase! {
    #[should_panic]
    test_uvec2s_div_by_zero,
    test_uvec3s_div_by_zero,
    test_uvec4s_div_by_zero:

    / for 5u32, 0u32
}

test_nonsimd_binop_edgecase! {
    #[should_panic]
    test_uvec2s_rem_by_zero,
    test_uvec3s_rem_by_zero,
    test_uvec4s_rem_by_zero:

    % for 5u32, 0u32
}
