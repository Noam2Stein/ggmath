// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_simd_primitive_fns() {
    assert_eq!(Vec2::from_array(['a', 'b']).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3::from_array(['a', 'b', 'c']).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4::from_array(['a', 'b', 'c', 'd']).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(Vec2::from_fn(|i| ['a', 'b'][i]).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3::from_fn(|i| ['a', 'b', 'c'][i]).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4::from_fn(|i| ['a', 'b', 'c', 'd'][i]).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(Vec2::const_from_array(['a', 'b']).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3::const_from_array(['a', 'b', 'c']).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4::const_from_array(['a', 'b', 'c', 'd']).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2!('a', 'b').as_array(), ['a', 'b']);
    assert_eq!(vec2!(vec2!('a', 'b')).as_array(), ['a', 'b']);
    assert_eq!(vec3!('a', 'b', 'c').as_array(), ['a', 'b', 'c']);
    assert_eq!(vec3!('a', vec2!('b', 'c')).as_array(), ['a', 'b', 'c']);
    assert_eq!(vec4!('a', 'b', 'c', 'd').as_array(), ['a', 'b', 'c', 'd']);
    assert_eq!(
        vec4!('a', vec2!('b', 'c'), 'd').as_array(),
        ['a', 'b', 'c', 'd']
    );
    assert_eq!(
        vec4!(
            'a',
            vec2!('b', 'c'),
            Vector::<1, char, Simd>::from_array(['d'])
        )
        .as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2!('a').as_array(), ['a'; 2]);
    assert_eq!(vec3!('a').as_array(), ['a'; 3]);
    assert_eq!(vec4!('a').as_array(), ['a'; 4]);

    assert_eq!(vec2!('a', 'b').as_array_ref(), &['a', 'b']);
    assert_eq!(vec3!('a', 'b', 'c').as_array_ref(), &['a', 'b', 'c']);
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').as_array_ref(),
        &['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2!('a', 'b').as_mut_array(), &mut ['a', 'b']);
    assert_eq!(vec3!('a', 'b', 'c').as_mut_array(), &mut ['a', 'b', 'c']);
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').as_mut_array(),
        &mut ['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2!('a', 'b').as_simd(), vec2!('a', 'b'));
    assert_eq!(vec3!('a', 'b', 'c').as_simd(), vec3!('a', 'b', 'c'));
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').as_simd(),
        vec4!('a', 'b', 'c', 'd')
    );

    assert_eq!(vec2!('a', 'b').as_nonsimd(), vec2s!('a', 'b'));
    assert_eq!(vec3!('a', 'b', 'c').as_nonsimd(), vec3s!('a', 'b', 'c'));
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').as_nonsimd(),
        vec4s!('a', 'b', 'c', 'd')
    );

    assert_eq!(vec2!('a', 'b').len(), 2);
    assert_eq!(vec3!('a', 'b', 'c').len(), 3);
    assert_eq!(vec4!('a', 'b', 'c', 'd').len(), 4);

    assert_eq!(vec2!('a', 'b').is_simd(), true);
    assert_eq!(vec3!('a', 'b', 'c').is_simd(), true);
    assert_eq!(vec4!('a', 'b', 'c', 'd').is_simd(), true);

    assert_eq!(vec2!('a', 'b').get(0), Some('a'));
    assert_eq!(vec2!('a', 'b').get(1), Some('b'));
    assert_eq!(vec2!('a', 'b').get(2), None);
    assert_eq!(vec2!('a', 'b').get(3), None);

    assert_eq!(vec3!('a', 'b', 'c').get(0), Some('a'));
    assert_eq!(vec3!('a', 'b', 'c').get(1), Some('b'));
    assert_eq!(vec3!('a', 'b', 'c').get(2), Some('c'));
    assert_eq!(vec3!('a', 'b', 'c').get(3), None);
    assert_eq!(vec3!('a', 'b', 'c').get(4), None);

    assert_eq!(vec4!('a', 'b', 'c', 'd').get(0), Some('a'));
    assert_eq!(vec4!('a', 'b', 'c', 'd').get(1), Some('b'));
    assert_eq!(vec4!('a', 'b', 'c', 'd').get(2), Some('c'));
    assert_eq!(vec4!('a', 'b', 'c', 'd').get(3), Some('d'));
    assert_eq!(vec4!('a', 'b', 'c', 'd').get(4), None);
    assert_eq!(vec4!('a', 'b', 'c', 'd').get(5), None);

    assert_eq!(vec2!('a', 'b').get_mut(0), Some(&mut 'a'));
    assert_eq!(vec2!('a', 'b').get_mut(1), Some(&mut 'b'));
    assert_eq!(vec2!('a', 'b').get_mut(2), None);
    assert_eq!(vec2!('a', 'b').get_mut(3), None);

    assert_eq!(vec3!('a', 'b', 'c').get_mut(0), Some(&mut 'a'));
    assert_eq!(vec3!('a', 'b', 'c').get_mut(1), Some(&mut 'b'));
    assert_eq!(vec3!('a', 'b', 'c').get_mut(2), Some(&mut 'c'));
    assert_eq!(vec3!('a', 'b', 'c').get_mut(3), None);
    assert_eq!(vec3!('a', 'b', 'c').get_mut(4), None);

    assert_eq!(vec4!('a', 'b', 'c', 'd').get_mut(0), Some(&mut 'a'));
    assert_eq!(vec4!('a', 'b', 'c', 'd').get_mut(1), Some(&mut 'b'));
    assert_eq!(vec4!('a', 'b', 'c', 'd').get_mut(2), Some(&mut 'c'));
    assert_eq!(vec4!('a', 'b', 'c', 'd').get_mut(3), Some(&mut 'd'));
    assert_eq!(vec4!('a', 'b', 'c', 'd').get_mut(4), None);
    assert_eq!(vec4!('a', 'b', 'c', 'd').get_mut(5), None);

    unsafe {
        assert_eq!(vec2!('a', 'b').get_unchecked(0), 'a');
        assert_eq!(vec2!('a', 'b').get_unchecked(1), 'b');

        assert_eq!(vec3!('a', 'b', 'c').get_unchecked(0), 'a');
        assert_eq!(vec3!('a', 'b', 'c').get_unchecked(1), 'b');
        assert_eq!(vec3!('a', 'b', 'c').get_unchecked(2), 'c');

        assert_eq!(vec4!('a', 'b', 'c', 'd').get_unchecked(0), 'a');
        assert_eq!(vec4!('a', 'b', 'c', 'd').get_unchecked(1), 'b');
        assert_eq!(vec4!('a', 'b', 'c', 'd').get_unchecked(2), 'c');
        assert_eq!(vec4!('a', 'b', 'c', 'd').get_unchecked(3), 'd');

        assert_eq!(vec2!('a', 'b').get_unchecked_mut(0), &mut 'a');
        assert_eq!(vec2!('a', 'b').get_unchecked_mut(1), &mut 'b');

        assert_eq!(vec3!('a', 'b', 'c').get_unchecked_mut(0), &mut 'a');
        assert_eq!(vec3!('a', 'b', 'c').get_unchecked_mut(1), &mut 'b');
        assert_eq!(vec3!('a', 'b', 'c').get_unchecked_mut(2), &mut 'c');

        assert_eq!(vec4!('a', 'b', 'c', 'd').get_unchecked_mut(0), &mut 'a');
        assert_eq!(vec4!('a', 'b', 'c', 'd').get_unchecked_mut(1), &mut 'b');
        assert_eq!(vec4!('a', 'b', 'c', 'd').get_unchecked_mut(2), &mut 'c');
        assert_eq!(vec4!('a', 'b', 'c', 'd').get_unchecked_mut(3), &mut 'd');
    }

    assert_eq!(
        vec2!('a', 'b').iter().collect::<Vec<char>>(),
        vec!['a', 'b']
    );
    assert_eq!(
        vec3!('a', 'b', 'c').iter().collect::<Vec<char>>(),
        vec!['a', 'b', 'c']
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').iter().collect::<Vec<char>>(),
        vec!['a', 'b', 'c', 'd']
    );

    assert_eq!(
        vec2!('a', 'b').iter_mut().collect::<Vec<&mut char>>(),
        vec![&mut 'a', &mut 'b']
    );
    assert_eq!(
        vec3!('a', 'b', 'c').iter_mut().collect::<Vec<&mut char>>(),
        vec![&mut 'a', &mut 'b', &mut 'c']
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd')
            .iter_mut()
            .collect::<Vec<&mut char>>(),
        vec![&mut 'a', &mut 'b', &mut 'c', &mut 'd']
    );

    assert_eq!(vec2!('a', 'b').map(|x| x == 'b'), vec2!(false, true));
    assert_eq!(
        vec3!('a', 'b', 'c').map(|x| x == 'b'),
        vec3!(false, true, false)
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').map(|x| x == 'b'),
        vec4!(false, true, false, false)
    );

    assert_eq!(
        vec2!('a', 'b').zip(vec2!('b', 'a')),
        vec2!(('a', 'b'), ('b', 'a'))
    );
    assert_eq!(
        vec3!('a', 'b', 'c').zip(vec3!('b', 'c', 'a')),
        vec3!(('a', 'b'), ('b', 'c'), ('c', 'a'))
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').zip(vec4!('b', 'c', 'd', 'a')),
        vec4!(('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'a'))
    );

    assert_eq!(vec2!('a', 'b').reverse(), vec2!('b', 'a'));
    assert_eq!(vec3!('a', 'b', 'c').reverse(), vec3!('c', 'b', 'a'));
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').reverse(),
        vec4!('d', 'c', 'b', 'a')
    );

    assert_eq!(vec2!('a', 'b').get_const_vec2::<0, 1>(), vec2!('a', 'b'));
    assert_eq!(vec2!('a', 'b').get_const_vec2::<1, 0>(), vec2!('b', 'a'));
    assert_eq!(vec2!('a', 'b').get_const_vec2::<1, 1>(), vec2!('b', 'b'));

    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec2::<0, 1>(),
        vec2!('a', 'b')
    );
    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec2::<0, 2>(),
        vec2!('a', 'c')
    );
    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec2::<2, 1>(),
        vec2!('c', 'b')
    );

    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec2::<0, 1>(),
        vec2!('a', 'b')
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec2::<1, 3>(),
        vec2!('b', 'd')
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec2::<3, 1>(),
        vec2!('d', 'b')
    );

    assert_eq!(
        vec2!('a', 'b').get_const_vec3::<0, 1, 1>(),
        vec3!('a', 'b', 'b')
    );
    assert_eq!(
        vec2!('a', 'b').get_const_vec3::<1, 0, 1>(),
        vec3!('b', 'a', 'b')
    );

    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec3::<0, 1, 2>(),
        vec3!('a', 'b', 'c')
    );
    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec3::<1, 0, 2>(),
        vec3!('b', 'a', 'c')
    );
    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec3::<2, 1, 0>(),
        vec3!('c', 'b', 'a')
    );

    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec3::<0, 1, 2>(),
        vec3!('a', 'b', 'c')
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec3::<1, 0, 2>(),
        vec3!('b', 'a', 'c')
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec3::<2, 1, 0>(),
        vec3!('c', 'b', 'a')
    );

    assert_eq!(
        vec2!('a', 'b').get_const_vec4::<0, 1, 1, 0>(),
        vec4!('a', 'b', 'b', 'a')
    );
    assert_eq!(
        vec2!('a', 'b').get_const_vec4::<1, 0, 1, 0>(),
        vec4!('b', 'a', 'b', 'a')
    );
    assert_eq!(
        vec2!('a', 'b').get_const_vec4::<1, 1, 0, 0>(),
        vec4!('b', 'b', 'a', 'a')
    );

    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec4::<0, 1, 2, 0>(),
        vec4!('a', 'b', 'c', 'a')
    );
    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec4::<1, 0, 2, 0>(),
        vec4!('b', 'a', 'c', 'a')
    );
    assert_eq!(
        vec3!('a', 'b', 'c').get_const_vec4::<2, 1, 0, 0>(),
        vec4!('c', 'b', 'a', 'a')
    );

    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec4::<0, 1, 2, 3>(),
        vec4!('a', 'b', 'c', 'd')
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec4::<1, 0, 2, 3>(),
        vec4!('b', 'a', 'c', 'd')
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec4::<2, 1, 0, 3>(),
        vec4!('c', 'b', 'a', 'd')
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd').get_const_vec4::<3, 1, 2, 0>(),
        vec4!('d', 'b', 'c', 'a')
    );

    assert_eq!(vec2!('a', 'b')[0], 'a');
    assert_eq!(vec2!('a', 'b')[1], 'b');

    assert_eq!(vec3!('a', 'b', 'c')[0], 'a');
    assert_eq!(vec3!('a', 'b', 'c')[1], 'b');
    assert_eq!(vec3!('a', 'b', 'c')[2], 'c');

    assert_eq!(vec4!('a', 'b', 'c', 'd')[0], 'a');
    assert_eq!(vec4!('a', 'b', 'c', 'd')[1], 'b');
    assert_eq!(vec4!('a', 'b', 'c', 'd')[2], 'c');
    assert_eq!(vec4!('a', 'b', 'c', 'd')[3], 'd');

    assert_eq!(&mut vec2!('a', 'b')[0], &mut 'a');
    assert_eq!(&mut vec2!('a', 'b')[1], &mut 'b');

    assert_eq!(&mut vec3!('a', 'b', 'c')[0], &mut 'a');
    assert_eq!(&mut vec3!('a', 'b', 'c')[1], &mut 'b');
    assert_eq!(&mut vec3!('a', 'b', 'c')[2], &mut 'c');

    assert_eq!(&mut vec4!('a', 'b', 'c', 'd')[0], &mut 'a');
    assert_eq!(&mut vec4!('a', 'b', 'c', 'd')[1], &mut 'b');
    assert_eq!(&mut vec4!('a', 'b', 'c', 'd')[2], &mut 'c');
    assert_eq!(&mut vec4!('a', 'b', 'c', 'd')[3], &mut 'd');

    assert_eq!(vec2!('a', 'b') == vec2!('a', 'b'), true);
    assert_eq!(vec2!('a', 'b') == vec2!('b', 'a'), false);
    assert_eq!(vec2!('a', 'b') == vec2!('b', 'b'), false);

    assert_eq!(vec3!('a', 'b', 'c') == vec3!('a', 'b', 'c'), true);
    assert_eq!(vec3!('a', 'b', 'c') == vec3!('d', 'c', 'b'), false);
    assert_eq!(vec3!('a', 'b', 'c') == vec3!('b', 'b', 'c'), false);

    assert_eq!(vec4!('a', 'b', 'c', 'd') == vec4!('a', 'b', 'c', 'd'), true);
    assert_eq!(
        vec4!('a', 'b', 'c', 'd') == vec4!('d', 'c', 'b', 'a'),
        false
    );
    assert_eq!(
        vec4!('a', 'b', 'c', 'd') == vec4!('b', 'b', 'b', 'd'),
        false
    );

    assert_eq!(vec2!('a', 'b') != vec2!('a', 'b'), false);
    assert_eq!(vec2!('a', 'b') != vec2!('b', 'a'), true);
    assert_eq!(vec2!('a', 'b') != vec2!('b', 'b'), true);

    assert_eq!(vec3!('a', 'b', 'c') != vec3!('a', 'b', 'c'), false);
    assert_eq!(vec3!('a', 'b', 'c') != vec3!('d', 'c', 'b'), true);
    assert_eq!(vec3!('a', 'b', 'c') != vec3!('b', 'b', 'c'), true);

    assert_eq!(
        vec4!('a', 'b', 'c', 'd') != vec4!('a', 'b', 'c', 'd'),
        false
    );
    assert_eq!(vec4!('a', 'b', 'c', 'd') != vec4!('d', 'c', 'b', 'a'), true);
    assert_eq!(vec4!('a', 'b', 'c', 'd') != vec4!('b', 'b', 'b', 'd'), true);

    assert_eq!(vec2!('a', 'b').to_string(), "(a, b)");
    assert_eq!(vec3!('a', 'b', 'c').to_string(), "(a, b, c)");
    assert_eq!(vec4!('a', 'b', 'c', 'd').to_string(), "(a, b, c, d)");

    assert_eq!(format!("{:?}", vec2!('a', 'b')), "('a', 'b')");
    assert_eq!(format!("{:?}", vec3!('a', 'b', 'c')), "('a', 'b', 'c')");
    assert_eq!(
        format!("{:?}", vec4!('a', 'b', 'c', 'd')),
        "('a', 'b', 'c', 'd')"
    );

    assert_eq!(vec2!('a', 'b').x, 'a');
    assert_eq!(vec2!('a', 'b').y, 'b');

    assert_eq!(vec3!('a', 'b', 'c').x, 'a');
    assert_eq!(vec3!('a', 'b', 'c').y, 'b');
    assert_eq!(vec3!('a', 'b', 'c').z, 'c');

    assert_eq!(vec4!('a', 'b', 'c', 'd').x, 'a');
    assert_eq!(vec4!('a', 'b', 'c', 'd').y, 'b');
    assert_eq!(vec4!('a', 'b', 'c', 'd').z, 'c');
    assert_eq!(vec4!('a', 'b', 'c', 'd').w, 'd');

    assert_eq!(&mut vec2!('a', 'b').x, &mut 'a');
    assert_eq!(&mut vec2!('a', 'b').y, &mut 'b');

    assert_eq!(&mut vec3!('a', 'b', 'c').x, &mut 'a');
    assert_eq!(&mut vec3!('a', 'b', 'c').y, &mut 'b');
    assert_eq!(&mut vec3!('a', 'b', 'c').z, &mut 'c');

    assert_eq!(&mut vec4!('a', 'b', 'c', 'd').x, &mut 'a');
    assert_eq!(&mut vec4!('a', 'b', 'c', 'd').y, &mut 'b');
    assert_eq!(&mut vec4!('a', 'b', 'c', 'd').z, &mut 'c');
    assert_eq!(&mut vec4!('a', 'b', 'c', 'd').w, &mut 'd');

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2!('a', 'b').xy(), vec2!('a', 'b'));
        assert_eq!(vec2!('a', 'b').yx(), vec2!('b', 'a'));
        assert_eq!(vec2!('a', 'b').yy(), vec2!('b', 'b'));

        assert_eq!(vec3!('a', 'b', 'c').xy(), vec2!('a', 'b'));
        assert_eq!(vec3!('a', 'b', 'c').xz(), vec2!('a', 'c'));
        assert_eq!(vec3!('a', 'b', 'c').zy(), vec2!('c', 'b'));

        assert_eq!(vec4!('a', 'b', 'c', 'd').xy(), vec2!('a', 'b'));
        assert_eq!(vec4!('a', 'b', 'c', 'd').yw(), vec2!('b', 'd'));
        assert_eq!(vec4!('a', 'b', 'c', 'd').wy(), vec2!('d', 'b'));

        assert_eq!(vec2!('a', 'b').xyy(), vec3!('a', 'b', 'b'));
        assert_eq!(vec2!('a', 'b').yxy(), vec3!('b', 'a', 'b'));

        assert_eq!(vec3!('a', 'b', 'c').xyz(), vec3!('a', 'b', 'c'));
        assert_eq!(vec3!('a', 'b', 'c').yxz(), vec3!('b', 'a', 'c'));
        assert_eq!(vec3!('a', 'b', 'c').zyx(), vec3!('c', 'b', 'a'));

        assert_eq!(vec4!('a', 'b', 'c', 'd').xyz(), vec3!('a', 'b', 'c'));
        assert_eq!(vec4!('a', 'b', 'c', 'd').yxz(), vec3!('b', 'a', 'c'));
        assert_eq!(vec4!('a', 'b', 'c', 'd').zyx(), vec3!('c', 'b', 'a'));

        assert_eq!(vec2!('a', 'b').xyyx(), vec4!('a', 'b', 'b', 'a'));
        assert_eq!(vec2!('a', 'b').yxyx(), vec4!('b', 'a', 'b', 'a'));
        assert_eq!(vec2!('a', 'b').yyxx(), vec4!('b', 'b', 'a', 'a'));

        assert_eq!(vec3!('a', 'b', 'c').xyzx(), vec4!('a', 'b', 'c', 'a'));
        assert_eq!(vec3!('a', 'b', 'c').yxzx(), vec4!('b', 'a', 'c', 'a'));
        assert_eq!(vec3!('a', 'b', 'c').zyxx(), vec4!('c', 'b', 'a', 'a'));

        assert_eq!(vec4!('a', 'b', 'c', 'd').xyzw(), vec4!('a', 'b', 'c', 'd'));
        assert_eq!(vec4!('a', 'b', 'c', 'd').yxzw(), vec4!('b', 'a', 'c', 'd'));
        assert_eq!(vec4!('a', 'b', 'c', 'd').zyxw(), vec4!('c', 'b', 'a', 'd'));
        assert_eq!(vec4!('a', 'b', 'c', 'd').wyzx(), vec4!('d', 'b', 'c', 'a'));
    }
}

#[test]
#[should_panic]
fn test_vec2_index_panic() {
    vec2!('a', 'b')[2];
}

#[test]
#[should_panic]
fn test_vec3_index_panic() {
    vec3!('a', 'b', 'c')[3];
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!('a', 'b', 'c', 'd')[4];
}

#[test]
fn test_nonsimd_primitive_fns() {
    assert_eq!(size_of::<Vec2S<char>>(), size_of::<char>() * 2);
    assert_eq!(size_of::<Vec3S<char>>(), size_of::<char>() * 3);
    assert_eq!(size_of::<Vec4S<char>>(), size_of::<char>() * 4);

    assert_eq!(align_of::<Vec2S<char>>(), align_of::<char>());
    assert_eq!(align_of::<Vec3S<char>>(), align_of::<char>());
    assert_eq!(align_of::<Vec4S<char>>(), align_of::<char>());

    assert_eq!(Vec2S::from_array(['a', 'b']).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3S::from_array(['a', 'b', 'c']).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4S::from_array(['a', 'b', 'c', 'd']).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(Vec2S::from_fn(|i| ['a', 'b'][i]).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3S::from_fn(|i| ['a', 'b', 'c'][i]).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4S::from_fn(|i| ['a', 'b', 'c', 'd'][i]).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(Vec2S::const_from_array(['a', 'b']).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3S::const_from_array(['a', 'b', 'c']).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4S::const_from_array(['a', 'b', 'c', 'd']).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2s!('a', 'b').as_array(), ['a', 'b']);
    assert_eq!(vec2s!(vec2s!('a', 'b')).as_array(), ['a', 'b']);
    assert_eq!(vec3s!('a', 'b', 'c').as_array(), ['a', 'b', 'c']);
    assert_eq!(vec3s!('a', vec2s!('b', 'c')).as_array(), ['a', 'b', 'c']);
    assert_eq!(vec4s!('a', 'b', 'c', 'd').as_array(), ['a', 'b', 'c', 'd']);
    assert_eq!(
        vec4s!('a', vec2s!('b', 'c'), 'd').as_array(),
        ['a', 'b', 'c', 'd']
    );
    assert_eq!(
        vec4s!(
            'a',
            vec2s!('b', 'c'),
            Vector::<1, char, NonSimd>::from_array(['d'])
        )
        .as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2s!('a').as_array(), ['a'; 2]);
    assert_eq!(vec3s!('a').as_array(), ['a'; 3]);
    assert_eq!(vec4s!('a').as_array(), ['a'; 4]);

    assert_eq!(vec2s!('a', 'b').as_array_ref(), &['a', 'b']);
    assert_eq!(vec3s!('a', 'b', 'c').as_array_ref(), &['a', 'b', 'c']);
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').as_array_ref(),
        &['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2s!('a', 'b').as_mut_array(), &mut ['a', 'b']);
    assert_eq!(vec3s!('a', 'b', 'c').as_mut_array(), &mut ['a', 'b', 'c']);
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').as_mut_array(),
        &mut ['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2s!('a', 'b').as_simd(), vec2!('a', 'b'));
    assert_eq!(vec3s!('a', 'b', 'c').as_simd(), vec3!('a', 'b', 'c'));
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').as_simd(),
        vec4!('a', 'b', 'c', 'd')
    );

    assert_eq!(vec2s!('a', 'b').as_nonsimd(), vec2s!('a', 'b'));
    assert_eq!(vec3s!('a', 'b', 'c').as_nonsimd(), vec3s!('a', 'b', 'c'));
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').as_nonsimd(),
        vec4s!('a', 'b', 'c', 'd')
    );

    assert_eq!(vec2s!('a', 'b').len(), 2);
    assert_eq!(vec3s!('a', 'b', 'c').len(), 3);
    assert_eq!(vec4s!('a', 'b', 'c', 'd').len(), 4);

    assert_eq!(vec2s!('a', 'b').is_simd(), false);
    assert_eq!(vec3s!('a', 'b', 'c').is_simd(), false);
    assert_eq!(vec4s!('a', 'b', 'c', 'd').is_simd(), false);

    assert_eq!(vec2s!('a', 'b').get(0), Some('a'));
    assert_eq!(vec2s!('a', 'b').get(1), Some('b'));
    assert_eq!(vec2s!('a', 'b').get(2), None);
    assert_eq!(vec2s!('a', 'b').get(3), None);

    assert_eq!(vec3s!('a', 'b', 'c').get(0), Some('a'));
    assert_eq!(vec3s!('a', 'b', 'c').get(1), Some('b'));
    assert_eq!(vec3s!('a', 'b', 'c').get(2), Some('c'));
    assert_eq!(vec3s!('a', 'b', 'c').get(3), None);
    assert_eq!(vec3s!('a', 'b', 'c').get(4), None);

    assert_eq!(vec4s!('a', 'b', 'c', 'd').get(0), Some('a'));
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get(1), Some('b'));
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get(2), Some('c'));
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get(3), Some('d'));
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get(4), None);
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get(5), None);

    assert_eq!(vec2s!('a', 'b').get_mut(0), Some(&mut 'a'));
    assert_eq!(vec2s!('a', 'b').get_mut(1), Some(&mut 'b'));
    assert_eq!(vec2s!('a', 'b').get_mut(2), None);
    assert_eq!(vec2s!('a', 'b').get_mut(3), None);

    assert_eq!(vec3s!('a', 'b', 'c').get_mut(0), Some(&mut 'a'));
    assert_eq!(vec3s!('a', 'b', 'c').get_mut(1), Some(&mut 'b'));
    assert_eq!(vec3s!('a', 'b', 'c').get_mut(2), Some(&mut 'c'));
    assert_eq!(vec3s!('a', 'b', 'c').get_mut(3), None);
    assert_eq!(vec3s!('a', 'b', 'c').get_mut(4), None);

    assert_eq!(vec4s!('a', 'b', 'c', 'd').get_mut(0), Some(&mut 'a'));
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get_mut(1), Some(&mut 'b'));
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get_mut(2), Some(&mut 'c'));
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get_mut(3), Some(&mut 'd'));
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get_mut(4), None);
    assert_eq!(vec4s!('a', 'b', 'c', 'd').get_mut(5), None);

    unsafe {
        assert_eq!(vec2s!('a', 'b').get_unchecked(0), 'a');
        assert_eq!(vec2s!('a', 'b').get_unchecked(1), 'b');

        assert_eq!(vec3s!('a', 'b', 'c').get_unchecked(0), 'a');
        assert_eq!(vec3s!('a', 'b', 'c').get_unchecked(1), 'b');
        assert_eq!(vec3s!('a', 'b', 'c').get_unchecked(2), 'c');

        assert_eq!(vec4s!('a', 'b', 'c', 'd').get_unchecked(0), 'a');
        assert_eq!(vec4s!('a', 'b', 'c', 'd').get_unchecked(1), 'b');
        assert_eq!(vec4s!('a', 'b', 'c', 'd').get_unchecked(2), 'c');
        assert_eq!(vec4s!('a', 'b', 'c', 'd').get_unchecked(3), 'd');

        assert_eq!(vec2s!('a', 'b').get_unchecked_mut(0), &mut 'a');
        assert_eq!(vec2s!('a', 'b').get_unchecked_mut(1), &mut 'b');

        assert_eq!(vec3s!('a', 'b', 'c').get_unchecked_mut(0), &mut 'a');
        assert_eq!(vec3s!('a', 'b', 'c').get_unchecked_mut(1), &mut 'b');
        assert_eq!(vec3s!('a', 'b', 'c').get_unchecked_mut(2), &mut 'c');

        assert_eq!(vec4s!('a', 'b', 'c', 'd').get_unchecked_mut(0), &mut 'a');
        assert_eq!(vec4s!('a', 'b', 'c', 'd').get_unchecked_mut(1), &mut 'b');
        assert_eq!(vec4s!('a', 'b', 'c', 'd').get_unchecked_mut(2), &mut 'c');
        assert_eq!(vec4s!('a', 'b', 'c', 'd').get_unchecked_mut(3), &mut 'd');
    }

    assert_eq!(
        vec2s!('a', 'b').iter().collect::<Vec<char>>(),
        vec!['a', 'b']
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').iter().collect::<Vec<char>>(),
        vec!['a', 'b', 'c']
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').iter().collect::<Vec<char>>(),
        vec!['a', 'b', 'c', 'd']
    );

    assert_eq!(
        vec2s!('a', 'b').iter_mut().collect::<Vec<&mut char>>(),
        vec![&mut 'a', &mut 'b']
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').iter_mut().collect::<Vec<&mut char>>(),
        vec![&mut 'a', &mut 'b', &mut 'c']
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd')
            .iter_mut()
            .collect::<Vec<&mut char>>(),
        vec![&mut 'a', &mut 'b', &mut 'c', &mut 'd']
    );

    assert_eq!(vec2s!('a', 'b').map(|x| x == 'b'), vec2s!(false, true));
    assert_eq!(
        vec3s!('a', 'b', 'c').map(|x| x == 'b'),
        vec3s!(false, true, false)
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').map(|x| x == 'b'),
        vec4s!(false, true, false, false)
    );

    assert_eq!(
        vec2s!('a', 'b').zip(vec2s!('b', 'a')),
        vec2s!(('a', 'b'), ('b', 'a'))
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').zip(vec3s!('b', 'c', 'a')),
        vec3s!(('a', 'b'), ('b', 'c'), ('c', 'a'))
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').zip(vec4s!('b', 'c', 'd', 'a')),
        vec4s!(('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'a'))
    );

    assert_eq!(vec2s!('a', 'b').reverse(), vec2s!('b', 'a'));
    assert_eq!(vec3s!('a', 'b', 'c').reverse(), vec3s!('c', 'b', 'a'));
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').reverse(),
        vec4s!('d', 'c', 'b', 'a')
    );

    assert_eq!(vec2s!('a', 'b').get_const_vec2::<0, 1>(), vec2s!('a', 'b'));
    assert_eq!(vec2s!('a', 'b').get_const_vec2::<1, 0>(), vec2s!('b', 'a'));
    assert_eq!(vec2s!('a', 'b').get_const_vec2::<1, 1>(), vec2s!('b', 'b'));

    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec2::<0, 1>(),
        vec2s!('a', 'b')
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec2::<0, 2>(),
        vec2s!('a', 'c')
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec2::<2, 1>(),
        vec2s!('c', 'b')
    );

    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec2::<0, 1>(),
        vec2s!('a', 'b')
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec2::<1, 3>(),
        vec2s!('b', 'd')
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec2::<3, 1>(),
        vec2s!('d', 'b')
    );

    assert_eq!(
        vec2s!('a', 'b').get_const_vec3::<0, 1, 1>(),
        vec3s!('a', 'b', 'b')
    );
    assert_eq!(
        vec2s!('a', 'b').get_const_vec3::<1, 0, 1>(),
        vec3s!('b', 'a', 'b')
    );

    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec3::<0, 1, 2>(),
        vec3s!('a', 'b', 'c')
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec3::<1, 0, 2>(),
        vec3s!('b', 'a', 'c')
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec3::<2, 1, 0>(),
        vec3s!('c', 'b', 'a')
    );

    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec3::<0, 1, 2>(),
        vec3s!('a', 'b', 'c')
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec3::<1, 0, 2>(),
        vec3s!('b', 'a', 'c')
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec3::<2, 1, 0>(),
        vec3s!('c', 'b', 'a')
    );

    assert_eq!(
        vec2s!('a', 'b').get_const_vec4::<0, 1, 1, 0>(),
        vec4s!('a', 'b', 'b', 'a')
    );
    assert_eq!(
        vec2s!('a', 'b').get_const_vec4::<1, 0, 1, 0>(),
        vec4s!('b', 'a', 'b', 'a')
    );
    assert_eq!(
        vec2s!('a', 'b').get_const_vec4::<1, 1, 0, 0>(),
        vec4s!('b', 'b', 'a', 'a')
    );

    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec4::<0, 1, 2, 0>(),
        vec4s!('a', 'b', 'c', 'a')
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec4::<1, 0, 2, 0>(),
        vec4s!('b', 'a', 'c', 'a')
    );
    assert_eq!(
        vec3s!('a', 'b', 'c').get_const_vec4::<2, 1, 0, 0>(),
        vec4s!('c', 'b', 'a', 'a')
    );

    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec4::<0, 1, 2, 3>(),
        vec4s!('a', 'b', 'c', 'd')
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec4::<1, 0, 2, 3>(),
        vec4s!('b', 'a', 'c', 'd')
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec4::<2, 1, 0, 3>(),
        vec4s!('c', 'b', 'a', 'd')
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd').get_const_vec4::<3, 1, 2, 0>(),
        vec4s!('d', 'b', 'c', 'a')
    );

    assert_eq!(vec2s!('a', 'b')[0], 'a');
    assert_eq!(vec2s!('a', 'b')[1], 'b');

    assert_eq!(vec3s!('a', 'b', 'c')[0], 'a');
    assert_eq!(vec3s!('a', 'b', 'c')[1], 'b');
    assert_eq!(vec3s!('a', 'b', 'c')[2], 'c');

    assert_eq!(vec4s!('a', 'b', 'c', 'd')[0], 'a');
    assert_eq!(vec4s!('a', 'b', 'c', 'd')[1], 'b');
    assert_eq!(vec4s!('a', 'b', 'c', 'd')[2], 'c');
    assert_eq!(vec4s!('a', 'b', 'c', 'd')[3], 'd');

    assert_eq!(&mut vec2s!('a', 'b')[0], &mut 'a');
    assert_eq!(&mut vec2s!('a', 'b')[1], &mut 'b');

    assert_eq!(&mut vec3s!('a', 'b', 'c')[0], &mut 'a');
    assert_eq!(&mut vec3s!('a', 'b', 'c')[1], &mut 'b');
    assert_eq!(&mut vec3s!('a', 'b', 'c')[2], &mut 'c');

    assert_eq!(&mut vec4s!('a', 'b', 'c', 'd')[0], &mut 'a');
    assert_eq!(&mut vec4s!('a', 'b', 'c', 'd')[1], &mut 'b');
    assert_eq!(&mut vec4s!('a', 'b', 'c', 'd')[2], &mut 'c');
    assert_eq!(&mut vec4s!('a', 'b', 'c', 'd')[3], &mut 'd');

    assert_eq!(vec2s!('a', 'b') == vec2s!('a', 'b'), true);
    assert_eq!(vec2s!('a', 'b') == vec2s!('b', 'a'), false);
    assert_eq!(vec2s!('a', 'b') == vec2s!('b', 'b'), false);

    assert_eq!(vec3s!('a', 'b', 'c') == vec3s!('a', 'b', 'c'), true);
    assert_eq!(vec3s!('a', 'b', 'c') == vec3s!('d', 'c', 'b'), false);
    assert_eq!(vec3s!('a', 'b', 'c') == vec3s!('b', 'b', 'c'), false);

    assert_eq!(
        vec4s!('a', 'b', 'c', 'd') == vec4s!('a', 'b', 'c', 'd'),
        true
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd') == vec4s!('d', 'c', 'b', 'a'),
        false
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd') == vec4s!('b', 'b', 'b', 'd'),
        false
    );

    assert_eq!(vec2s!('a', 'b') != vec2s!('a', 'b'), false);
    assert_eq!(vec2s!('a', 'b') != vec2s!('b', 'a'), true);
    assert_eq!(vec2s!('a', 'b') != vec2s!('b', 'b'), true);

    assert_eq!(vec3s!('a', 'b', 'c') != vec3s!('a', 'b', 'c'), false);
    assert_eq!(vec3s!('a', 'b', 'c') != vec3s!('d', 'c', 'b'), true);
    assert_eq!(vec3s!('a', 'b', 'c') != vec3s!('b', 'b', 'c'), true);

    assert_eq!(
        vec4s!('a', 'b', 'c', 'd') != vec4s!('a', 'b', 'c', 'd'),
        false
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd') != vec4s!('d', 'c', 'b', 'a'),
        true
    );
    assert_eq!(
        vec4s!('a', 'b', 'c', 'd') != vec4s!('b', 'b', 'b', 'd'),
        true
    );

    assert_eq!(vec2s!('a', 'b').to_string(), "(a, b)");
    assert_eq!(vec3s!('a', 'b', 'c').to_string(), "(a, b, c)");
    assert_eq!(vec4s!('a', 'b', 'c', 'd').to_string(), "(a, b, c, d)");

    assert_eq!(format!("{:?}", vec2s!('a', 'b')), "('a', 'b')");
    assert_eq!(format!("{:?}", vec3s!('a', 'b', 'c')), "('a', 'b', 'c')");
    assert_eq!(
        format!("{:?}", vec4s!('a', 'b', 'c', 'd')),
        "('a', 'b', 'c', 'd')"
    );

    assert_eq!(vec2s!('a', 'b').x, 'a');
    assert_eq!(vec2s!('a', 'b').y, 'b');

    assert_eq!(vec3s!('a', 'b', 'c').x, 'a');
    assert_eq!(vec3s!('a', 'b', 'c').y, 'b');
    assert_eq!(vec3s!('a', 'b', 'c').z, 'c');

    assert_eq!(vec4s!('a', 'b', 'c', 'd').x, 'a');
    assert_eq!(vec4s!('a', 'b', 'c', 'd').y, 'b');
    assert_eq!(vec4s!('a', 'b', 'c', 'd').z, 'c');
    assert_eq!(vec4s!('a', 'b', 'c', 'd').w, 'd');

    assert_eq!(&mut vec2s!('a', 'b').x, &mut 'a');
    assert_eq!(&mut vec2s!('a', 'b').y, &mut 'b');

    assert_eq!(&mut vec3s!('a', 'b', 'c').x, &mut 'a');
    assert_eq!(&mut vec3s!('a', 'b', 'c').y, &mut 'b');
    assert_eq!(&mut vec3s!('a', 'b', 'c').z, &mut 'c');

    assert_eq!(&mut vec4s!('a', 'b', 'c', 'd').x, &mut 'a');
    assert_eq!(&mut vec4s!('a', 'b', 'c', 'd').y, &mut 'b');
    assert_eq!(&mut vec4s!('a', 'b', 'c', 'd').z, &mut 'c');
    assert_eq!(&mut vec4s!('a', 'b', 'c', 'd').w, &mut 'd');

    #[cfg(feature = "swizzle")]
    {
        assert_eq!(vec2s!('a', 'b').xy(), vec2s!('a', 'b'));
        assert_eq!(vec2s!('a', 'b').yx(), vec2s!('b', 'a'));
        assert_eq!(vec2s!('a', 'b').yy(), vec2s!('b', 'b'));

        assert_eq!(vec3s!('a', 'b', 'c').xy(), vec2s!('a', 'b'));
        assert_eq!(vec3s!('a', 'b', 'c').xz(), vec2s!('a', 'c'));
        assert_eq!(vec3s!('a', 'b', 'c').zy(), vec2s!('c', 'b'));

        assert_eq!(vec4s!('a', 'b', 'c', 'd').xy(), vec2s!('a', 'b'));
        assert_eq!(vec4s!('a', 'b', 'c', 'd').yw(), vec2s!('b', 'd'));
        assert_eq!(vec4s!('a', 'b', 'c', 'd').wy(), vec2s!('d', 'b'));

        assert_eq!(vec2s!('a', 'b').xyy(), vec3s!('a', 'b', 'b'));
        assert_eq!(vec2s!('a', 'b').yxy(), vec3s!('b', 'a', 'b'));

        assert_eq!(vec3s!('a', 'b', 'c').xyz(), vec3s!('a', 'b', 'c'));
        assert_eq!(vec3s!('a', 'b', 'c').yxz(), vec3s!('b', 'a', 'c'));
        assert_eq!(vec3s!('a', 'b', 'c').zyx(), vec3s!('c', 'b', 'a'));

        assert_eq!(vec4s!('a', 'b', 'c', 'd').xyz(), vec3s!('a', 'b', 'c'));
        assert_eq!(vec4s!('a', 'b', 'c', 'd').yxz(), vec3s!('b', 'a', 'c'));
        assert_eq!(vec4s!('a', 'b', 'c', 'd').zyx(), vec3s!('c', 'b', 'a'));

        assert_eq!(vec2s!('a', 'b').xyyx(), vec4s!('a', 'b', 'b', 'a'));
        assert_eq!(vec2s!('a', 'b').yxyx(), vec4s!('b', 'a', 'b', 'a'));
        assert_eq!(vec2s!('a', 'b').yyxx(), vec4s!('b', 'b', 'a', 'a'));

        assert_eq!(vec3s!('a', 'b', 'c').xyzx(), vec4s!('a', 'b', 'c', 'a'));
        assert_eq!(vec3s!('a', 'b', 'c').yxzx(), vec4s!('b', 'a', 'c', 'a'));
        assert_eq!(vec3s!('a', 'b', 'c').zyxx(), vec4s!('c', 'b', 'a', 'a'));

        assert_eq!(
            vec4s!('a', 'b', 'c', 'd').xyzw(),
            vec4s!('a', 'b', 'c', 'd')
        );
        assert_eq!(
            vec4s!('a', 'b', 'c', 'd').yxzw(),
            vec4s!('b', 'a', 'c', 'd')
        );
        assert_eq!(
            vec4s!('a', 'b', 'c', 'd').zyxw(),
            vec4s!('c', 'b', 'a', 'd')
        );
        assert_eq!(
            vec4s!('a', 'b', 'c', 'd').wyzx(),
            vec4s!('d', 'b', 'c', 'a')
        );
    }
}

#[test]
#[should_panic]
fn test_vec2s_index_panic() {
    vec2!('a', 'b')[2];
}

#[test]
#[should_panic]
fn test_vec3s_index_panic() {
    vec3!('a', 'b', 'c')[3];
}

#[test]
#[should_panic]
fn test_vec4s_index_panic() {
    vec4!('a', 'b', 'c', 'd')[4];
}
