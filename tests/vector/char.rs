// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use ggmath::*;

#[test]
fn test_nonsimd_char_vec_layout() {
    assert_eq!(size_of::<Vec2S<char>>(), size_of::<char>() * 2);
    assert_eq!(size_of::<Vec3S<char>>(), size_of::<char>() * 3);
    assert_eq!(size_of::<Vec4S<char>>(), size_of::<char>() * 4);

    assert_eq!(align_of::<Vec2S<char>>(), align_of::<char>());
    assert_eq!(align_of::<Vec3S<char>>(), align_of::<char>());
    assert_eq!(align_of::<Vec4S<char>>(), align_of::<char>());
}

#[test]
fn test_simd_char_vec_constructors() {
    assert_eq!(Vec2::from_array(['a', 'b']).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3::from_array(['a', 'b', 'c']).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4::from_array(['a', 'b', 'c', 'd']).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(Vec2::splat('a').as_array(), ['a'; 2]);
    assert_eq!(Vec3::splat('a').as_array(), ['a'; 3]);
    assert_eq!(Vec4::splat('a').as_array(), ['a'; 4]);

    assert_eq!(Vec2::from_fn(|i| ['a', 'b'][i]).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3::from_fn(|i| ['a', 'b', 'c'][i]).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4::from_fn(|i| ['a', 'b', 'c', 'd'][i]).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(Vec2::const_from_array(['a', 'b']).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3::const_from_array(['a', 'b', 'c']).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4::const_from_array(['a', 'b', 'c', 'd']).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2!('a', 'b').as_array(), ['a', 'b']);
    assert_eq!(vec2!(vec2!('a', 'b')).as_array(), ['a', 'b']);
    assert_eq!(vec3!('a', 'b', 'c').as_array(), ['a', 'b', 'c']);
    assert_eq!(vec3!('a', vec2!('b', 'c')).as_array(), ['a', 'b', 'c']);
    assert_eq!(vec4!('a', 'b', 'c', 'd').as_array(), ['a', 'b', 'c', 'd']);
    assert_eq!(
        vec4!('a', vec2!('b', 'c'), 'd').as_array(),
        ['a', 'b', 'c', 'd']
    );
    assert_eq!(
        vec4!(
            'a',
            vec2!('b', 'c'),
            Vector::<1, char, Simd>::from_array(['d'])
        )
        .as_array(),
        ['a', 'b', 'c', 'd']
    );
}

#[test]
fn test_nonsimd_char_vec_constructors() {
    assert_eq!(Vec2S::from_array(['a', 'b']).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3S::from_array(['a', 'b', 'c']).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4S::from_array(['a', 'b', 'c', 'd']).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(Vec2S::splat('a').as_array(), ['a'; 2]);
    assert_eq!(Vec3S::splat('a').as_array(), ['a'; 3]);
    assert_eq!(Vec4S::splat('a').as_array(), ['a'; 4]);

    assert_eq!(Vec2S::from_fn(|i| ['a', 'b'][i]).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3S::from_fn(|i| ['a', 'b', 'c'][i]).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4S::from_fn(|i| ['a', 'b', 'c', 'd'][i]).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(Vec2S::const_from_array(['a', 'b']).as_array(), ['a', 'b']);
    assert_eq!(
        Vec3S::const_from_array(['a', 'b', 'c']).as_array(),
        ['a', 'b', 'c']
    );
    assert_eq!(
        Vec4S::const_from_array(['a', 'b', 'c', 'd']).as_array(),
        ['a', 'b', 'c', 'd']
    );

    assert_eq!(vec2s!('a', 'b').as_array(), ['a', 'b']);
    assert_eq!(vec2s!(vec2s!('a', 'b')).as_array(), ['a', 'b']);
    assert_eq!(vec3s!('a', 'b', 'c').as_array(), ['a', 'b', 'c']);
    assert_eq!(vec3s!('a', vec2s!('b', 'c')).as_array(), ['a', 'b', 'c']);
    assert_eq!(vec4s!('a', 'b', 'c', 'd').as_array(), ['a', 'b', 'c', 'd']);
    assert_eq!(
        vec4s!('a', vec2s!('b', 'c'), 'd').as_array(),
        ['a', 'b', 'c', 'd']
    );
    assert_eq!(
        vec4s!(
            'a',
            vec2s!('b', 'c'),
            Vector::<1, char, NonSimd>::from_array(['d'])
        )
        .as_array(),
        ['a', 'b', 'c', 'd']
    );
}
