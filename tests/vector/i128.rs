// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::size_of;

use ggmath::*;

const _: () = assert!(size_of::<Vec2P<i128>>() == size_of::<[i128; 2]>());

#[test]
fn test_vec2_align() {
    assert_eq!(vec2!(0i128, 1i128).align(), vec2!(0i128, 1i128));
}

#[test]
fn test_vec2_pack() {
    assert_eq!(vec2!(0i128, 1i128).pack(), vec2p!(0i128, 1i128));
}

#[test]
fn test_vec2p_align() {
    assert_eq!(vec2p!(0i128, 1i128).align(), vec2!(0i128, 1i128));
}

#[test]
fn test_vec2p_pack() {
    assert_eq!(vec2p!(0i128, 1i128).pack(), vec2p!(0i128, 1i128));
}

const _: () = assert!(size_of::<Vec3P<i128>>() == size_of::<[i128; 3]>());

#[test]
fn test_vec3_align() {
    assert_eq!(
        vec3!(0i128, 1i128, 2i128).align(),
        vec3!(0i128, 1i128, 2i128)
    );
}

#[test]
fn test_vec3_pack() {
    assert_eq!(
        vec3!(0i128, 1i128, 2i128).pack(),
        vec3p!(0i128, 1i128, 2i128)
    );
}

#[test]
fn test_vec3p_align() {
    assert_eq!(
        vec3p!(0i128, 1i128, 2i128).align(),
        vec3!(0i128, 1i128, 2i128)
    );
}

#[test]
fn test_vec3p_pack() {
    assert_eq!(
        vec3p!(0i128, 1i128, 2i128).pack(),
        vec3p!(0i128, 1i128, 2i128)
    );
}

const _: () = assert!(size_of::<Vec4P<i128>>() == size_of::<[i128; 4]>());

#[test]
fn test_vec4_align() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).align(),
        vec4!(0i128, 1i128, 2i128, 3i128)
    );
}

#[test]
fn test_vec4_pack() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).pack(),
        vec4p!(0i128, 1i128, 2i128, 3i128)
    );
}

#[test]
fn test_vec4_from_array_as_array() {
    assert_eq!(
        Vec4::from_array([0i128, 1i128, 2i128, 3i128]).as_array(),
        [0i128, 1i128, 2i128, 3i128]
    );
}

#[test]
fn test_vec4_splat() {
    assert_eq!(Vec4::splat(0i128), vec4!(0i128, 0i128, 0i128, 0i128));
}

#[test]
fn test_vec4_index() {
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).index(0), 0i128);
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).index(1), 1i128);
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).index(2), 2i128);
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).index(3), 3i128);
}

#[test]
#[should_panic]
fn test_vec4_index_panic() {
    vec4!(0i128, 1i128, 2i128, 3i128).index(4);
}

#[test]
fn test_vec4_get() {
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get(0), Some(0i128));
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get(1), Some(1i128));
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get(2), Some(2i128));
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get(3), Some(3i128));

    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get(4), None);
}

#[test]
fn test_vec4_get_unchecked() {
    unsafe {
        assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get_unchecked(0), 0i128);
        assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get_unchecked(1), 1i128);
        assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get_unchecked(2), 2i128);
        assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).get_unchecked(3), 3i128);
    }
}

#[test]
fn test_vec4_set() {
    {
        let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
        vec.set(0, 50i128);

        assert_eq!(vec, vec4!(50i128, 1i128, 2i128, 3i128));
    }
    {
        let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
        vec.set(1, 50i128);

        assert_eq!(vec, vec4!(0i128, 50i128, 2i128, 3i128));
    }
    {
        let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
        vec.set(2, 50i128);

        assert_eq!(vec, vec4!(0i128, 1i128, 50i128, 3i128));
    }
    {
        let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
        vec.set(3, 50i128);

        assert_eq!(vec, vec4!(0i128, 1i128, 2i128, 50i128));
    }
}

#[test]
#[should_panic]
fn test_vec4_set_panic() {
    let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
    vec.set(4, 0i128);
}

#[test]
fn test_vec4_try_set() {
    {
        let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
        vec.try_set(0, 50i128).unwrap();

        assert_eq!(vec, vec4!(50i128, 1i128, 2i128, 3i128));
    }
    {
        let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
        vec.try_set(1, 50i128).unwrap();

        assert_eq!(vec, vec4!(0i128, 50i128, 2i128, 3i128));
    }
    {
        let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
        vec.try_set(2, 50i128).unwrap();

        assert_eq!(vec, vec4!(0i128, 1i128, 50i128, 3i128));
    }
    {
        let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
        vec.try_set(3, 50i128).unwrap();

        assert_eq!(vec, vec4!(0i128, 1i128, 2i128, 50i128));
    }

    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).try_set(4, 0i128),
        Err(IndexOutOfBoundsError)
    );
}

#[test]
fn test_vec4_set_unchecked() {
    unsafe {
        {
            let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
            vec.set_unchecked(0, 50i128);

            assert_eq!(vec, vec4!(50i128, 1i128, 2i128, 3i128));
        }
        {
            let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
            vec.set_unchecked(1, 50i128);

            assert_eq!(vec, vec4!(0i128, 50i128, 2i128, 3i128));
        }
        {
            let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
            vec.set_unchecked(2, 50i128);

            assert_eq!(vec, vec4!(0i128, 1i128, 50i128, 3i128));
        }
        {
            let mut vec = vec4!(0i128, 1i128, 2i128, 3i128);
            vec.set_unchecked(3, 50i128);

            assert_eq!(vec, vec4!(0i128, 1i128, 2i128, 50i128));
        }
    }
}

#[test]
fn test_vec4_swizzle() {
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).z(), 2i128);
    assert_eq!(vec4!(0i128, 1i128, 2i128, 3i128).zw(), vec2!(2i128, 3i128));
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).zwy(),
        vec3!(2i128, 3i128, 1i128)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).zwyz(),
        vec4!(2i128, 3i128, 1i128, 2i128)
    );
}

#[test]
fn test_vec4_with_swizzle() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).with_y(0i128),
        vec4!(0i128, 0i128, 2i128, 3i128)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).with_yx(vec2!(0i128, 1i128)),
        vec4!(1i128, 0i128, 2i128, 3i128)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).with_yxz(vec3!(0i128, 2i128, 1i128)),
        vec4!(2i128, 0i128, 1i128, 3i128)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).with_yxzw(vec4!(0i128, 2i128, 1i128, 0i128)),
        vec4!(2i128, 0i128, 1i128, 0i128)
    );
}

#[test]
fn test_vec4_fold() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).fold(13, |acc, x| acc + x),
        13 + 0i128 + 1i128 + 2i128 + 3i128
    );
}

#[test]
fn test_vec4_reduce() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).reduce(|acc, x| acc + x),
        0i128 + 1i128 + 2i128 + 3i128
    );
}

#[test]
fn test_vec4_eq_mask() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).eq_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).eq_mask(vec4!(0i128, 0i128, 2i128, 3i128)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).eq_mask(vec4!(4i128, 5i128, 6i128, 7i128)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ne_mask() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).ne_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).ne_mask(vec4!(0i128, 0i128, 2i128, 3i128)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).ne_mask(vec4!(4i128, 5i128, 6i128, 7i128)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_lt_mask() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).lt_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).lt_mask(vec4!(1i128, 0i128, 2i128, 3i128)),
        vec4!(true, false, false, false),
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).lt_mask(vec4!(4i128, 5i128, 6i128, 7i128)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4i128, 5i128, 6i128, 7i128).lt_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_gt_mask() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).gt_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).gt_mask(vec4!(1i128, 0i128, 2i128, 3i128)),
        vec4!(false, true, false, false),
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).gt_mask(vec4!(4i128, 5i128, 6i128, 7i128)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4i128, 5i128, 6i128, 7i128).gt_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_le_mask() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).le_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).le_mask(vec4!(1i128, 0i128, 2i128, 3i128)),
        vec4!(true, false, true, true),
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).le_mask(vec4!(4i128, 5i128, 6i128, 7i128)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(4i128, 5i128, 6i128, 7i128).le_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(false, false, false, false)
    );
}

#[test]
fn test_vec4_ge_mask() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).ge_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(true, true, true, true)
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).ge_mask(vec4!(1i128, 0i128, 2i128, 3i128)),
        vec4!(false, true, true, true),
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128).ge_mask(vec4!(4i128, 5i128, 6i128, 7i128)),
        vec4!(false, false, false, false)
    );
    assert_eq!(
        vec4!(4i128, 5i128, 6i128, 7i128).ge_mask(vec4!(0i128, 1i128, 2i128, 3i128)),
        vec4!(true, true, true, true)
    );
}

#[test]
fn test_vec4_eq() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128) == vec4!(0i128, 1i128, 2i128, 3i128),
        true
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128) == vec4!(0i128, 0i128, 2i128, 3i128),
        false
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128) == vec4!(4i128, 5i128, 6i128, 7i128),
        false
    );
}

#[test]
fn test_vec4_ne() {
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128) != vec4!(0i128, 1i128, 2i128, 3i128),
        false
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128) != vec4!(0i128, 0i128, 2i128, 3i128),
        true
    );
    assert_eq!(
        vec4!(0i128, 1i128, 2i128, 3i128) != vec4!(4i128, 5i128, 6i128, 7i128),
        true
    );
}

#[test]
fn test_vec4_debug() {
    assert_eq!(
        format!("{:?}", vec4!(0i128, 1i128, 2i128, 3i128)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4_display() {
    assert_eq!(
        format!("{}", vec4!(0i128, 1i128, 2i128, 3i128)),
        "(0, 1, 2, 3)"
    );
}

#[test]
fn test_vec4p_align() {
    assert_eq!(
        vec4p!(0i128, 1i128, 2i128, 3i128).align(),
        vec4!(0i128, 1i128, 2i128, 3i128)
    );
}

#[test]
fn test_vec4p_pack() {
    assert_eq!(
        vec4p!(0i128, 1i128, 2i128, 3i128).pack(),
        vec4p!(0i128, 1i128, 2i128, 3i128)
    );
}
