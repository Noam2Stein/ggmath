// This file is automatically generated.
// To edit this file edit the codegen crate instead.

/// A module for traits with `RIGHT` and `LEFT` constants,
/// where right is the positive direction.
#[cfg(feature = "right")]
pub mod right {
    use crate::{Construct, ScalarNegOne, ScalarOne, ScalarZero, VecAlignment, Vector};

    /// A trait for a `RIGHT` constant where right is the positive direction.
    pub trait PositiveRight: Construct {
        /// A value that points right with magnitude `1` where right is the positive direction.
        const RIGHT: Self;
    }

    /// A trait for a `LEFT` constant where right is the positive direction.
    pub trait NegativeLeft: Construct {
        /// A value that points left with magnitude `1` where right is the positive direction.
        const LEFT: Self;
    }

    impl<T: ScalarOne> PositiveRight for T {
        const RIGHT: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeLeft for T {
        const LEFT: Self = Self::NEG_ONE;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveRight for Vector<2, T, A> {
        const RIGHT: Self = Self::X;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeLeft for Vector<2, T, A> {
        const LEFT: Self = Self::NEG_X;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveRight for Vector<3, T, A> {
        const RIGHT: Self = Self::X;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeLeft for Vector<3, T, A> {
        const LEFT: Self = Self::NEG_X;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveRight for Vector<4, T, A> {
        const RIGHT: Self = Self::X;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeLeft for Vector<4, T, A> {
        const LEFT: Self = Self::NEG_X;
    }
}

/// A module for vectors with `RIGHT` and `LEFT` constants,
/// where left is the positive direction.
#[cfg(feature = "left")]
pub mod left {
    use crate::{Construct, ScalarNegOne, ScalarOne, ScalarZero, VecAlignment, Vector};

    /// A trait for a `RIGHT` constant where left is the positive direction.
    pub trait NegativeRight: Construct {
        /// A value that points right with magnitude `1` where left is the positive direction.
        const RIGHT: Self;
    }

    /// A trait for a `LEFT` constant where left is the positive direction.
    pub trait PositiveLeft: Construct {
        /// A value that points left with magnitude `1` where left is the positive direction.
        const LEFT: Self;
    }

    impl<T: ScalarOne> PositiveLeft for T {
        const LEFT: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeRight for T {
        const RIGHT: Self = Self::NEG_ONE;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeRight for Vector<2, T, A> {
        const RIGHT: Self = Self::NEG_X;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveLeft for Vector<2, T, A> {
        const LEFT: Self = Self::X;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeRight for Vector<3, T, A> {
        const RIGHT: Self = Self::NEG_X;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveLeft for Vector<3, T, A> {
        const LEFT: Self = Self::X;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeRight for Vector<4, T, A> {
        const RIGHT: Self = Self::NEG_X;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveLeft for Vector<4, T, A> {
        const LEFT: Self = Self::X;
    }
}

/// A module for traits with `UP` and `DOWN` constants,
/// where up is the positive direction.
#[cfg(feature = "up")]
pub mod up {
    use crate::{Construct, ScalarNegOne, ScalarOne, ScalarZero, VecAlignment, Vector};

    /// A trait for a `UP` constant where up is the positive direction.
    pub trait PositiveUp: Construct {
        /// A value that points up with magnitude `1` where up is the positive direction.
        const UP: Self;
    }

    /// A trait for a `DOWN` constant where up is the positive direction.
    pub trait NegativeDown: Construct {
        /// A value that points down with magnitude `1` where up is the positive direction.
        const DOWN: Self;
    }

    impl<T: ScalarOne> PositiveUp for T {
        const UP: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeDown for T {
        const DOWN: Self = Self::NEG_ONE;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveUp for Vector<2, T, A> {
        const UP: Self = Self::Y;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeDown for Vector<2, T, A> {
        const DOWN: Self = Self::NEG_Y;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveUp for Vector<3, T, A> {
        const UP: Self = Self::Y;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeDown for Vector<3, T, A> {
        const DOWN: Self = Self::NEG_Y;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveUp for Vector<4, T, A> {
        const UP: Self = Self::Y;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeDown for Vector<4, T, A> {
        const DOWN: Self = Self::NEG_Y;
    }
}

/// A module for vectors with `UP` and `DOWN` constants,
/// where down is the positive direction.
#[cfg(feature = "down")]
pub mod down {
    use crate::{Construct, ScalarNegOne, ScalarOne, ScalarZero, VecAlignment, Vector};

    /// A trait for a `UP` constant where down is the positive direction.
    pub trait NegativeUp: Construct {
        /// A value that points up with magnitude `1` where down is the positive direction.
        const UP: Self;
    }

    /// A trait for a `DOWN` constant where down is the positive direction.
    pub trait PositiveDown: Construct {
        /// A value that points down with magnitude `1` where down is the positive direction.
        const DOWN: Self;
    }

    impl<T: ScalarOne> PositiveDown for T {
        const DOWN: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeUp for T {
        const UP: Self = Self::NEG_ONE;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeUp for Vector<2, T, A> {
        const UP: Self = Self::NEG_Y;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveDown for Vector<2, T, A> {
        const DOWN: Self = Self::Y;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeUp for Vector<3, T, A> {
        const UP: Self = Self::NEG_Y;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveDown for Vector<3, T, A> {
        const DOWN: Self = Self::Y;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeUp for Vector<4, T, A> {
        const UP: Self = Self::NEG_Y;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveDown for Vector<4, T, A> {
        const DOWN: Self = Self::Y;
    }
}

/// A module for traits with `FORWARD` and `BACKWARD` constants,
/// where forwards is the positive direction.
#[cfg(feature = "forwards")]
pub mod forwards {
    use crate::{Construct, ScalarNegOne, ScalarOne, ScalarZero, VecAlignment, Vector};

    /// A trait for a `FORWARD` constant where forwards is the positive direction.
    pub trait PositiveForward: Construct {
        /// A value that points forwards with magnitude `1` where forwards is the positive direction.
        const FORWARD: Self;
    }

    /// A trait for a `BACKWARD` constant where forwards is the positive direction.
    pub trait NegativeBackward: Construct {
        /// A value that points backwards with magnitude `1` where forwards is the positive direction.
        const BACKWARD: Self;
    }

    impl<T: ScalarOne> PositiveForward for T {
        const FORWARD: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeBackward for T {
        const BACKWARD: Self = Self::NEG_ONE;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveForward for Vector<3, T, A> {
        const FORWARD: Self = Self::Z;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeBackward for Vector<3, T, A> {
        const BACKWARD: Self = Self::NEG_Z;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveForward for Vector<4, T, A> {
        const FORWARD: Self = Self::Z;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeBackward for Vector<4, T, A> {
        const BACKWARD: Self = Self::NEG_Z;
    }
}

/// A module for vectors with `FORWARD` and `BACKWARD` constants,
/// where backwards is the positive direction.
#[cfg(feature = "backwards")]
pub mod backwards {
    use crate::{Construct, ScalarNegOne, ScalarOne, ScalarZero, VecAlignment, Vector};

    /// A trait for a `FORWARD` constant where backwards is the positive direction.
    pub trait NegativeForward: Construct {
        /// A value that points forwards with magnitude `1` where backwards is the positive direction.
        const FORWARD: Self;
    }

    /// A trait for a `BACKWARD` constant where backwards is the positive direction.
    pub trait PositiveBackward: Construct {
        /// A value that points backwards with magnitude `1` where backwards is the positive direction.
        const BACKWARD: Self;
    }

    impl<T: ScalarOne> PositiveBackward for T {
        const BACKWARD: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeForward for T {
        const FORWARD: Self = Self::NEG_ONE;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeForward for Vector<3, T, A> {
        const FORWARD: Self = Self::NEG_Z;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveBackward for Vector<3, T, A> {
        const BACKWARD: Self = Self::Z;
    }

    impl<T: ScalarZero + ScalarNegOne, A: VecAlignment> NegativeForward for Vector<4, T, A> {
        const FORWARD: Self = Self::NEG_Z;
    }

    impl<T: ScalarZero + ScalarOne, A: VecAlignment> PositiveBackward for Vector<4, T, A> {
        const BACKWARD: Self = Self::Z;
    }
}
