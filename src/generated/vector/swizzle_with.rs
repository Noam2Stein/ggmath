// This file is automatically generated.
// To edit this file edit the codegen crate instead.

use crate::vector::{Scalar, VecAlignment, Vector};

impl<T: Scalar, A: VecAlignment> Vector<2, T, A> {
    /// Returns `self` but with the `x` (1st) component set to `value`.
    #[inline(always)]
    pub fn with_x(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 0>(self, value)
    }

    /// Returns `self` but with the `y` (2nd) component set to `value`.
    #[inline(always)]
    pub fn with_y(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_xy(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 0, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_yx(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 1, 0>(self, value)
    }
}

impl<T: Scalar, A: VecAlignment> Vector<2, T, A> {
    /// Version of `Vector::with_x` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_x(mut self, value: T) -> Self {
        self.as_array_mut()[0] = value;

        self
    }

    /// Version of `Vector::with_y` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_y(mut self, value: T) -> Self {
        self.as_array_mut()[1] = value;

        self
    }

    /// Version of `Vector::with_xy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xy(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_yx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yx(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];

        self
    }
}

impl<T: Scalar, A: VecAlignment> Vector<3, T, A> {
    /// Returns `self` but with the `x` (1st) component set to `value`.
    #[inline(always)]
    pub fn with_x(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 0>(self, value)
    }

    /// Returns `self` but with the `y` (2nd) component set to `value`.
    #[inline(always)]
    pub fn with_y(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 1>(self, value)
    }

    /// Returns `self` but with the `z` (3rd) component set to `value`.
    #[inline(always)]
    pub fn with_z(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_xy(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 0, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_xz(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 0, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_yx(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 1, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_yz(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 1, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_zx(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 2, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_zy(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 2, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_xyz(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 0, 1, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_xzy(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 0, 2, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_yxz(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 1, 0, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_yzx(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 1, 2, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_zxy(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 2, 0, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_zyx(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 2, 1, 0>(self, value)
    }
}

impl<T: Scalar, A: VecAlignment> Vector<3, T, A> {
    /// Version of `Vector::with_x` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_x(mut self, value: T) -> Self {
        self.as_array_mut()[0] = value;

        self
    }

    /// Version of `Vector::with_y` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_y(mut self, value: T) -> Self {
        self.as_array_mut()[1] = value;

        self
    }

    /// Version of `Vector::with_z` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_z(mut self, value: T) -> Self {
        self.as_array_mut()[2] = value;

        self
    }

    /// Version of `Vector::with_xy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xy(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_xz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xz(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_yx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yx(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_yz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yz(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_zx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zx(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_zy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zy(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_xyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xyz(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_xzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xzy(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_yxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yxz(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_yzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yzx(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_zxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zxy(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_zyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zyx(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];

        self
    }
}

impl<T: Scalar, A: VecAlignment> Vector<4, T, A> {
    /// Returns `self` but with the `x` (1st) component set to `value`.
    #[inline(always)]
    pub fn with_x(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 0>(self, value)
    }

    /// Returns `self` but with the `y` (2nd) component set to `value`.
    #[inline(always)]
    pub fn with_y(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 1>(self, value)
    }

    /// Returns `self` but with the `z` (3rd) component set to `value`.
    #[inline(always)]
    pub fn with_z(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 2>(self, value)
    }

    /// Returns `self` but with the `w` (4th) component set to `value`.
    #[inline(always)]
    pub fn with_w(self, value: T) -> Self {
        T::vec_with_swizzle1::<_, _, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_xy(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 0, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_xz(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 0, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_xw(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 0, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_yx(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 1, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_yz(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 1, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_yw(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 1, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_zx(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 2, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_zy(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 2, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_zw(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 2, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_wx(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 3, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_wy(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 3, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn with_wz(self, value: Vector<2, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle2::<_, _, 3, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_xyz(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 0, 1, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_xyw(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 0, 1, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_xzy(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 0, 2, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_xzw(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 0, 2, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_xwy(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 0, 3, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_xwz(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 0, 3, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_yxz(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 1, 0, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_yxw(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 1, 0, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_yzx(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 1, 2, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_yzw(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 1, 2, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_ywx(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 1, 3, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_ywz(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 1, 3, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_zxy(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 2, 0, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_zxw(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 2, 0, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_zyx(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 2, 1, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_zyw(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 2, 1, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_zwx(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 2, 3, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_zwy(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 2, 3, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_wxy(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 3, 0, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_wxz(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 3, 0, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_wyx(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 3, 1, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_wyz(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 3, 1, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_wzx(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 3, 2, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn with_wzy(self, value: Vector<3, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle3::<_, _, 3, 2, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_xyzw(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 0, 1, 2, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_xywz(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 0, 1, 3, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_xzyw(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 0, 2, 1, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_xzwy(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 0, 2, 3, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_xwyz(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 0, 3, 1, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_xwzy(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 0, 3, 2, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_yxzw(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 1, 0, 2, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_yxwz(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 1, 0, 3, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_yzxw(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 1, 2, 0, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_yzwx(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 1, 2, 3, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_ywxz(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 1, 3, 0, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_ywzx(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 1, 3, 2, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_zxyw(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 2, 0, 1, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_zxwy(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 2, 0, 3, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_zyxw(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 2, 1, 0, 3>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_zywx(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 2, 1, 3, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_zwxy(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 2, 3, 0, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_zwyx(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 2, 3, 1, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_wxyz(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 3, 0, 1, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_wxzy(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 3, 0, 2, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_wyxz(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 3, 1, 0, 2>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_wyzx(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 3, 1, 2, 0>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_wzxy(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 3, 2, 0, 1>(self, value)
    }

    /// Returns `self` but with:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn with_wzyx(self, value: Vector<4, T, impl VecAlignment>) -> Self {
        T::vec_with_swizzle4::<_, _, 3, 2, 1, 0>(self, value)
    }
}

impl<T: Scalar, A: VecAlignment> Vector<4, T, A> {
    /// Version of `Vector::with_x` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_x(mut self, value: T) -> Self {
        self.as_array_mut()[0] = value;

        self
    }

    /// Version of `Vector::with_y` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_y(mut self, value: T) -> Self {
        self.as_array_mut()[1] = value;

        self
    }

    /// Version of `Vector::with_z` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_z(mut self, value: T) -> Self {
        self.as_array_mut()[2] = value;

        self
    }

    /// Version of `Vector::with_w` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_w(mut self, value: T) -> Self {
        self.as_array_mut()[3] = value;

        self
    }

    /// Version of `Vector::with_xy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xy(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_xz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xz(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_xw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xw(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_yx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yx(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_yz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yz(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_yw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yw(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_zx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zx(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_zy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zy(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_zw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zw(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_wx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wx(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_wy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wy(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_wz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wz(mut self, value: Vector<2, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];

        self
    }

    /// Version of `Vector::with_xyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xyz(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_xyw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xyw(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_xzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xzy(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_xzw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xzw(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_xwy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xwy(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_xwz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xwz(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_yxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yxz(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_yxw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yxw(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_yzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yzx(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_yzw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yzw(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_ywx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_ywx(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_ywz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_ywz(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_zxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zxy(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_zxw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zxw(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_zyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zyx(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_zyw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zyw(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_zwx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zwx(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_zwy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zwy(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_wxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wxy(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_wxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wxz(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_wyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wyx(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_wyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wyz(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_wzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wzx(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_wzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wzy(mut self, value: Vector<3, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];

        self
    }

    /// Version of `Vector::with_xyzw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xyzw(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];
        self.as_array_mut()[3] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_xywz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xywz(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];
        self.as_array_mut()[2] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_xzyw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xzyw(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];
        self.as_array_mut()[3] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_xzwy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xzwy(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];
        self.as_array_mut()[1] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_xwyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xwyz(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];
        self.as_array_mut()[2] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_xwzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_xwzy(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[0] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];
        self.as_array_mut()[1] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_yxzw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yxzw(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];
        self.as_array_mut()[3] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_yxwz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yxwz(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];
        self.as_array_mut()[2] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_yzxw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yzxw(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];
        self.as_array_mut()[3] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_yzwx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_yzwx(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];
        self.as_array_mut()[0] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_ywxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_ywxz(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];
        self.as_array_mut()[2] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_ywzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_ywzx(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[1] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];
        self.as_array_mut()[0] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_zxyw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zxyw(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];
        self.as_array_mut()[3] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_zxwy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zxwy(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];
        self.as_array_mut()[1] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_zyxw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zyxw(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];
        self.as_array_mut()[3] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_zywx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zywx(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[3] = value.as_array()[2];
        self.as_array_mut()[0] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_zwxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zwxy(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];
        self.as_array_mut()[1] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_zwyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_zwyx(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[2] = value.as_array()[0];
        self.as_array_mut()[3] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];
        self.as_array_mut()[0] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_wxyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wxyz(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];
        self.as_array_mut()[2] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_wxzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wxzy(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[0] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];
        self.as_array_mut()[1] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_wyxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wyxz(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];
        self.as_array_mut()[2] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_wyzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wyzx(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[1] = value.as_array()[1];
        self.as_array_mut()[2] = value.as_array()[2];
        self.as_array_mut()[0] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_wzxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wzxy(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[0] = value.as_array()[2];
        self.as_array_mut()[1] = value.as_array()[3];

        self
    }

    /// Version of `Vector::with_wzyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_with_wzyx(mut self, value: Vector<4, T, impl VecAlignment>) -> Self {
        self.as_array_mut()[3] = value.as_array()[0];
        self.as_array_mut()[2] = value.as_array()[1];
        self.as_array_mut()[1] = value.as_array()[2];
        self.as_array_mut()[0] = value.as_array()[3];

        self
    }
}
