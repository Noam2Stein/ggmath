// This file is automatically generated.
// To edit this file edit the codegen crate instead.

use crate::vector::{Scalar, VecAlignment, VecPacked, Vector};

impl<T: Scalar, A: VecAlignment> Vector<2, T, A> {
    /// Returns a mutable reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[0]
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` (2nd) component of `self`
    #[inline(always)]
    pub const fn x_y_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(1),
            )
        }
    }

    /// Returns a mutable vector reference to the `x` and `y` (1st and 2nd) components of `self`.
    #[inline(always)]
    pub const fn xy_mut(&mut self) -> &mut Vector<2, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(0) as *mut Vector<2, T, VecPacked>) }
    }

    /// Returns a mutable reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[1]
    }
}

impl<T: Scalar, A: VecAlignment> Vector<3, T, A> {
    /// Returns a mutable reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[0]
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` (2nd) component of `self`
    #[inline(always)]
    pub const fn x_y_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(1),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` (2nd) component of `self`
    /// - The `z` (3rd) component of `self`
    #[inline(always)]
    pub const fn x_y_z_mut(&mut self) -> (&mut T, &mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(1),
                &mut *self.as_mut_ptr().add(2),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` and `z` (2nd and 3rd) components of `self`
    #[inline(always)]
    pub const fn x_yz_mut(&mut self) -> (&mut T, &mut Vector<2, T, VecPacked>) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *(self.as_mut_ptr().add(1) as *mut Vector<2, T, VecPacked>),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `z` (3rd) component of `self`
    #[inline(always)]
    pub const fn x_z_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(2),
            )
        }
    }

    /// Returns a mutable vector reference to the `x` and `y` (1st and 2nd) components of `self`.
    #[inline(always)]
    pub const fn xy_mut(&mut self) -> &mut Vector<2, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(0) as *mut Vector<2, T, VecPacked>) }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` and `y` (1st and 2nd) components of `self`
    /// - The `z` (3rd) component of `self`
    #[inline(always)]
    pub const fn xy_z_mut(&mut self) -> (&mut Vector<2, T, VecPacked>, &mut T) {
        unsafe {
            (
                &mut *(self.as_mut_ptr().add(0) as *mut Vector<2, T, VecPacked>),
                &mut *self.as_mut_ptr().add(2),
            )
        }
    }

    /// Returns a mutable vector reference to the `x`, `y` and `z` (1st, 2nd and 3rd) components of `self`.
    #[inline(always)]
    pub const fn xyz_mut(&mut self) -> &mut Vector<3, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(0) as *mut Vector<3, T, VecPacked>) }
    }

    /// Returns a mutable reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[1]
    }

    /// Returns a tuple with mutable references to:
    /// - The `y` (2nd) component of `self`
    /// - The `z` (3rd) component of `self`
    #[inline(always)]
    pub const fn y_z_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(1),
                &mut *self.as_mut_ptr().add(2),
            )
        }
    }

    /// Returns a mutable vector reference to the `y` and `z` (2nd and 3rd) components of `self`.
    #[inline(always)]
    pub const fn yz_mut(&mut self) -> &mut Vector<2, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(1) as *mut Vector<2, T, VecPacked>) }
    }

    /// Returns a mutable reference to the `z` (3rd) component of `self`.
    #[inline(always)]
    pub const fn z_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[2]
    }
}

impl<T: Scalar, A: VecAlignment> Vector<4, T, A> {
    /// Returns a mutable reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[0]
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` (2nd) component of `self`
    #[inline(always)]
    pub const fn x_y_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(1),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` (2nd) component of `self`
    /// - The `z` (3rd) component of `self`
    #[inline(always)]
    pub const fn x_y_z_mut(&mut self) -> (&mut T, &mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(1),
                &mut *self.as_mut_ptr().add(2),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` (2nd) component of `self`
    /// - The `z` (3rd) component of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn x_y_z_w_mut(&mut self) -> (&mut T, &mut T, &mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(1),
                &mut *self.as_mut_ptr().add(2),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` (2nd) component of `self`
    /// - The `z` and `w` (3rd and 4th) components of `self`
    #[inline(always)]
    pub const fn x_y_zw_mut(&mut self) -> (&mut T, &mut T, &mut Vector<2, T, VecPacked>) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(1),
                &mut *(self.as_mut_ptr().add(2) as *mut Vector<2, T, VecPacked>),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` (2nd) component of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn x_y_w_mut(&mut self) -> (&mut T, &mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(1),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` and `z` (2nd and 3rd) components of `self`
    #[inline(always)]
    pub const fn x_yz_mut(&mut self) -> (&mut T, &mut Vector<2, T, VecPacked>) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *(self.as_mut_ptr().add(1) as *mut Vector<2, T, VecPacked>),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y` and `z` (2nd and 3rd) components of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn x_yz_w_mut(&mut self) -> (&mut T, &mut Vector<2, T, VecPacked>, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *(self.as_mut_ptr().add(1) as *mut Vector<2, T, VecPacked>),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `y`, `z` and `w` (2nd, 3rd and 4th) components of `self`
    #[inline(always)]
    pub const fn x_yzw_mut(&mut self) -> (&mut T, &mut Vector<3, T, VecPacked>) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *(self.as_mut_ptr().add(1) as *mut Vector<3, T, VecPacked>),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `z` (3rd) component of `self`
    #[inline(always)]
    pub const fn x_z_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(2),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `z` (3rd) component of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn x_z_w_mut(&mut self) -> (&mut T, &mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(2),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `z` and `w` (3rd and 4th) components of `self`
    #[inline(always)]
    pub const fn x_zw_mut(&mut self) -> (&mut T, &mut Vector<2, T, VecPacked>) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *(self.as_mut_ptr().add(2) as *mut Vector<2, T, VecPacked>),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` (1st) component of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn x_w_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(0),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a mutable vector reference to the `x` and `y` (1st and 2nd) components of `self`.
    #[inline(always)]
    pub const fn xy_mut(&mut self) -> &mut Vector<2, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(0) as *mut Vector<2, T, VecPacked>) }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` and `y` (1st and 2nd) components of `self`
    /// - The `z` (3rd) component of `self`
    #[inline(always)]
    pub const fn xy_z_mut(&mut self) -> (&mut Vector<2, T, VecPacked>, &mut T) {
        unsafe {
            (
                &mut *(self.as_mut_ptr().add(0) as *mut Vector<2, T, VecPacked>),
                &mut *self.as_mut_ptr().add(2),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` and `y` (1st and 2nd) components of `self`
    /// - The `z` (3rd) component of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn xy_z_w_mut(&mut self) -> (&mut Vector<2, T, VecPacked>, &mut T, &mut T) {
        unsafe {
            (
                &mut *(self.as_mut_ptr().add(0) as *mut Vector<2, T, VecPacked>),
                &mut *self.as_mut_ptr().add(2),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` and `y` (1st and 2nd) components of `self`
    /// - The `z` and `w` (3rd and 4th) components of `self`
    #[inline(always)]
    pub const fn xy_zw_mut(
        &mut self,
    ) -> (&mut Vector<2, T, VecPacked>, &mut Vector<2, T, VecPacked>) {
        unsafe {
            (
                &mut *(self.as_mut_ptr().add(0) as *mut Vector<2, T, VecPacked>),
                &mut *(self.as_mut_ptr().add(2) as *mut Vector<2, T, VecPacked>),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x` and `y` (1st and 2nd) components of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn xy_w_mut(&mut self) -> (&mut Vector<2, T, VecPacked>, &mut T) {
        unsafe {
            (
                &mut *(self.as_mut_ptr().add(0) as *mut Vector<2, T, VecPacked>),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a mutable vector reference to the `x`, `y` and `z` (1st, 2nd and 3rd) components of `self`.
    #[inline(always)]
    pub const fn xyz_mut(&mut self) -> &mut Vector<3, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(0) as *mut Vector<3, T, VecPacked>) }
    }

    /// Returns a tuple with mutable references to:
    /// - The `x`, `y` and `z` (1st, 2nd and 3rd) components of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn xyz_w_mut(&mut self) -> (&mut Vector<3, T, VecPacked>, &mut T) {
        unsafe {
            (
                &mut *(self.as_mut_ptr().add(0) as *mut Vector<3, T, VecPacked>),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a mutable vector reference to the `x`, `y`, `z` and `w` (1st, 2nd, 3rd and 4th) components of `self`.
    #[inline(always)]
    pub const fn xyzw_mut(&mut self) -> &mut Vector<4, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(0) as *mut Vector<4, T, VecPacked>) }
    }

    /// Returns a mutable reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[1]
    }

    /// Returns a tuple with mutable references to:
    /// - The `y` (2nd) component of `self`
    /// - The `z` (3rd) component of `self`
    #[inline(always)]
    pub const fn y_z_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(1),
                &mut *self.as_mut_ptr().add(2),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `y` (2nd) component of `self`
    /// - The `z` (3rd) component of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn y_z_w_mut(&mut self) -> (&mut T, &mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(1),
                &mut *self.as_mut_ptr().add(2),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `y` (2nd) component of `self`
    /// - The `z` and `w` (3rd and 4th) components of `self`
    #[inline(always)]
    pub const fn y_zw_mut(&mut self) -> (&mut T, &mut Vector<2, T, VecPacked>) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(1),
                &mut *(self.as_mut_ptr().add(2) as *mut Vector<2, T, VecPacked>),
            )
        }
    }

    /// Returns a tuple with mutable references to:
    /// - The `y` (2nd) component of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn y_w_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(1),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a mutable vector reference to the `y` and `z` (2nd and 3rd) components of `self`.
    #[inline(always)]
    pub const fn yz_mut(&mut self) -> &mut Vector<2, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(1) as *mut Vector<2, T, VecPacked>) }
    }

    /// Returns a tuple with mutable references to:
    /// - The `y` and `z` (2nd and 3rd) components of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn yz_w_mut(&mut self) -> (&mut Vector<2, T, VecPacked>, &mut T) {
        unsafe {
            (
                &mut *(self.as_mut_ptr().add(1) as *mut Vector<2, T, VecPacked>),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a mutable vector reference to the `y`, `z` and `w` (2nd, 3rd and 4th) components of `self`.
    #[inline(always)]
    pub const fn yzw_mut(&mut self) -> &mut Vector<3, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(1) as *mut Vector<3, T, VecPacked>) }
    }

    /// Returns a mutable reference to the `z` (3rd) component of `self`.
    #[inline(always)]
    pub const fn z_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[2]
    }

    /// Returns a tuple with mutable references to:
    /// - The `z` (3rd) component of `self`
    /// - The `w` (4th) component of `self`
    #[inline(always)]
    pub const fn z_w_mut(&mut self) -> (&mut T, &mut T) {
        unsafe {
            (
                &mut *self.as_mut_ptr().add(2),
                &mut *self.as_mut_ptr().add(3),
            )
        }
    }

    /// Returns a mutable vector reference to the `z` and `w` (3rd and 4th) components of `self`.
    #[inline(always)]
    pub const fn zw_mut(&mut self) -> &mut Vector<2, T, VecPacked> {
        unsafe { &mut *(self.as_mut_ptr().add(2) as *mut Vector<2, T, VecPacked>) }
    }

    /// Returns a mutable reference to the `w` (4th) component of `self`.
    #[inline(always)]
    pub const fn w_mut(&mut self) -> &mut T {
        &mut self.as_array_mut()[3]
    }
}
