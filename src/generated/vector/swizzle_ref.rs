// This file is automatically generated.
// To edit this file edit the codegen crate instead.

use crate::vector::{Scalar, VecAlignment, VecPacked, Vector};

impl<T: Scalar, A: VecAlignment> Vector<2, T, A> {
    /// Returns a reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_ref(&self) -> &T {
        &self.as_array()[0]
    }

    /// Returns a vector reference to the `x` and `y` (1st and 2nd) components of `self`.
    #[inline(always)]
    pub const fn xy_ref(&self) -> &Vector<2, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(0) as *const [T; 2]) })
    }

    /// Returns a reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_ref(&self) -> &T {
        &self.as_array()[1]
    }
}

impl<T: Scalar, A: VecAlignment> Vector<3, T, A> {
    /// Returns a reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_ref(&self) -> &T {
        &self.as_array()[0]
    }

    /// Returns a vector reference to the `x` and `y` (1st and 2nd) components of `self`.
    #[inline(always)]
    pub const fn xy_ref(&self) -> &Vector<2, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(0) as *const [T; 2]) })
    }

    /// Returns a vector reference to the `x`, `y` and `z` (1st, 2nd and 3rd) components of `self`.
    #[inline(always)]
    pub const fn xyz_ref(&self) -> &Vector<3, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(0) as *const [T; 3]) })
    }

    /// Returns a reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_ref(&self) -> &T {
        &self.as_array()[1]
    }

    /// Returns a vector reference to the `y` and `z` (2nd and 3rd) components of `self`.
    #[inline(always)]
    pub const fn yz_ref(&self) -> &Vector<2, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(1) as *const [T; 2]) })
    }

    /// Returns a reference to the `z` (3rd) component of `self`.
    #[inline(always)]
    pub const fn z_ref(&self) -> &T {
        &self.as_array()[2]
    }
}

impl<T: Scalar, A: VecAlignment> Vector<4, T, A> {
    /// Returns a reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_ref(&self) -> &T {
        &self.as_array()[0]
    }

    /// Returns a vector reference to the `x` and `y` (1st and 2nd) components of `self`.
    #[inline(always)]
    pub const fn xy_ref(&self) -> &Vector<2, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(0) as *const [T; 2]) })
    }

    /// Returns a vector reference to the `x`, `y` and `z` (1st, 2nd and 3rd) components of `self`.
    #[inline(always)]
    pub const fn xyz_ref(&self) -> &Vector<3, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(0) as *const [T; 3]) })
    }

    /// Returns a vector reference to the `x`, `y`, `z` and `w` (1st, 2nd, 3rd and 4th) components of `self`.
    #[inline(always)]
    pub const fn xyzw_ref(&self) -> &Vector<4, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(0) as *const [T; 4]) })
    }

    /// Returns a reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_ref(&self) -> &T {
        &self.as_array()[1]
    }

    /// Returns a vector reference to the `y` and `z` (2nd and 3rd) components of `self`.
    #[inline(always)]
    pub const fn yz_ref(&self) -> &Vector<2, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(1) as *const [T; 2]) })
    }

    /// Returns a vector reference to the `y`, `z` and `w` (2nd, 3rd and 4th) components of `self`.
    #[inline(always)]
    pub const fn yzw_ref(&self) -> &Vector<3, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(1) as *const [T; 3]) })
    }

    /// Returns a reference to the `z` (3rd) component of `self`.
    #[inline(always)]
    pub const fn z_ref(&self) -> &T {
        &self.as_array()[2]
    }

    /// Returns a vector reference to the `z` and `w` (3rd and 4th) components of `self`.
    #[inline(always)]
    pub const fn zw_ref(&self) -> &Vector<2, T, VecPacked> {
        Vector::from_array_ref(unsafe { &*(self.as_ptr().add(2) as *const [T; 2]) })
    }

    /// Returns a reference to the `w` (4th) component of `self`.
    #[inline(always)]
    pub const fn w_ref(&self) -> &T {
        &self.as_array()[3]
    }
}
