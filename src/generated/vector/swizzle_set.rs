// This file is automatically generated.
// To edit this file edit the codegen crate instead.

use crate::vector::{Scalar, VecAlignment, Vector};

impl<T: Scalar, A: VecAlignment> Vector<2, T, A> {
    /// Mutates `self` by setting the `x` (1st) component to `value`.
    #[inline(always)]
    pub fn set_x(&mut self, value: T) {
        *self = self.with_x(value);
    }

    /// Mutates `self` by setting the `y` (2nd) component to `value`.
    #[inline(always)]
    pub fn set_y(&mut self, value: T) {
        *self = self.with_y(value);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_xy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_xy(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_yx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_yx(other);
    }
}

impl<T: Scalar, A: VecAlignment> Vector<2, T, A> {
    /// Version of `Vector::set_x` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_x(&mut self, value: T) {
        *self = self.const_with_x(value);
    }

    /// Version of `Vector::set_y` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_y(&mut self, value: T) {
        *self = self.const_with_y(value);
    }

    /// Version of `Vector::set_xy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_xy(other);
    }

    /// Version of `Vector::set_yx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_yx(other);
    }
}

impl<T: Scalar, A: VecAlignment> Vector<3, T, A> {
    /// Mutates `self` by setting the `x` (1st) component to `value`.
    #[inline(always)]
    pub fn set_x(&mut self, value: T) {
        *self = self.with_x(value);
    }

    /// Mutates `self` by setting the `y` (2nd) component to `value`.
    #[inline(always)]
    pub fn set_y(&mut self, value: T) {
        *self = self.with_y(value);
    }

    /// Mutates `self` by setting the `z` (3rd) component to `value`.
    #[inline(always)]
    pub fn set_z(&mut self, value: T) {
        *self = self.with_z(value);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_xy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_xy(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_xz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_xz(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_yx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_yx(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_yz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_yz(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_zx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_zx(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_zy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_zy(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_xyz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_xyz(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_xzy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_xzy(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_yxz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_yxz(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_yzx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_yzx(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_zxy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_zxy(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_zyx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_zyx(other);
    }
}

impl<T: Scalar, A: VecAlignment> Vector<3, T, A> {
    /// Version of `Vector::set_x` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_x(&mut self, value: T) {
        *self = self.const_with_x(value);
    }

    /// Version of `Vector::set_y` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_y(&mut self, value: T) {
        *self = self.const_with_y(value);
    }

    /// Version of `Vector::set_z` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_z(&mut self, value: T) {
        *self = self.const_with_z(value);
    }

    /// Version of `Vector::set_xy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_xy(other);
    }

    /// Version of `Vector::set_xz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_xz(other);
    }

    /// Version of `Vector::set_yx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_yx(other);
    }

    /// Version of `Vector::set_yz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_yz(other);
    }

    /// Version of `Vector::set_zx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_zx(other);
    }

    /// Version of `Vector::set_zy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_zy(other);
    }

    /// Version of `Vector::set_xyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xyz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_xyz(other);
    }

    /// Version of `Vector::set_xzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xzy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_xzy(other);
    }

    /// Version of `Vector::set_yxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yxz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_yxz(other);
    }

    /// Version of `Vector::set_yzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yzx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_yzx(other);
    }

    /// Version of `Vector::set_zxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zxy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_zxy(other);
    }

    /// Version of `Vector::set_zyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zyx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_zyx(other);
    }
}

impl<T: Scalar, A: VecAlignment> Vector<4, T, A> {
    /// Mutates `self` by setting the `x` (1st) component to `value`.
    #[inline(always)]
    pub fn set_x(&mut self, value: T) {
        *self = self.with_x(value);
    }

    /// Mutates `self` by setting the `y` (2nd) component to `value`.
    #[inline(always)]
    pub fn set_y(&mut self, value: T) {
        *self = self.with_y(value);
    }

    /// Mutates `self` by setting the `z` (3rd) component to `value`.
    #[inline(always)]
    pub fn set_z(&mut self, value: T) {
        *self = self.with_z(value);
    }

    /// Mutates `self` by setting the `w` (4th) component to `value`.
    #[inline(always)]
    pub fn set_w(&mut self, value: T) {
        *self = self.with_w(value);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_xy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_xy(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_xz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_xz(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_xw(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_xw(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_yx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_yx(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_yz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_yz(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_yw(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_yw(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_zx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_zx(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_zy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_zy(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_zw(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_zw(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_wx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_wx(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_wy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_wy(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    #[inline(always)]
    pub fn set_wz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.with_wz(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_xyz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_xyz(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_xyw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_xyw(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_xzy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_xzy(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_xzw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_xzw(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_xwy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_xwy(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_xwz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_xwz(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_yxz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_yxz(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_yxw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_yxw(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_yzx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_yzx(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_yzw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_yzw(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_ywx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_ywx(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_ywz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_ywz(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_zxy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_zxy(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_zxw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_zxw(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_zyx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_zyx(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_zyw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_zyw(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_zwx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_zwx(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_zwy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_zwy(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_wxy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_wxy(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_wxz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_wxz(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_wyx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_wyx(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_wyz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_wyz(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_wzx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_wzx(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    #[inline(always)]
    pub fn set_wzy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.with_wzy(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_xyzw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_xyzw(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_xywz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_xywz(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_xzyw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_xzyw(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_xzwy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_xzwy(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_xwyz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_xwyz(other);
    }

    /// Mutates `self` by setting:
    /// - The `x` (1st) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_xwzy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_xwzy(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_yxzw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_yxzw(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_yxwz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_yxwz(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_yzxw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_yzxw(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_yzwx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_yzwx(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_ywxz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_ywxz(other);
    }

    /// Mutates `self` by setting:
    /// - The `y` (2nd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_ywzx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_ywzx(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_zxyw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_zxyw(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_zxwy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_zxwy(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `w` (4th) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_zyxw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_zyxw(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `w` (4th) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_zywx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_zywx(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_zwxy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_zwxy(other);
    }

    /// Mutates `self` by setting:
    /// - The `z` (3rd) component of `self` set to the `x` (1st) component of `other`
    /// - The `w` (4th) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_zwyx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_zwyx(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_wxyz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_wxyz(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `x` (1st) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_wxzy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_wxzy(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_wyxz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_wyxz(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `y` (2nd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `z` (3rd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_wyzx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_wyzx(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `x` (1st) component of `self` set to the `z` (3rd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_wzxy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_wzxy(other);
    }

    /// Mutates `self` by setting:
    /// - The `w` (4th) component of `self` set to the `x` (1st) component of `other`
    /// - The `z` (3rd) component of `self` set to the `y` (2nd) component of `other`
    /// - The `y` (2nd) component of `self` set to the `z` (3rd) component of `other`
    /// - The `x` (1st) component of `self` set to the `w` (4th) component of `other`
    #[inline(always)]
    pub fn set_wzyx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.with_wzyx(other);
    }
}

impl<T: Scalar, A: VecAlignment> Vector<4, T, A> {
    /// Version of `Vector::set_x` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_x(&mut self, value: T) {
        *self = self.const_with_x(value);
    }

    /// Version of `Vector::set_y` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_y(&mut self, value: T) {
        *self = self.const_with_y(value);
    }

    /// Version of `Vector::set_z` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_z(&mut self, value: T) {
        *self = self.const_with_z(value);
    }

    /// Version of `Vector::set_w` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_w(&mut self, value: T) {
        *self = self.const_with_w(value);
    }

    /// Version of `Vector::set_xy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_xy(other);
    }

    /// Version of `Vector::set_xz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_xz(other);
    }

    /// Version of `Vector::set_xw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xw(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_xw(other);
    }

    /// Version of `Vector::set_yx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_yx(other);
    }

    /// Version of `Vector::set_yz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_yz(other);
    }

    /// Version of `Vector::set_yw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yw(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_yw(other);
    }

    /// Version of `Vector::set_zx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_zx(other);
    }

    /// Version of `Vector::set_zy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_zy(other);
    }

    /// Version of `Vector::set_zw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zw(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_zw(other);
    }

    /// Version of `Vector::set_wx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wx(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_wx(other);
    }

    /// Version of `Vector::set_wy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wy(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_wy(other);
    }

    /// Version of `Vector::set_wz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wz(&mut self, other: Vector<2, T, impl VecAlignment>) {
        *self = self.const_with_wz(other);
    }

    /// Version of `Vector::set_xyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xyz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_xyz(other);
    }

    /// Version of `Vector::set_xyw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xyw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_xyw(other);
    }

    /// Version of `Vector::set_xzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xzy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_xzy(other);
    }

    /// Version of `Vector::set_xzw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xzw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_xzw(other);
    }

    /// Version of `Vector::set_xwy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xwy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_xwy(other);
    }

    /// Version of `Vector::set_xwz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xwz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_xwz(other);
    }

    /// Version of `Vector::set_yxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yxz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_yxz(other);
    }

    /// Version of `Vector::set_yxw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yxw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_yxw(other);
    }

    /// Version of `Vector::set_yzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yzx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_yzx(other);
    }

    /// Version of `Vector::set_yzw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yzw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_yzw(other);
    }

    /// Version of `Vector::set_ywx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_ywx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_ywx(other);
    }

    /// Version of `Vector::set_ywz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_ywz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_ywz(other);
    }

    /// Version of `Vector::set_zxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zxy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_zxy(other);
    }

    /// Version of `Vector::set_zxw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zxw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_zxw(other);
    }

    /// Version of `Vector::set_zyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zyx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_zyx(other);
    }

    /// Version of `Vector::set_zyw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zyw(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_zyw(other);
    }

    /// Version of `Vector::set_zwx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zwx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_zwx(other);
    }

    /// Version of `Vector::set_zwy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zwy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_zwy(other);
    }

    /// Version of `Vector::set_wxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wxy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_wxy(other);
    }

    /// Version of `Vector::set_wxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wxz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_wxz(other);
    }

    /// Version of `Vector::set_wyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wyx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_wyx(other);
    }

    /// Version of `Vector::set_wyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wyz(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_wyz(other);
    }

    /// Version of `Vector::set_wzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wzx(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_wzx(other);
    }

    /// Version of `Vector::set_wzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wzy(&mut self, other: Vector<3, T, impl VecAlignment>) {
        *self = self.const_with_wzy(other);
    }

    /// Version of `Vector::set_xyzw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xyzw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_xyzw(other);
    }

    /// Version of `Vector::set_xywz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xywz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_xywz(other);
    }

    /// Version of `Vector::set_xzyw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xzyw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_xzyw(other);
    }

    /// Version of `Vector::set_xzwy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xzwy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_xzwy(other);
    }

    /// Version of `Vector::set_xwyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xwyz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_xwyz(other);
    }

    /// Version of `Vector::set_xwzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_xwzy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_xwzy(other);
    }

    /// Version of `Vector::set_yxzw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yxzw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_yxzw(other);
    }

    /// Version of `Vector::set_yxwz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yxwz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_yxwz(other);
    }

    /// Version of `Vector::set_yzxw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yzxw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_yzxw(other);
    }

    /// Version of `Vector::set_yzwx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_yzwx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_yzwx(other);
    }

    /// Version of `Vector::set_ywxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_ywxz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_ywxz(other);
    }

    /// Version of `Vector::set_ywzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_ywzx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_ywzx(other);
    }

    /// Version of `Vector::set_zxyw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zxyw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_zxyw(other);
    }

    /// Version of `Vector::set_zxwy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zxwy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_zxwy(other);
    }

    /// Version of `Vector::set_zyxw` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zyxw(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_zyxw(other);
    }

    /// Version of `Vector::set_zywx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zywx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_zywx(other);
    }

    /// Version of `Vector::set_zwxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zwxy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_zwxy(other);
    }

    /// Version of `Vector::set_zwyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_zwyx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_zwyx(other);
    }

    /// Version of `Vector::set_wxyz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wxyz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_wxyz(other);
    }

    /// Version of `Vector::set_wxzy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wxzy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_wxzy(other);
    }

    /// Version of `Vector::set_wyxz` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wyxz(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_wyxz(other);
    }

    /// Version of `Vector::set_wyzx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wyzx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_wyzx(other);
    }

    /// Version of `Vector::set_wzxy` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wzxy(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_wzxy(other);
    }

    /// Version of `Vector::set_wzyx` that supports const contexts.
    /// This version may be less performant than the non-const version.
    ///
    /// When rust const-capabilities improve, this function will be deprecated.
    #[inline(always)]
    pub const fn const_set_wzyx(&mut self, other: Vector<4, T, impl VecAlignment>) {
        *self = self.const_with_wzyx(other);
    }
}
