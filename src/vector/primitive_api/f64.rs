// This file was automatically generated by ggmath's codegen tool.
// Do not modify this file directly!

use crate::{NonSimd, Scalar, Simdness, Vector, specialize};

impl<const N: usize, S: Simdness> Vector<N, f64, S>
where
    f64: Scalar<N, S>,
{
    /// Returns a vector with the largest integer less than or equal to each element of `self`.
    #[inline(always)]
    pub fn floor(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_floor(self))
    }

    /// Returns a vector with the smallest integer greater than or equal to each element of `self`.
    #[inline(always)]
    pub fn ceil(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_ceil(self))
    }

    /// Returns a vector with the nearest integer to each element of `self`.
    /// If an element is half-way between two integers, round away from `0.0`.
    #[inline(always)]
    pub fn round(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_round(self))
    }

    /// Returns a vector with the integer part of each element of `self`.
    /// This means that each element is rounded towards zero.
    #[inline(always)]
    pub fn trunc(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_trunc(self))
    }

    /// Returns a vector with the fractional part of each element of `self`.
    /// This is equivalent to `self - self.trunc()`.
    #[inline(always)]
    pub fn fract(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_fract(self))
    }

    /// Fused multiply-add. Computes `(self * a) + b` with only one rounding error,
    /// yielding a more accurate result than an unfused multiply-add.
    ///
    /// Using `mul_add` *may* be more performant than an unfused multiply-add
    /// if the target architecture has a dedicated `fma` CPU instruction.
    /// However, this is not always true, and will be heavily dependent on designing
    /// algorithms with specific target hardware in mind.
    #[inline(always)]
    pub fn mul_add(self, a: Self, b: Self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_mul_add(self, a, b))
    }

    /// Calculates Euclidean division, the matching method for `rem_euclid`.
    #[inline(always)]
    pub fn div_euclid(self, rhs: Self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_div_euclid(self, rhs))
    }

    /// Calculates the least nonnegative remainder of `self (mod rhs)`.
    #[inline(always)]
    pub fn rem_euclid(self, rhs: Self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_rem_euclid(self, rhs))
    }

    /// Returns a vector with the square root of each element of `self`.
    ///
    /// Returns `NaN` for elements that are negative numbers other than `-0.0`,
    /// but only for those elements.
    #[inline(always)]
    pub fn sqrt(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_sqrt(self))
    }

    /// Returns a vector with the sine of each element of `self`.
    #[inline(always)]
    pub fn sin(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_sin(self))
    }

    /// Returns a vector with the cosine of each element of `self`.
    #[inline(always)]
    pub fn cos(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_cos(self))
    }

    /// Returns a vector with the tangent of each element of `self`.
    #[inline(always)]
    pub fn tan(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_tan(self))
    }

    /// Returns a vector with the arcsine of each element of `self`.
    #[inline(always)]
    pub fn asin(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_asin(self))
    }

    /// Returns a vector with the arccosine of each element of `self`.
    #[inline(always)]
    pub fn acos(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_acos(self))
    }

    /// Returns a vector with the arctangent of each element of `self`.
    #[inline(always)]
    pub fn atan(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_atan(self))
    }

    /// Returns a vector with the reciprocal of each element of `self`, `1.0 / self`.
    #[inline(always)]
    pub fn recip(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_recip(self))
    }

    /// Returns a vector with the maximum of each element of `self` and `other`.
    #[inline(always)]
    pub fn max(self, other: Self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_max(self, other))
    }

    /// Returns a vector with the minimum of each element of `self` and `other`.
    #[inline(always)]
    pub fn min(self, other: Self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_min(self, other))
    }

    /// Returns a vector with the midpoint of each element of `self` and `other`.
    #[inline(always)]
    pub fn midpoint(self, other: Self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_midpoint(self, other))
    }

    /// Returns a vector with the clamp of each element of `self` between each element of `min` and `max`.
    ///
    /// In release mode, semantics may differ if `min` is greater than `max` in any element,
    /// or if `min` or `max` is `NaN`.
    ///
    /// # Panics
    ///
    /// In debug mode, this will panic if `min` is greater than `max` in any element,
    /// or if `min` or `max` is `NaN`.
    #[inline(always)]
    pub fn clamp(self, min: Self, max: Self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_clamp(self, min, max))
    }

    /// Returns a vector with the absolute value of each element of `self`.
    #[inline(always)]
    pub fn abs(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_abs(self))
    }

    /// Returns a vector with elements representing the sign of each element of `self`.
    ///
    /// - `1.0` if an element is positive, `+0.0` or `INFINITY`
    /// - `-1.0` if an element is negative, `-0.0` or `NEG_INFINITY`
    /// - `NaN` if the element is `NaN`.
    #[inline(always)]
    pub fn signum(self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_signum(self))
    }

    /// Returns a vector with the signs of `sign` and the magnitudes of `self`.
    ///
    /// Sign of `0.0` is considered positive.
    #[inline(always)]
    pub fn copysign(self, sign: Self) -> Self {
        specialize!(<f64 as ScalarF64<N, S>>::vec_copysign(self, sign))
    }

    /// Returns the sum of all elements of `self`.
    /// Equivalent to `self.x + self.y + ..`.
    #[inline(always)]
    pub fn sum(self) -> f64 {
        specialize!(<f64 as ScalarF64<N, S>>::vec_sum(self))
    }

    /// Returns the product of all elements of `self`.
    /// Equivalent to `self.x * self.y * ..`.
    #[inline(always)]
    pub fn product(self) -> f64 {
        specialize!(<f64 as ScalarF64<N, S>>::vec_product(self))
    }
}

pub trait ScalarF64<const N: usize, S: Simdness>
where
    f64: Scalar<N, S>,
{
    #[inline(always)]
    fn vec_floor(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::floor)
    }

    #[inline(always)]
    fn vec_ceil(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::ceil)
    }

    #[inline(always)]
    fn vec_round(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::round)
    }

    #[inline(always)]
    fn vec_trunc(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::trunc)
    }

    #[inline(always)]
    fn vec_fract(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::fract)
    }

    #[inline(always)]
    fn vec_mul_add(
        vec: Vector<N, f64, S>,
        a: Vector<N, f64, S>,
        b: Vector<N, f64, S>,
    ) -> Vector<N, f64, S> {
        vec.zip(a).zip(b).map(|((x, a), b)| f64::mul_add(x, a, b))
    }

    #[inline(always)]
    fn vec_div_euclid(vec: Vector<N, f64, S>, rhs: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.zip(rhs).map(|(x, rhs)| f64::div_euclid(x, rhs))
    }

    #[inline(always)]
    fn vec_rem_euclid(vec: Vector<N, f64, S>, rhs: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.zip(rhs).map(|(x, rhs)| f64::rem_euclid(x, rhs))
    }

    #[inline(always)]
    fn vec_sqrt(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::sqrt)
    }

    #[inline(always)]
    fn vec_sin(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::sin)
    }

    #[inline(always)]
    fn vec_cos(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::cos)
    }

    #[inline(always)]
    fn vec_tan(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::tan)
    }

    #[inline(always)]
    fn vec_asin(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::asin)
    }

    #[inline(always)]
    fn vec_acos(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::acos)
    }

    #[inline(always)]
    fn vec_atan(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::atan)
    }

    #[inline(always)]
    fn vec_recip(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::recip)
    }

    #[inline(always)]
    fn vec_max(vec: Vector<N, f64, S>, other: Vector<N, f64, S>) -> Vector<N, f64, S> {
        debug_assert!(vec.iter().all(|x| !x.is_nan()));
        debug_assert!(other.iter().all(|x| !x.is_nan()));

        vec.zip(other).map(|(x, other)| f64::max(x, other))
    }

    #[inline(always)]
    fn vec_min(vec: Vector<N, f64, S>, other: Vector<N, f64, S>) -> Vector<N, f64, S> {
        debug_assert!(vec.iter().all(|x| !x.is_nan()));
        debug_assert!(other.iter().all(|x| !x.is_nan()));

        vec.zip(other).map(|(x, other)| f64::min(x, other))
    }

    #[inline(always)]
    fn vec_midpoint(vec: Vector<N, f64, S>, other: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.zip(other).map(|(x, other)| f64::midpoint(x, other))
    }

    #[inline(always)]
    fn vec_clamp(
        vec: Vector<N, f64, S>,
        min: Vector<N, f64, S>,
        max: Vector<N, f64, S>,
    ) -> Vector<N, f64, S> {
        debug_assert!(min.zip(max).iter().all(|(min, max)| min <= max));
        debug_assert!(min.iter().all(|x| !x.is_nan()));
        debug_assert!(max.iter().all(|x| !x.is_nan()));

        vec.zip(min)
            .zip(max)
            .map(|((x, min), max)| f64::clamp(x, min, max))
    }

    #[inline(always)]
    fn vec_abs(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::abs)
    }

    #[inline(always)]
    fn vec_signum(vec: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.map(f64::signum)
    }

    #[inline(always)]
    fn vec_copysign(vec: Vector<N, f64, S>, sign: Vector<N, f64, S>) -> Vector<N, f64, S> {
        vec.zip(sign).map(|(x, sign)| f64::copysign(x, sign))
    }

    #[inline(always)]
    fn vec_sum(vec: Vector<N, f64, S>) -> f64 {
        vec.iter().sum()
    }

    #[inline(always)]
    fn vec_product(vec: Vector<N, f64, S>) -> f64 {
        vec.iter().product()
    }
}

impl<const N: usize> ScalarF64<N, NonSimd> for f64 where f64: Scalar<N, NonSimd> {}
