// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

use crate::{Scalar, Simdness, Vector};

pub use crate::vec2;
pub use crate::vec2g;
pub use crate::vec2s;
pub use crate::vec3;
pub use crate::vec3g;
pub use crate::vec3s;
pub use crate::vec4;
pub use crate::vec4g;
pub use crate::vec4s;

/// Creates a `Vec2<_>` from the given components and vectors.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example() -> Vec2<f32> {
///     vec2!(1.0, 2.0)
/// }
/// ```
#[macro_export]
macro_rules! vec2 {
    ($($field:expr),* $(,)?) => {
        $crate::Vec2::from(($($field,)*))
    }
}

/// Creates a `Vec3<_>` from the given components and vectors.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example() -> Vec3<f32> {
///     vec3!(1.0, vec2!(2.0, 3.0))
/// }
/// ```
#[macro_export]
macro_rules! vec3 {
    ($($field:expr),* $(,)?) => {
        $crate::Vec3::from(($($field,)*))
    }
}

/// Creates a `Vec4<_>` from the given components and vectors.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example() -> Vec4<f32> {
///     vec4!(1.0, vec2!(2.0, 3.0), 4.0)
/// }
/// ```
#[macro_export]
macro_rules! vec4 {
    ($($field:expr),* $(,)?) => {
        $crate::Vec4::from(($($field,)*))
    }
}

/// Creates a `Vec2S<_>` from the given components and vectors.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example() -> Vec2S<f32> {
///     vec2s!(1.0, 2.0)
/// }
/// ```
#[macro_export]
macro_rules! vec2s {
    ($($field:expr),* $(,)?) => {
        $crate::Vec2S::from(($($field,)*))
    }
}

/// Creates a `Vec3S<_>` from the given components and vectors.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example() -> Vec3S<f32> {
///     vec3s!(1.0, vec2s!(2.0, 3.0))
/// }
/// ```
#[macro_export]
macro_rules! vec3s {
    ($($field:expr),* $(,)?) => {
        $crate::Vec3S::from(($($field,)*))
    }
}

/// Creates a `Vec4S<_>` from the given components and vectors.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example() -> Vec4S<f32> {
///     vec4s!(1.0, vec2s!(2.0, 3.0), 4.0)
/// }
/// ```
#[macro_export]
macro_rules! vec4s {
    ($($field:expr),* $(,)?) => {
        $crate::Vec4S::from(($($field,)*))
    }
}

/// Creates a `Vector<2, _, _>` from the given components and vectors.
/// This macro needs type inference to decide if the vector is SIMD or not.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example<S: Simdness>() -> Vector<2, f32, S> {
///     vec2g!(1.0, 2.0)
/// }
/// ```
#[macro_export]
macro_rules! vec2g {
    ($($field:expr),* $(,)?) => {
        $crate::Vector::<2, _, _>::from(($($field,)*))
    }
}

/// Creates a `Vector<3, _, _>` from the given components and vectors.
/// This macro needs type inference to decide if the vector is SIMD or not.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example<S: Simdness>() -> Vector<3, f32, S> {
///     vec3g!(1.0, vec2g!(2.0, 3.0))
/// }
/// ```
#[macro_export]
macro_rules! vec3g {
    ($($field:expr),* $(,)?) => {
        $crate::Vector::<3, _, _>::from(($($field,)*))
    }
}

/// Creates a `Vector<4, _, _>` from the given components and vectors.
/// This macro needs type inference to decide if the vector is SIMD or not.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// fn example<S: Simdness>() -> Vector<4, f32, S> {
///     vec4g!(1.0, vec2g!(2.0, 3.0), 4.0)
/// }
/// ```
#[macro_export]
macro_rules! vec4g {
    ($($field:expr),* $(,)?) => {
        $crate::Vector::<4, _, _>::from(($($field,)*))
    }
}

impl<T: Scalar, S: Simdness> From<(Vector<2, T, S>,)> for Vector<2, T, S> {
    fn from(value: (Vector<2, T, S>,)) -> Self {
        Self::from_array([value.0.x(), value.0.y()])
    }
}

impl<T: Scalar, S: Simdness> From<(T, T)> for Vector<2, T, S> {
    fn from(value: (T, T)) -> Self {
        Self::from_array([value.0, value.1])
    }
}

impl<T: Scalar, S: Simdness> From<(Vector<3, T, S>,)> for Vector<3, T, S> {
    fn from(value: (Vector<3, T, S>,)) -> Self {
        Self::from_array([value.0.x(), value.0.y(), value.0.z()])
    }
}

impl<T: Scalar, S: Simdness> From<(T, Vector<2, T, S>)> for Vector<3, T, S> {
    fn from(value: (T, Vector<2, T, S>)) -> Self {
        Self::from_array([value.0, value.1.x(), value.1.y()])
    }
}

impl<T: Scalar, S: Simdness> From<(Vector<2, T, S>, T)> for Vector<3, T, S> {
    fn from(value: (Vector<2, T, S>, T)) -> Self {
        Self::from_array([value.0.x(), value.0.y(), value.1])
    }
}

impl<T: Scalar, S: Simdness> From<(T, T, T)> for Vector<3, T, S> {
    fn from(value: (T, T, T)) -> Self {
        Self::from_array([value.0, value.1, value.2])
    }
}

impl<T: Scalar, S: Simdness> From<(Vector<4, T, S>,)> for Vector<4, T, S> {
    fn from(value: (Vector<4, T, S>,)) -> Self {
        Self::from_array([value.0.x(), value.0.y(), value.0.z(), value.0.w()])
    }
}

impl<T: Scalar, S: Simdness> From<(T, Vector<3, T, S>)> for Vector<4, T, S> {
    fn from(value: (T, Vector<3, T, S>)) -> Self {
        Self::from_array([value.0, value.1.x(), value.1.y(), value.1.z()])
    }
}

impl<T: Scalar, S: Simdness> From<(Vector<2, T, S>, Vector<2, T, S>)> for Vector<4, T, S> {
    fn from(value: (Vector<2, T, S>, Vector<2, T, S>)) -> Self {
        Self::from_array([value.0.x(), value.0.y(), value.1.x(), value.1.y()])
    }
}

impl<T: Scalar, S: Simdness> From<(T, T, Vector<2, T, S>)> for Vector<4, T, S> {
    fn from(value: (T, T, Vector<2, T, S>)) -> Self {
        Self::from_array([value.0, value.1, value.2.x(), value.2.y()])
    }
}

impl<T: Scalar, S: Simdness> From<(Vector<3, T, S>, T)> for Vector<4, T, S> {
    fn from(value: (Vector<3, T, S>, T)) -> Self {
        Self::from_array([value.0.x(), value.0.y(), value.0.z(), value.1])
    }
}

impl<T: Scalar, S: Simdness> From<(T, Vector<2, T, S>, T)> for Vector<4, T, S> {
    fn from(value: (T, Vector<2, T, S>, T)) -> Self {
        Self::from_array([value.0, value.1.x(), value.1.y(), value.2])
    }
}

impl<T: Scalar, S: Simdness> From<(Vector<2, T, S>, T, T)> for Vector<4, T, S> {
    fn from(value: (Vector<2, T, S>, T, T)) -> Self {
        Self::from_array([value.0.x(), value.0.y(), value.1, value.2])
    }
}

impl<T: Scalar, S: Simdness> From<(T, T, T, T)> for Vector<4, T, S> {
    fn from(value: (T, T, T, T)) -> Self {
        Self::from_array([value.0, value.1, value.2, value.3])
    }
}
