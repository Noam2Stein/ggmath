// This file was generated by a codegen tool.
// To modify this file, modify the source code of the codegen tool.

pub use crate::{
    ElementOfVector, Simdness, Vector, vec2, vec2g, vec2s, vec3, vec3g, vec3s, vec4, vec4g, vec4s,
};

/// Creates a [`Vector<2, T, Simd>`] from the given elements and vectors.
///
/// Example
///
/// ```
/// use ggmath::{vec2, Vec2};
///
/// assert_eq!(vec2!(1, 2), Vec2::from_array([1, 2]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec2!(25), Vec2::from_array([25, 25]));
/// ```
#[macro_export]
macro_rules! vec2 {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<2, _, $crate::Simd>::from(($($x,)*))
    }
}

/// Creates a [`Vector<3, T, Simd>`] from the given elements and vectors.
///
/// Example
///
/// ```
/// use ggmath::{vec2, vec3, Vec3};
///
/// assert_eq!(vec3!(1, 2, 3), Vec3::from_array([1, 2, 3]));
/// assert_eq!(vec3!(1, vec2!(2, 3)), Vec3::from_array([1, 2, 3]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec3!(25), Vec3::from_array([25, 25, 25]));
/// ```
#[macro_export]
macro_rules! vec3 {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<3, _, $crate::Simd>::from(($($x,)*))
    }
}

/// Creates a [`Vector<4, T, Simd>`] from the given elements and vectors.
///
/// Example
///
/// ```
/// use ggmath::{vec2, vec4, Vec4};
///
/// assert_eq!(vec4!(1, 2, 3, 4), Vec4::from_array([1, 2, 3, 4]));
/// assert_eq!(vec4!(1, vec2!(2, 3), 4), Vec4::from_array([1, 2, 3, 4]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec4!(25), Vec4::from_array([25, 25, 25, 25]));
/// ```
#[macro_export]
macro_rules! vec4 {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<4, _, $crate::Simd>::from(($($x,)*))
    }
}

/// Creates a [`Vector<2, T, NonSimd>`] from the given elements and vectors.
///
/// Example
///
/// ```
/// use ggmath::{vec2s, Vec2S};
///
/// assert_eq!(vec2s!(1, 2), Vec2S::from_array([1, 2]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec2s!(25), Vec2S::from_array([25, 25]));
/// ```
#[macro_export]
macro_rules! vec2s {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<2, _, $crate::NonSimd>::from(($($x,)*))
    }
}

/// Creates a [`Vector<3, T, NonSimd>`] from the given elements and vectors.
///
/// Example
///
/// ```
/// use ggmath::{vec2s, vec3s, Vec3S};
///
/// assert_eq!(vec3s!(1, 2, 3), Vec3S::from_array([1, 2, 3]));
/// assert_eq!(vec3s!(1, vec2s!(2, 3)), Vec3S::from_array([1, 2, 3]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec3s!(25), Vec3S::from_array([25, 25, 25]));
/// ```
#[macro_export]
macro_rules! vec3s {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<3, _, $crate::NonSimd>::from(($($x,)*))
    }
}

/// Creates a [`Vector<4, T, NonSimd>`] from the given elements and vectors.
///
/// Example
///
/// ```
/// use ggmath::{vec2s, vec4s, Vec4S};
///
/// assert_eq!(vec4s!(1, 2, 3, 4), Vec4S::from_array([1, 2, 3, 4]));
/// assert_eq!(vec4s!(1, vec2s!(2, 3), 4), Vec4S::from_array([1, 2, 3, 4]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec4s!(25), Vec4S::from_array([25, 25, 25, 25]));
/// ```
#[macro_export]
macro_rules! vec4s {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<4, _, $crate::NonSimd>::from(($($x,)*))
    }
}

/// Creates a [`Vector<2, T, S>`] from the given elements and vectors,
/// and uses type-inference to determine if the vector is [`Simd`] or [`NonSimd`].
///
/// Example
///
/// ```
/// use ggmath::{vec2g, Vec2};
///
/// assert_eq!(vec2g!(1, 2), Vec2::from_array([1, 2]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec2g!(25), Vec2::from_array([25, 25]));
/// ```
#[macro_export]
macro_rules! vec2g {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<2, _, _>::from(($($x,)*))
    }
}

/// Creates a [`Vector<3, T, S>`] from the given elements and vectors,
/// and uses type-inference to determine if the vector is [`Simd`] or [`NonSimd`].
///
/// Example
///
/// ```
/// use ggmath::{vec2g, vec3g, Vec3, Vec3S};
///
/// assert_eq!(vec3g!(1, 2, 3), Vec3::from_array([1, 2, 3]));
/// assert_eq!(vec3g!(1, vec2g!(2, 3)), Vec3S::from_array([1, 2, 3]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec3g!(25), Vec3::from_array([25, 25, 25]));
/// ```
#[macro_export]
macro_rules! vec3g {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<3, _, _>::from(($($x,)*))
    }
}

/// Creates a [`Vector<4, T, S>`] from the given elements and vectors,
/// and uses type-inference to determine if the vector is [`Simd`] or [`NonSimd`].
///
/// Example
///
/// ```
/// use ggmath::{vec2g, vec4g, Vec4, Vec4S};
///
/// assert_eq!(vec4g!(1, 2, 3, 4), Vec4::from_array([1, 2, 3, 4]));
/// assert_eq!(vec4g!(1, vec2g!(2, 3), 4), Vec4S::from_array([1, 2, 3, 4]));
///
/// // Splat a single value into all elements
/// assert_eq!(vec4g!(25), Vec4::from_array([25, 25, 25, 25]));
/// ```
#[macro_export]
macro_rules! vec4g {
    ($($x:expr),* $(,)?) => {
        $crate::Vector::<4, _, _>::from(($($x,)*))
    }
}

impl<T: ElementOfVector<2, S>, S: Simdness> From<(T, T)> for Vector<2, T, S> {
    #[inline(always)]
    fn from(value: (T, T)) -> Self {
        Vector::from_array([value.0, value.1])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S>, S: Simdness> From<(T, Vector<1, T, S>)>
    for Vector<2, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0, value.1[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S>, S: Simdness> From<(Vector<1, T, S>, T)>
    for Vector<2, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, T)) -> Self {
        Vector::from_array([value.0[0], value.1])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<1, T, S>)> for Vector<2, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1[0]])
    }
}

impl<T: ElementOfVector<3, S>, S: Simdness> From<(T, T, T)> for Vector<3, T, S> {
    #[inline(always)]
    fn from(value: (T, T, T)) -> Self {
        Vector::from_array([value.0, value.1, value.2])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S>, S: Simdness> From<(T, T, Vector<1, T, S>)>
    for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (T, T, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0, value.1, value.2[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S>, S: Simdness> From<(T, Vector<1, T, S>, T)>
    for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<1, T, S>, T)) -> Self {
        Vector::from_array([value.0, value.1[0], value.2])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S>, S: Simdness>
    From<(T, Vector<1, T, S>, Vector<1, T, S>)> for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<1, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0, value.1[0], value.2[0]])
    }
}

impl<T: ElementOfVector<2, S> + ElementOfVector<3, S>, S: Simdness> From<(T, Vector<2, T, S>)>
    for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<2, T, S>)) -> Self {
        Vector::from_array([value.0, value.1[0], value.1[1]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S>, S: Simdness> From<(Vector<1, T, S>, T, T)>
    for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, T, T)) -> Self {
        Vector::from_array([value.0[0], value.1, value.2])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S>, S: Simdness>
    From<(Vector<1, T, S>, T, Vector<1, T, S>)> for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, T, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1, value.2[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<1, T, S>, T)> for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<1, T, S>, T)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.2])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<1, T, S>, Vector<1, T, S>)> for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<1, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.2[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<3, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<2, T, S>)> for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<2, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.1[1]])
    }
}

impl<T: ElementOfVector<2, S> + ElementOfVector<3, S>, S: Simdness> From<(Vector<2, T, S>, T)>
    for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<2, T, S>, T)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.1])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<3, S>, S: Simdness>
    From<(Vector<2, T, S>, Vector<1, T, S>)> for Vector<3, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<2, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.1[0]])
    }
}

impl<T: ElementOfVector<4, S>, S: Simdness> From<(T, T, T, T)> for Vector<4, T, S> {
    #[inline(always)]
    fn from(value: (T, T, T, T)) -> Self {
        Vector::from_array([value.0, value.1, value.2, value.3])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness> From<(T, T, T, Vector<1, T, S>)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, T, T, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0, value.1, value.2, value.3[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness> From<(T, T, Vector<1, T, S>, T)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, T, Vector<1, T, S>, T)) -> Self {
        Vector::from_array([value.0, value.1, value.2[0], value.3])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(T, T, Vector<1, T, S>, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, T, Vector<1, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0, value.1, value.2[0], value.3[0]])
    }
}

impl<T: ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness> From<(T, T, Vector<2, T, S>)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, T, Vector<2, T, S>)) -> Self {
        Vector::from_array([value.0, value.1, value.2[0], value.2[1]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness> From<(T, Vector<1, T, S>, T, T)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<1, T, S>, T, T)) -> Self {
        Vector::from_array([value.0, value.1[0], value.2, value.3])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(T, Vector<1, T, S>, T, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<1, T, S>, T, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0, value.1[0], value.2, value.3[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(T, Vector<1, T, S>, Vector<1, T, S>, T)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<1, T, S>, Vector<1, T, S>, T)) -> Self {
        Vector::from_array([value.0, value.1[0], value.2[0], value.3])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(T, Vector<1, T, S>, Vector<1, T, S>, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<1, T, S>, Vector<1, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0, value.1[0], value.2[0], value.3[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(T, Vector<1, T, S>, Vector<2, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<1, T, S>, Vector<2, T, S>)) -> Self {
        Vector::from_array([value.0, value.1[0], value.2[0], value.2[1]])
    }
}

impl<T: ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness> From<(T, Vector<2, T, S>, T)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<2, T, S>, T)) -> Self {
        Vector::from_array([value.0, value.1[0], value.1[1], value.2])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(T, Vector<2, T, S>, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<2, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0, value.1[0], value.1[1], value.2[0]])
    }
}

impl<T: ElementOfVector<3, S> + ElementOfVector<4, S>, S: Simdness> From<(T, Vector<3, T, S>)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (T, Vector<3, T, S>)) -> Self {
        Vector::from_array([value.0, value.1[0], value.1[1], value.1[2]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness> From<(Vector<1, T, S>, T, T, T)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, T, T, T)) -> Self {
        Vector::from_array([value.0[0], value.1, value.2, value.3])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, T, T, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, T, T, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1, value.2, value.3[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, T, Vector<1, T, S>, T)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, T, Vector<1, T, S>, T)) -> Self {
        Vector::from_array([value.0[0], value.1, value.2[0], value.3])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, T, Vector<1, T, S>, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, T, Vector<1, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1, value.2[0], value.3[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, T, Vector<2, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, T, Vector<2, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1, value.2[0], value.2[1]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<1, T, S>, T, T)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<1, T, S>, T, T)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.2, value.3])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<1, T, S>, T, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<1, T, S>, T, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.2, value.3[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<1, T, S>, Vector<1, T, S>, T)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<1, T, S>, Vector<1, T, S>, T)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.2[0], value.3])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<4, S>, S: Simdness>
    From<(
        Vector<1, T, S>,
        Vector<1, T, S>,
        Vector<1, T, S>,
        Vector<1, T, S>,
    )> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(
        value: (
            Vector<1, T, S>,
            Vector<1, T, S>,
            Vector<1, T, S>,
            Vector<1, T, S>,
        ),
    ) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.2[0], value.3[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<1, T, S>, Vector<2, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<1, T, S>, Vector<2, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.2[0], value.2[1]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<2, T, S>, T)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<2, T, S>, T)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.1[1], value.2])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<2, T, S>, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<2, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.1[1], value.2[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<1, T, S>, Vector<3, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<1, T, S>, Vector<3, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.1[0], value.1[1], value.1[2]])
    }
}

impl<T: ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness> From<(Vector<2, T, S>, T, T)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<2, T, S>, T, T)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.1, value.2])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<2, T, S>, T, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<2, T, S>, T, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.1, value.2[0]])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<2, T, S>, Vector<1, T, S>, T)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<2, T, S>, Vector<1, T, S>, T)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.1[0], value.2])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<2, T, S>, Vector<1, T, S>, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<2, T, S>, Vector<1, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.1[0], value.2[0]])
    }
}

impl<T: ElementOfVector<2, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<2, T, S>, Vector<2, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<2, T, S>, Vector<2, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.1[0], value.1[1]])
    }
}

impl<T: ElementOfVector<3, S> + ElementOfVector<4, S>, S: Simdness> From<(Vector<3, T, S>, T)>
    for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<3, T, S>, T)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.0[2], value.1])
    }
}

impl<T: ElementOfVector<1, S> + ElementOfVector<3, S> + ElementOfVector<4, S>, S: Simdness>
    From<(Vector<3, T, S>, Vector<1, T, S>)> for Vector<4, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<3, T, S>, Vector<1, T, S>)) -> Self {
        Vector::from_array([value.0[0], value.0[1], value.0[2], value.1[0]])
    }
}

impl<const N: usize, T: ElementOfVector<N, S>, S: Simdness> From<(Vector<N, T, S>,)>
    for Vector<N, T, S>
{
    #[inline(always)]
    fn from(value: (Vector<N, T, S>,)) -> Self {
        value.0
    }
}

impl<const N: usize, T: ElementOfVector<N, S>, S: Simdness> From<(T,)> for Vector<N, T, S> {
    #[inline(always)]
    fn from(value: (T,)) -> Self {
        Self::splat(value.0)
    }
}
