// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

use core::mem::transmute_copy;

use crate::{Usize, Scalar, VecAlignment, VecAligned, VecPacked, VecLen, Vector, Vec2, Vec3, Vec4};

#[doc=" A trait for scalar types that have a `0` value."]
#[doc=""]
#[doc=" This trait along with `ScalarOne` and `ScalarNegOne`"]
#[doc=" automatically enables direction constants like `RIGHT` if positive-direction features are enabled."]
pub trait ScalarZero: Scalar {
    #[doc=" The zero value of the scalar type."]
    const ZERO: Self;

    /// A vec2 of all `0`s.
    const VEC2_ZERO: Vec2<Self>;/// A vec3 of all `0`s.
    const VEC3_ZERO: Vec3<Self>;/// A vec4 of all `0`s.
    const VEC4_ZERO: Vec4<Self>;
}

#[doc=" A trait for scalar types that have a `1` value."]
#[doc=""]
#[doc=" This trait along with `ScalarZero` and `ScalarNegOne`"]
#[doc=" automatically enables direction constants like `RIGHT` if positive-direction features are enabled."]
pub trait ScalarOne: ScalarZero {
    #[doc=" The one value of the scalar type."]
    const ONE: Self;

    /// A vec2 of all `1`s.
    const VEC2_ONE: Vec2<Self>;

    /// A vec2 that points to the positive `x` direction with magnitude `1`.
    const VEC2_X: Vec2<Self>;/// A vec2 that points to the positive `y` direction with magnitude `1`.
    const VEC2_Y: Vec2<Self>;/// A vec3 of all `1`s.
    const VEC3_ONE: Vec3<Self>;

    /// A vec3 that points to the positive `x` direction with magnitude `1`.
    const VEC3_X: Vec3<Self>;/// A vec3 that points to the positive `y` direction with magnitude `1`.
    const VEC3_Y: Vec3<Self>;/// A vec3 that points to the positive `z` direction with magnitude `1`.
    const VEC3_Z: Vec3<Self>;/// A vec4 of all `1`s.
    const VEC4_ONE: Vec4<Self>;

    /// A vec4 that points to the positive `x` direction with magnitude `1`.
    const VEC4_X: Vec4<Self>;/// A vec4 that points to the positive `y` direction with magnitude `1`.
    const VEC4_Y: Vec4<Self>;/// A vec4 that points to the positive `z` direction with magnitude `1`.
    const VEC4_Z: Vec4<Self>;/// A vec4 that points to the positive `w` direction with magnitude `1`.
    const VEC4_W: Vec4<Self>;
}

#[doc=" A trait for scalar types that have a `-1` value."]
#[doc=""]
#[doc=" This trait along with `ScalarZero` and `ScalarOne`"]
#[doc=" automatically enables direction constants like `RIGHT` if positive-direction features are enabled."]
pub trait ScalarNegOne: ScalarZero {
    #[doc=" The negative one value of the scalar type."]
    const NEG_ONE: Self;

    /// A vec2 of all `-1`s.
    const VEC2_NEG_ONE: Vec2<Self>;

    /// A vec2 that points to the negative `x` direction with magnitude `1`.
    const VEC2_NEG_X: Vec2<Self>;/// A vec2 that points to the negative `y` direction with magnitude `1`.
    const VEC2_NEG_Y: Vec2<Self>;/// A vec3 of all `-1`s.
    const VEC3_NEG_ONE: Vec3<Self>;

    /// A vec3 that points to the negative `x` direction with magnitude `1`.
    const VEC3_NEG_X: Vec3<Self>;/// A vec3 that points to the negative `y` direction with magnitude `1`.
    const VEC3_NEG_Y: Vec3<Self>;/// A vec3 that points to the negative `z` direction with magnitude `1`.
    const VEC3_NEG_Z: Vec3<Self>;/// A vec4 of all `-1`s.
    const VEC4_NEG_ONE: Vec4<Self>;

    /// A vec4 that points to the negative `x` direction with magnitude `1`.
    const VEC4_NEG_X: Vec4<Self>;/// A vec4 that points to the negative `y` direction with magnitude `1`.
    const VEC4_NEG_Y: Vec4<Self>;/// A vec4 that points to the negative `z` direction with magnitude `1`.
    const VEC4_NEG_Z: Vec4<Self>;/// A vec4 that points to the negative `w` direction with magnitude `1`.
    const VEC4_NEG_W: Vec4<Self>;
}

impl<const N: usize, T: ScalarZero, A: VecAlignment> Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    #[doc=" A vector of all `0`s."]
    pub const ZERO: Self = {
        unsafe {
            if A::IS_ALIGNED {
                match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_ZERO),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_ZERO),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_ZERO),}
            } else {
                return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector([T::ZERO; N]));
            }
        }

        unreachable!("unusual vector type");
    };
}

impl<const N: usize, T: ScalarOne, A: VecAlignment> Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    #[doc=" A vector of all `1`s."]
    pub const ONE: Self = {
        unsafe {
            if A::IS_ALIGNED {
                match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_ONE),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_ONE),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_ONE),}
            } else {
                return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector([T::ONE; N]));
            }
        }

        unreachable!("unusual vector type");
    };
}

impl<const N: usize, T: ScalarNegOne, A: VecAlignment> Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    #[doc=" A vector of all `-1`s."]
    pub const NEG_ONE: Self = {
        unsafe {
            if A::IS_ALIGNED {
                match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_ONE),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_ONE),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_ONE),}
            } else {
                return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector([T::NEG_ONE; N]));
            }
        }

        unreachable!("unusual vector type");
    };
}

impl<T: ScalarOne, A: VecAlignment> Vector<2, T, A> {/// A vector that points to the positive `x` direction with magnitude `1`.
pub const X: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_X),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_X),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_X),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ONE", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the positive `y` direction with magnitude `1`.
pub const Y: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_Y),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_Y),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_Y),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ONE"]));
        }
    }

    unreachable!("unusual vector type");
};}impl<T: ScalarOne, A: VecAlignment> Vector<3, T, A> {/// A vector that points to the positive `x` direction with magnitude `1`.
pub const X: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_X),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_X),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_X),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ONE", "T::ZERO", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the positive `y` direction with magnitude `1`.
pub const Y: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_Y),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_Y),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_Y),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ONE", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the positive `z` direction with magnitude `1`.
pub const Z: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_Z),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_Z),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_Z),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ZERO", "T::ONE"]));
        }
    }

    unreachable!("unusual vector type");
};}impl<T: ScalarOne, A: VecAlignment> Vector<4, T, A> {/// A vector that points to the positive `x` direction with magnitude `1`.
pub const X: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_X),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_X),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_X),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ONE", "T::ZERO", "T::ZERO", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the positive `y` direction with magnitude `1`.
pub const Y: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_Y),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_Y),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_Y),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ONE", "T::ZERO", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the positive `z` direction with magnitude `1`.
pub const Z: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_Z),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_Z),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_Z),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ZERO", "T::ONE", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the positive `w` direction with magnitude `1`.
pub const W: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_W),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_W),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_W),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ZERO", "T::ZERO", "T::ONE"]));
        }
    }

    unreachable!("unusual vector type");
};}

impl<T: ScalarNegOne, A: VecAlignment> Vector<2, T, A> {/// A vector that points to the negative `x` direction with magnitude `1`.
pub const NEG_X: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_X),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_X),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_X),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::NEG_ONE", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the negative `y` direction with magnitude `1`.
pub const NEG_Y: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_Y),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_Y),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_Y),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::NEG_ONE"]));
        }
    }

    unreachable!("unusual vector type");
};}impl<T: ScalarNegOne, A: VecAlignment> Vector<3, T, A> {/// A vector that points to the negative `x` direction with magnitude `1`.
pub const NEG_X: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_X),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_X),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_X),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::NEG_ONE", "T::ZERO", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the negative `y` direction with magnitude `1`.
pub const NEG_Y: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_Y),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_Y),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_Y),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::NEG_ONE", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the negative `z` direction with magnitude `1`.
pub const NEG_Z: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_Z),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_Z),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_Z),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ZERO", "T::NEG_ONE"]));
        }
    }

    unreachable!("unusual vector type");
};}impl<T: ScalarNegOne, A: VecAlignment> Vector<4, T, A> {/// A vector that points to the negative `x` direction with magnitude `1`.
pub const NEG_X: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_X),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_X),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_X),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::NEG_ONE", "T::ZERO", "T::ZERO", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the negative `y` direction with magnitude `1`.
pub const NEG_Y: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_Y),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_Y),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_Y),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::NEG_ONE", "T::ZERO", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the negative `z` direction with magnitude `1`.
pub const NEG_Z: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_Z),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_Z),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_Z),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ZERO", "T::NEG_ONE", "T::ZERO"]));
        }
    }

    unreachable!("unusual vector type");
};/// A vector that points to the negative `w` direction with magnitude `1`.
pub const NEG_W: Self = {
    unsafe {
        if A::IS_ALIGNED {
            match N {2 => transmute_copy::<Vector<2, T, VecAligned>, Vector<N, T, A>>(T::VEC2_NEG_W),3 => transmute_copy::<Vector<3, T, VecAligned>, Vector<N, T, A>>(T::VEC3_NEG_W),4 => transmute_copy::<Vector<4, T, VecAligned>, Vector<N, T, A>>(T::VEC4_NEG_W),}
        } else {
            return transmute_copy::<Vector<N, T, VecPacked>, Vector<N, T, A>>(Vector(["T::ZERO", "T::ZERO", "T::ZERO", "T::NEG_ONE"]));
        }
    }

    unreachable!("unusual vector type");
};}

/// Traits with `RIGHT` and `LEFT constants where right is the positive direction.
#[cfg(feature = "dir_a_lower")]
pub mod right {
    use crate::{
        Construct,
        ScalarZero,
        ScalarOne,
        ScalarNegOne,
        VecAlignment,
        Vector,
    };

    /// A trait for a `RIGHT` constant where right is the positive direction.
    pub trait PositiveRight: Construct {
        /// A value that points right with magnitude `1` where right is the positive direction.
        const RIGHT: Self;
    }

    /// A trait for a `LEFT` constant where right is the positive direction.
    pub trait NegativeLeft: Construct {
        /// A value that points left with magnitude `1` where right is the positive direction.
        const LEFT: Self;
    }

    impl<T: ScalarOne> PositiveRight for T {
        const RIGHT: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeLeft for T {
        const LEFT: Self = Self::NEG_ONE;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveRight for Vector<2, T, A> {
        const RIGHT: Self = Self::X;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeLeft for Vector<2, T, A> {
        const LEFT: Self = Self::NEG_X;
    }impl<T: ScalarOne, A: VecAlignment> PositiveRight for Vector<3, T, A> {
        const RIGHT: Self = Self::X;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeLeft for Vector<3, T, A> {
        const LEFT: Self = Self::NEG_X;
    }impl<T: ScalarOne, A: VecAlignment> PositiveRight for Vector<4, T, A> {
        const RIGHT: Self = Self::X;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeLeft for Vector<4, T, A> {
        const LEFT: Self = Self::NEG_X;
    }
}

/// Traits with `RIGHT` and `LEFT constants where left is the positive direction.
#[cfg(feature = "dir_a_lower")]
pub mod left {
    use crate::{
        Construct,
        ScalarZero,
        ScalarOne,
        ScalarNegOne,
        VecAlignment,
        Vector,
    };

    /// A trait for a `RIGHT` constant where left is the positive direction.
    pub trait NegativeRight: Construct {
        /// A value that points right with magnitude `1` where left is the positive direction.
        const RIGHT: Self;
    }

    /// A trait for a `LEFT` constant where left is the positive direction.
    pub trait PositiveLeft: Construct {
        /// A value that points left with magnitude `1` where left is the positive direction.
        const LEFT: Self;
    }

    impl<T: ScalarNegOne> NegativeRight for T {
        const RIGHT: Self = Self::NEG_ONE;
    }

    impl<T: ScalarOne> PositiveLeft for T {
        const LEFT: Self = Self::ONE;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeRight for Vector<2, T, A> {
        const RIGHT: Self = Self::NEG_X;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveLeft for Vector<2, T, A> {
        const LEFT: Self = Self::X;
    }impl<T: ScalarNegOne, A: VecAlignment> NegativeRight for Vector<3, T, A> {
        const RIGHT: Self = Self::NEG_X;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveLeft for Vector<3, T, A> {
        const LEFT: Self = Self::X;
    }impl<T: ScalarNegOne, A: VecAlignment> NegativeRight for Vector<4, T, A> {
        const RIGHT: Self = Self::NEG_X;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveLeft for Vector<4, T, A> {
        const LEFT: Self = Self::X;
    }
}

/// Traits with `UP` and `DOWN constants where up is the positive direction.
#[cfg(feature = "dir_a_lower")]
pub mod up {
    use crate::{
        Construct,
        ScalarZero,
        ScalarOne,
        ScalarNegOne,
        VecAlignment,
        Vector,
    };

    /// A trait for a `UP` constant where up is the positive direction.
    pub trait PositiveUp: Construct {
        /// A value that points up with magnitude `1` where up is the positive direction.
        const UP: Self;
    }

    /// A trait for a `DOWN` constant where up is the positive direction.
    pub trait NegativeDown: Construct {
        /// A value that points down with magnitude `1` where up is the positive direction.
        const DOWN: Self;
    }

    impl<T: ScalarOne> PositiveUp for T {
        const UP: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeDown for T {
        const DOWN: Self = Self::NEG_ONE;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveUp for Vector<2, T, A> {
        const UP: Self = Self::Y;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeDown for Vector<2, T, A> {
        const DOWN: Self = Self::NEG_Y;
    }impl<T: ScalarOne, A: VecAlignment> PositiveUp for Vector<3, T, A> {
        const UP: Self = Self::Y;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeDown for Vector<3, T, A> {
        const DOWN: Self = Self::NEG_Y;
    }impl<T: ScalarOne, A: VecAlignment> PositiveUp for Vector<4, T, A> {
        const UP: Self = Self::Y;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeDown for Vector<4, T, A> {
        const DOWN: Self = Self::NEG_Y;
    }
}

/// Traits with `UP` and `DOWN constants where down is the positive direction.
#[cfg(feature = "dir_a_lower")]
pub mod down {
    use crate::{
        Construct,
        ScalarZero,
        ScalarOne,
        ScalarNegOne,
        VecAlignment,
        Vector,
    };

    /// A trait for a `UP` constant where down is the positive direction.
    pub trait NegativeUp: Construct {
        /// A value that points up with magnitude `1` where down is the positive direction.
        const UP: Self;
    }

    /// A trait for a `DOWN` constant where down is the positive direction.
    pub trait PositiveDown: Construct {
        /// A value that points down with magnitude `1` where down is the positive direction.
        const DOWN: Self;
    }

    impl<T: ScalarNegOne> NegativeUp for T {
        const UP: Self = Self::NEG_ONE;
    }

    impl<T: ScalarOne> PositiveDown for T {
        const DOWN: Self = Self::ONE;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeUp for Vector<2, T, A> {
        const UP: Self = Self::NEG_Y;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveDown for Vector<2, T, A> {
        const DOWN: Self = Self::Y;
    }impl<T: ScalarNegOne, A: VecAlignment> NegativeUp for Vector<3, T, A> {
        const UP: Self = Self::NEG_Y;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveDown for Vector<3, T, A> {
        const DOWN: Self = Self::Y;
    }impl<T: ScalarNegOne, A: VecAlignment> NegativeUp for Vector<4, T, A> {
        const UP: Self = Self::NEG_Y;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveDown for Vector<4, T, A> {
        const DOWN: Self = Self::Y;
    }
}

/// Traits with `FORWARD` and `BACKWARD constants where forward is the positive direction.
#[cfg(feature = "dir_a_lower")]
pub mod forward {
    use crate::{
        Construct,
        ScalarZero,
        ScalarOne,
        ScalarNegOne,
        VecAlignment,
        Vector,
    };

    /// A trait for a `FORWARD` constant where forward is the positive direction.
    pub trait PositiveForward: Construct {
        /// A value that points forward with magnitude `1` where forward is the positive direction.
        const FORWARD: Self;
    }

    /// A trait for a `BACKWARD` constant where forward is the positive direction.
    pub trait NegativeBackward: Construct {
        /// A value that points backward with magnitude `1` where forward is the positive direction.
        const BACKWARD: Self;
    }

    impl<T: ScalarOne> PositiveForward for T {
        const FORWARD: Self = Self::ONE;
    }

    impl<T: ScalarNegOne> NegativeBackward for T {
        const BACKWARD: Self = Self::NEG_ONE;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveForward for Vector<2, T, A> {
        const FORWARD: Self = Self::Z;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeBackward for Vector<2, T, A> {
        const BACKWARD: Self = Self::NEG_Z;
    }impl<T: ScalarOne, A: VecAlignment> PositiveForward for Vector<3, T, A> {
        const FORWARD: Self = Self::Z;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeBackward for Vector<3, T, A> {
        const BACKWARD: Self = Self::NEG_Z;
    }impl<T: ScalarOne, A: VecAlignment> PositiveForward for Vector<4, T, A> {
        const FORWARD: Self = Self::Z;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeBackward for Vector<4, T, A> {
        const BACKWARD: Self = Self::NEG_Z;
    }
}

/// Traits with `FORWARD` and `BACKWARD constants where backward is the positive direction.
#[cfg(feature = "dir_a_lower")]
pub mod backward {
    use crate::{
        Construct,
        ScalarZero,
        ScalarOne,
        ScalarNegOne,
        VecAlignment,
        Vector,
    };

    /// A trait for a `FORWARD` constant where backward is the positive direction.
    pub trait NegativeForward: Construct {
        /// A value that points forward with magnitude `1` where backward is the positive direction.
        const FORWARD: Self;
    }

    /// A trait for a `BACKWARD` constant where backward is the positive direction.
    pub trait PositiveBackward: Construct {
        /// A value that points backward with magnitude `1` where backward is the positive direction.
        const BACKWARD: Self;
    }

    impl<T: ScalarNegOne> NegativeForward for T {
        const FORWARD: Self = Self::NEG_ONE;
    }

    impl<T: ScalarOne> PositiveBackward for T {
        const BACKWARD: Self = Self::ONE;
    }

    impl<T: ScalarNegOne, A: VecAlignment> NegativeForward for Vector<2, T, A> {
        const FORWARD: Self = Self::NEG_Z;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveBackward for Vector<2, T, A> {
        const BACKWARD: Self = Self::Z;
    }impl<T: ScalarNegOne, A: VecAlignment> NegativeForward for Vector<3, T, A> {
        const FORWARD: Self = Self::NEG_Z;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveBackward for Vector<3, T, A> {
        const BACKWARD: Self = Self::Z;
    }impl<T: ScalarNegOne, A: VecAlignment> NegativeForward for Vector<4, T, A> {
        const FORWARD: Self = Self::NEG_Z;
    }

    impl<T: ScalarOne, A: VecAlignment> PositiveBackward for Vector<4, T, A> {
        const BACKWARD: Self = Self::Z;
    }
}

