// This file was generated by an associated codegen crate.
// To modify this file, modify the source code of the associated codegen crate.

//! Vector related types and traits

use core::{
    fmt::{Debug, Display},
    hash::{Hash, Hasher},
    mem::transmute,
    ops::*,
    slice::SliceIndex,
};

use crate::{Construct, IndexOutOfBoundsError, Usize, specialize};

mod constructor;
mod dir;
mod ops;
mod primitives;
mod scalar;
#[cfg(feature = "swizzle")]
mod swizzle;
pub use constructor::*;
pub use dir::*;
pub use scalar::*;

/// A generic vector type.
///
/// This type is generic over 3 parameters:
/// - `N`: The length of the vector, which currently can be 2, 3 or 4
/// - `T`: The scalar type of the vector, which must implement [`Scalar`]
/// - `A`: The "alignment" of the vector, which enables or disables SIMD memory-alignment
///
/// This type has very very useful type-aliases:
/// - `Vec{N}<T>` like `Vec2<T>` is for SIMD vectors
/// - `Vec{N}P<T>` like `Vec2P<T>` is for non-SIMD vectors
///
/// # Alignment
///
/// SIMD improves the performance of vector operations but increases the size of the vector in memory.
///
/// The `A` generic parameter controls whether or not the vector is SIMD-aligned.
/// `A = VecAligned` vectors are SIMD-aligned and `A = VecPacked` vectors are not.
///
/// Most of the time you should use `VecAligned` vectors (e.g. `Vec3<T>`),
/// and only use `VecPacked` vectors in memory-critical scenarios.
///
/// The exact alignment rules are:
///
/// - `VecPacked` vectors are always stored as `[T; N]`.
///
/// - `VecAligned` storage is decided upon by the [`Scalar`] implementation,
/// and follows the rule of using whatever format makes vector operations most performant.
/// This means that if vector operations don't benefit from SIMD,
/// the `VecAligned` vector should not be SIMD-aligned.
///
/// # Example
/// ```
/// use ggmath::*;
///
/// // This is a non memory critical scenario so we should use `VecAligned`.
/// struct PlayerState {
///     // Vector<3, f32, VecAligned>
///     position: Vec3<f32>,
/// }
///
/// // This is a memory critical scenario so we should use `VecPacked`.
/// struct GpuVertex {
///     // Vector<3, f32, VecPacked>
///     position: Vec3P<f32>,
///     // Vector<3, f32, VecPacked>
///     normal: Vec3P<f32>,
///     // Vector<2, f32, VecPacked>
///     uv: Vec2P<f32>,
/// }
///
/// fn initial_player_state() -> PlayerState {
///     PlayerState {
///         position: vec3!(0.0, 1.0, 2.0),
///     }
/// }
///
/// fn triangle_vertices() -> [GpuVertex; 3] {
///     [
///         GpuVertex {
///             position: vec3p!(-1.0, -1.0, 0.0),
///             normal: vec3p!(0.0, 0.0, 1.0),
///             uv: vec2p!(0.0, 0.0),
///         },
///         GpuVertex {
///             position: vec3p!(1.0, -1.0, 0.0),
///             normal: vec3p!(0.0, 0.0, 1.0),
///             uv: vec2p!(1.0, 0.0),
///         },
///         GpuVertex {
///             position: vec3p!(0.0, 1.0, 0.0),
///             normal: vec3p!(0.0, 0.0, 1.0),
///             uv: vec2p!(0.5, 1.0),
///         },
///     ]
/// }
/// ```
#[repr(transparent)]
pub struct Vector<const N: usize, T: Scalar, A: VecAlignment>(pub A::InnerVector<N, T>)
where
    Usize<N>: VecLen;

/// Type alias for [`Vector<2, T, VecAligned>`][Vector].
pub type Vec2<T> = Vector<2, T, VecAligned>;

/// Type alias for [`Vector<3, T, VecAligned>`][Vector].
pub type Vec3<T> = Vector<3, T, VecAligned>;

/// Type alias for [`Vector<4, T, VecAligned>`][Vector].
pub type Vec4<T> = Vector<4, T, VecAligned>;

/// Type alias for [`Vector<2, T, VecPacked>`][Vector].
pub type Vec2P<T> = Vector<2, T, VecPacked>;

/// Type alias for [`Vector<3, T, VecPacked>`][Vector].
pub type Vec3P<T> = Vector<3, T, VecPacked>;

/// Type alias for [`Vector<4, T, VecPacked>`][Vector].
pub type Vec4P<T> = Vector<4, T, VecPacked>;

/// Generates vector type-aliases for a specific scalar type.
///
/// # Example
///
/// ```
/// use ggmath::*;
///
/// vector_aliases!(pub type F = f32);
/// ```
/// Generates:
/// ```
/// pub type FVec2 = Vec2<f32>;
/// pub type FVec3 = Vec3<f32>;
/// pub type FVec4 = Vec4<f32>;
/// pub type FVec2P = Vec2P<f32>;
/// pub type FVec3P = Vec3P<f32>;
/// pub type FVec4P = Vec4P<f32>;
/// ```
#[macro_export]
macro_rules! vector_aliases {
    ($(#[$($attr:tt)*])* pub($($vis:tt)*) type $prefix:ident => $t:ty) => {
        $crate::vector_aliases!(@(pub type $($vis)*) $(#[$($attr)*])* $prefix => $t);
    };
    ($(#[$($attr:tt)*])* pub type $prefix:ident => $t:ty) => {
        $crate::vector_aliases!(@(pub) $(#[$($attr)*])* type $prefix => $t);
    };
    ($(#[$($attr:tt)*])* type $prefix:ident => $t:ty) => {
        $crate::vector_aliases!(@() $(#[$($attr)*])* type $prefix => $t);
    };

    (@($($vis:tt)*) $(#[$($attr:tt)*])* type $prefix:ident => $t:ty) => {
        $crate::_hidden_::paste! {
            #[doc = "Type alias to [`Vector<2, " $t ", VecAligned>`][Vector]."]
            $(#[$($attr)*])*
            $($vis)* type [<$prefix Vec2>] = $crate::Vec2<$t>;

            #[doc = "Type alias to [`Vector<2, " $t ", VecPacked>`][Vector]."]
            $(#[$($attr)*])*
            $($vis)* type [<$prefix Vec2P>] = $crate::Vec2P<$t>;

            #[doc = "Type alias to [`Vector<3, " $t ", VecAligned>`][Vector]."]
            $(#[$($attr)*])*
            $($vis)* type [<$prefix Vec3>] = $crate::Vec3<$t>;

            #[doc = "Type alias to [`Vector<3, " $t ", VecPacked>`][Vector]."]
            $(#[$($attr)*])*
            $($vis)* type [<$prefix Vec3P>] = $crate::Vec3P<$t>;

            #[doc = "Type alias to [`Vector<4, " $t ", VecAligned>`][Vector]."]
            $(#[$($attr)*])*
            $($vis)* type [<$prefix Vec4>] = $crate::Vec4<$t>;

            #[doc = "Type alias to [`Vector<4, " $t ", VecPacked>`][Vector]."]
            $(#[$($attr)*])*
            $($vis)* type [<$prefix Vec4P>] = $crate::Vec4P<$t>;
        }
    };
}

/// Marks a `Usize<N>` type as a valid vector length.
pub trait VecLen {
    /// The inner type contained inside `Vector<N, T, VecAligned>`.
    ///
    /// This redirects to `T::InnerAlignedVec{N}`,
    /// for example `T::InnerAlignedVec2` for `Usize<2>`.`
    type InnerAlignedVector<T: Scalar>: Construct;

    /// The length value as an enum.
    const ENUM: VecLenEnum;
}

/// An enum with all currently supported vector lengths.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum VecLenEnum {
    /// `2`
    Two,
    /// `3`
    Three,
    /// `4`
    Four,
}

/// See [`Vector`] for information.
pub trait VecAlignment: 'static {
    /// The inner type contained inside [`Vector`].
    ///
    /// For `VecAligned` vectors this is `T::InnerAlignedVec{N}`,
    /// for example `T::InnerAlignedVec2` for `Vec2`.
    ///
    /// For `VecPacked` vectors this is `[T; N]`,
    /// for example `[T; 2]` for `Vec2`.
    type InnerVector<const N: usize, T: Scalar>: Construct
    where
        Usize<N>: VecLen;

    /// Whether or not the vector is VecAligned.
    const IS_ALIGNED: bool;
}

/// See [`Vector`] for information.
pub struct VecAligned;

/// See [`Vector`] for information.
pub struct VecPacked;

impl VecLen for Usize<2> {
    type InnerAlignedVector<T: Scalar> = T::InnerAlignedVec2;

    const ENUM: VecLenEnum = VecLenEnum::Two;
}

impl VecLen for Usize<3> {
    type InnerAlignedVector<T: Scalar> = T::InnerAlignedVec3;

    const ENUM: VecLenEnum = VecLenEnum::Three;
}

impl VecLen for Usize<4> {
    type InnerAlignedVector<T: Scalar> = T::InnerAlignedVec4;

    const ENUM: VecLenEnum = VecLenEnum::Four;
}

impl VecAlignment for VecAligned {
    type InnerVector<const N: usize, T: Scalar>
        = <Usize<N> as VecLen>::InnerAlignedVector<T>
    where
        Usize<N>: VecLen;

    const IS_ALIGNED: bool = true;
}

impl VecAlignment for VecPacked {
    type InnerVector<const N: usize, T: Scalar>
        = [T; N]
    where
        Usize<N>: VecLen;

    const IS_ALIGNED: bool = false;
}

impl<const N: usize, T: Scalar, A: VecAlignment> Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    /// Returns true if the vector is aligned.
    /// The output only depends on `A` and does not rely on runtime values.
    #[inline(always)]
    pub const fn is_aligned(self) -> bool {
        A::IS_ALIGNED
    }

    /// Converts the vector to a `VecAligned` vector.
    #[inline(always)]
    pub fn align(self) -> Vector<N, T, VecAligned> {
        self.to_storage()
    }

    /// Converts the vector to a `VecPacked` vector.
    #[inline(always)]
    pub fn pack(self) -> Vector<N, T, VecPacked> {
        self.to_storage()
    }

    /// Converts the vector to the specified alignment.
    #[inline(always)]
    pub fn to_storage<A2: VecAlignment>(self) -> Vector<N, T, A2> {
        specialize! {
            (self: Vector<N, T, A>) -> Vector<N, T, A2>:

            for (Vector<N, T, A>) -> Vector<N, T, A> {
                |vec| vec
            }
            else {
                Vector::from_array(self.as_array())
            }
        }
    }

    /// Creates a new vector from an array.
    #[inline(always)]
    pub fn from_array(array: [T; N]) -> Self {
        specialize! {
            (array: [T; N]) -> Vector<N, T, A>:

            for ([T; 2]) -> Vector<2, T, VecAligned> {
                |array| T::vec2_from_array(array)
            }
            for ([T; 3]) -> Vector<3, T, VecAligned> {
                |array| T::vec3_from_array(array)
            }
            for ([T; 4]) -> Vector<4, T, VecAligned> {
                |array| T::vec4_from_array(array)
            }
            for ([T; N]) -> Vector<N, T, VecPacked> {
                |array| Vector(array)
            }
            else {
                unreachable!("unusual vector type")
            }
        }
    }

    /// Creates a new vector where each component is the same value.
    #[inline(always)]
    pub fn splat(value: T) -> Self {
        specialize! {
            (value: T) -> Vector<N, T, A>:

            for (T) -> Vector<2, T, VecAligned> {
                |value| T::vec2_splat(value)
            }
            for (T) -> Vector<3, T, VecAligned> {
                |value| T::vec3_splat(value)
            }
            for (T) -> Vector<4, T, VecAligned> {
                |value| T::vec4_splat(value)
            }
            else {
                Vector::from_array([value; N])
            }
        }
    }

    /// Creates a new vector where each component is evaluated from the given function called with the component index.
    /// The function is called in order.
    #[inline(always)]
    pub fn from_fn<F: FnMut(usize) -> T>(f: F) -> Self {
        Vector::from_array(core::array::from_fn(f))
    }

    /// Returns the number of components in the vector.
    #[inline(always)]
    pub const fn len(self) -> usize {
        N
    }

    /// Converts the vector to an array.
    #[inline(always)]
    pub fn as_array(self) -> [T; N] {
        specialize! {
            (self: Vector<N, T, A>) -> [T; N]:

            for (Vector<2, T, VecAligned>) -> [T; 2] {
                |vec| T::vec2_as_array(vec)
            }
            for (Vector<3, T, VecAligned>) -> [T; 3] {
                |vec| T::vec3_as_array(vec)
            }
            for (Vector<4, T, VecAligned>) -> [T; 4] {
                |vec| T::vec4_as_array(vec)
            }
            for (Vector<N, T, VecPacked>) -> [T; N] {
                |vec| vec.0
            }
            else {
                unreachable!("unusual vector type")
            }
        }
    }

    /// Returns the component at the given index or panics if the index is out of bounds.
    #[inline(always)]
    pub fn index(self, index: usize) -> T {
        if index >= N {
            panic!("index out of bounds: the len is {N} but the index is {index}");
        }

        unsafe { self.get_unchecked(index) }
    }

    /// Returns the component at the given index or returns None if the index is out of bounds.
    #[inline(always)]
    pub fn get(self, index: usize) -> Option<T> {
        if index >= N {
            None
        } else {
            Some(unsafe { self.get_unchecked(index) })
        }
    }

    /// Returns the component at the given index with no bounds checking.
    ///
    /// # Safety
    /// The caller must ensure that the index is in bounds.
    #[inline(always)]
    pub unsafe fn get_unchecked(self, index: usize) -> T {
        specialize! {
            (self: Vector<N, T, A>, index: usize) -> T:

            for (Vector<2, T, VecAligned>, usize) -> T {
                |vec, index| unsafe { T::vec2_get_unchecked(vec, index) }
            }
            for (Vector<3, T, VecAligned>, usize) -> T {
                |vec, index| unsafe { T::vec3_get_unchecked(vec, index) }
            }
            for (Vector<4, T, VecAligned>, usize) -> T {
                |vec, index| unsafe { T::vec4_get_unchecked(vec, index) }
            }
            else {
                unsafe { *self.as_array().get_unchecked(index) }
            }
        }
    }

    /// Sets the component at the given index or panics if the index is out of bounds.
    #[inline(always)]
    pub fn set(&mut self, index: usize, value: T) {
        if index >= N {
            panic!("index out of bounds: the len is {N} but the index is {index}");
        }

        unsafe { self.set_unchecked(index, value) }
    }

    /// Sets the component at the given index or returns an error if the index is out of bounds.
    #[inline(always)]
    pub fn try_set(&mut self, index: usize, value: T) -> Result<(), IndexOutOfBoundsError> {
        if index >= N {
            Err(IndexOutOfBoundsError)
        } else {
            unsafe { self.set_unchecked(index, value) }

            Ok(())
        }
    }

    /// Sets the component at the given index with no bounds checking.
    ///
    /// # Safety
    /// The caller must ensure that the index is in bounds.
    #[inline(always)]
    pub unsafe fn set_unchecked(&mut self, index: usize, value: T) {
        *self = specialize! {
            ((*self): Vector<N, T, A>, index: usize, value: T) -> Vector<N, T, A>:

            for (Vector<2, T, VecAligned>, usize, T) -> Vector<2, T, VecAligned> {
                |vec, index, value| unsafe { T::vec2_with_unchecked(vec, index, value) }
            }
            for (Vector<3, T, VecAligned>, usize, T) -> Vector<3, T, VecAligned> {
                |vec, index, value| unsafe { T::vec3_with_unchecked(vec, index, value) }
            }
            for (Vector<4, T, VecAligned>, usize, T) -> Vector<4, T, VecAligned> {
                |vec, index, value| unsafe { T::vec4_with_unchecked(vec, index, value) }
            }
            else {
                let mut array = self.as_array();
                unsafe {
                    *array.get_unchecked_mut(index) = value;
                }
                Vector::from_array(array)
            }
        };
    }

    /// Returns a vec2 where:
    /// - The `x` (1st) component is `self[X_SRC]`
    /// - The `y` (2nd) component is `self[Y_SRC]`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn shuffle_2<const X_SRC: usize, const Y_SRC: usize>(self) -> Vector<2, T, A> {
        specialize! {
            (self: Vector<N, T, A>) -> Vector<2, T, A>:

            for (Vector<2, T, VecAligned>) -> Vector<2, T, VecAligned> {
                |vec| T::vec2_shuffle_2::<X_SRC, Y_SRC>(vec)
            }
            for (Vector<3, T, VecAligned>) -> Vector<2, T, VecAligned> {
                |vec| T::vec3_shuffle_2::<X_SRC, Y_SRC>(vec)
            }
            for (Vector<4, T, VecAligned>) -> Vector<2, T, VecAligned> {
                |vec| T::vec4_shuffle_2::<X_SRC, Y_SRC>(vec)
            }
            else {
                Vector::<2, T, A>::from_array([self.index(X_SRC), self.index(Y_SRC)])
            }
        }
    }

    /// Returns a vec3 where:
    /// - The `x` (1st) component is `self[X_SRC]`
    /// - The `y` (2nd) component is `self[Y_SRC]`
    /// - The `z` (3rd) component is `self[Z_SRC]`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn shuffle_3<const X_SRC: usize, const Y_SRC: usize, const Z_SRC: usize>(
        self,
    ) -> Vector<3, T, A> {
        specialize! {
            (self: Vector<N, T, A>) -> Vector<3, T, A>:

            for (Vector<2, T, VecAligned>) -> Vector<3, T, VecAligned> {
                |vec| T::vec2_shuffle_3::<X_SRC, Y_SRC, Z_SRC>(vec)
            }
            for (Vector<3, T, VecAligned>) -> Vector<3, T, VecAligned> {
                |vec| T::vec3_shuffle_3::<X_SRC, Y_SRC, Z_SRC>(vec)
            }
            for (Vector<4, T, VecAligned>) -> Vector<3, T, VecAligned> {
                |vec| T::vec4_shuffle_3::<X_SRC, Y_SRC, Z_SRC>(vec)
            }
            else {
                Vector::<3, T, A>::from_array([self.index(X_SRC), self.index(Y_SRC), self.index(Z_SRC)])
            }
        }
    }

    /// Returns a vec4 where:
    /// - The `x` (1st) component is `self[X_SRC]`
    /// - The `y` (2nd) component is `self[Y_SRC]`
    /// - The `z` (3rd) component is `self[Z_SRC]`
    /// - The `w` (4th) component is `self[W_SRC]`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn shuffle_4<
        const X_SRC: usize,
        const Y_SRC: usize,
        const Z_SRC: usize,
        const W_SRC: usize,
    >(
        self,
    ) -> Vector<4, T, A> {
        specialize! {
            (self: Vector<N, T, A>) -> Vector<4, T, A>:

            for (Vector<2, T, VecAligned>) -> Vector<4, T, VecAligned> {
                |vec| T::vec2_shuffle_4::<X_SRC, Y_SRC, Z_SRC, W_SRC>(vec)
            }
            for (Vector<3, T, VecAligned>) -> Vector<4, T, VecAligned> {
                |vec| T::vec3_shuffle_4::<X_SRC, Y_SRC, Z_SRC, W_SRC>(vec)
            }
            for (Vector<4, T, VecAligned>) -> Vector<4, T, VecAligned> {
                |vec| T::vec4_shuffle_4::<X_SRC, Y_SRC, Z_SRC, W_SRC>(vec)
            }
            else {
                Vector::<4, T, A>::from_array([self.index(X_SRC), self.index(Y_SRC), self.index(Z_SRC), self.index(W_SRC)])
            }
        }
    }

    /// Maps each component of the vector to a new value using the given function.
    #[inline(always)]
    pub fn map<T2: Scalar, F: Fn(T) -> T2>(self, f: F) -> Vector<N, T2, A>
    where
        Usize<N>: VecLen,
    {
        Vector::from_array(self.as_array().map(f))
    }

    /// Returns an iterator over the components of the vector.
    #[inline(always)]
    pub fn iter(self) -> <[T; N] as IntoIterator>::IntoIter {
        self.into_iter()
    }

    /// Folds the vector into a single value by repeatedly applying the given function to an accumulator on the vector's elements,
    /// using the given initial value.
    #[inline(always)]
    pub fn fold(self, init: T, mut f: impl FnMut(T, T) -> T) -> T {
        let mut output = init;

        for component in self {
            output = f(output, component);
        }

        output
    }

    /// Reduces the vector into a single value by repeatedly applying the given function to an accumulator on the vector's elements,
    /// using the first component as the initial value.
    #[inline(always)]
    pub fn reduce(self, mut f: impl FnMut(T, T) -> T) -> T {
        let mut output = self.index(0);

        for component in self.iter().skip(1) {
            output = f(output, component);
        }

        output
    }

    /// Returns true if all components of the vector satisfy the given predicate.
    /// If a component does not satisfy the predicate,
    /// the function returns false immediately without evaluating the remaining components.
    #[inline(always)]
    pub fn all(self, f: impl FnMut(T) -> bool) -> bool {
        self.iter().all(f)
    }

    /// Returns true if any component of the vector satisfies the given predicate.
    /// If a component satisfies the predicate,
    /// the function returns true immediately without evaluating the remaining components.
    #[inline(always)]
    pub fn any(self, f: impl FnMut(T) -> bool) -> bool {
        self.iter().any(f)
    }

    /// Returns the number of components that satisfy the given predicate.
    #[inline(always)]
    pub fn count(self, mut f: impl FnMut(T) -> bool) -> usize {
        self.iter().filter(|x| f(*x)).count()
    }

    /// Returns a vector of booleans where each component is `true` if the corresponding component of `self` is equal to the corresponding component of `other`.
    #[inline(always)]
    pub fn eq_mask<T2: Scalar>(self, other: Vector<N, T2, impl VecAlignment>) -> Vector<N, bool, A>
    where
        T: PartialEq<T2>,
    {
        specialize! {
            (self: Vector<N, T, A>, other: Vector<N, T2, _>) -> Vector<N, bool, A>:

            for (Vector<2, T, VecAligned>, Vector<2, T2, VecAligned>) -> Vector<2, bool, VecAligned> {
                |vec, other| T::vec2_eq_mask(vec, other)
            }
            for (Vector<3, T, VecAligned>, Vector<3, T2, VecAligned>) -> Vector<3, bool, VecAligned> {
                |vec, other| T::vec3_eq_mask(vec, other)
            }
            for (Vector<4, T, VecAligned>, Vector<4, T2, VecAligned>) -> Vector<4, bool, VecAligned> {
                |vec, other| T::vec4_eq_mask(vec, other)
            }
            else {
                Vector::from_fn(|i| self.index(i) == other.index(i))
            }
        }
    }

    /// Returns a vector of booleans where each component is `true` if the corresponding component of `self` is not equal to the corresponding component of `other`.
    #[inline(always)]
    pub fn ne_mask<T2: Scalar>(self, other: Vector<N, T2, impl VecAlignment>) -> Vector<N, bool, A>
    where
        T: PartialEq<T2>,
    {
        specialize! {
            (self: Vector<N, T, A>, other: Vector<N, T2, _>) -> Vector<N, bool, A>:

            for (Vector<2, T, VecAligned>, Vector<2, T2, VecAligned>) -> Vector<2, bool, VecAligned> {
                |vec, other| T::vec2_ne_mask(vec, other)
            }
            for (Vector<3, T, VecAligned>, Vector<3, T2, VecAligned>) -> Vector<3, bool, VecAligned> {
                |vec, other| T::vec3_ne_mask(vec, other)
            }
            for (Vector<4, T, VecAligned>, Vector<4, T2, VecAligned>) -> Vector<4, bool, VecAligned> {
                |vec, other| T::vec4_ne_mask(vec, other)
            }
            else {
                Vector::from_fn(|i| self.index(i) != other.index(i))
            }
        }
    }

    /// Returns a vector of booleans where each component is `true` if the corresponding component of `self` is less than the corresponding component of `other`.
    #[inline(always)]
    pub fn lt_mask<T2: Scalar>(self, other: Vector<N, T2, impl VecAlignment>) -> Vector<N, bool, A>
    where
        T: PartialOrd<T2>,
    {
        specialize! {
            (self: Vector<N, T, A>, other: Vector<N, T2, _>) -> Vector<N, bool, A>:

            for (Vector<2, T, VecAligned>, Vector<2, T2, VecAligned>) -> Vector<2, bool, VecAligned> {
                |vec, other| T::vec2_lt_mask(vec, other)
            }
            for (Vector<3, T, VecAligned>, Vector<3, T2, VecAligned>) -> Vector<3, bool, VecAligned> {
                |vec, other| T::vec3_lt_mask(vec, other)
            }
            for (Vector<4, T, VecAligned>, Vector<4, T2, VecAligned>) -> Vector<4, bool, VecAligned> {
                |vec, other| T::vec4_lt_mask(vec, other)
            }
            else {
                Vector::from_fn(|i| self.index(i) < other.index(i))
            }
        }
    }

    /// Returns a vector of booleans where each component is `true` if the corresponding component of `self` is less than or equal to the corresponding component of `other`.
    #[inline(always)]
    pub fn le_mask<T2: Scalar>(self, other: Vector<N, T2, impl VecAlignment>) -> Vector<N, bool, A>
    where
        T: PartialOrd<T2>,
    {
        specialize! {
            (self: Vector<N, T, A>, other: Vector<N, T2, _>) -> Vector<N, bool, A>:

            for (Vector<2, T, VecAligned>, Vector<2, T2, VecAligned>) -> Vector<2, bool, VecAligned> {
                |vec, other| T::vec2_le_mask(vec, other)
            }
            for (Vector<3, T, VecAligned>, Vector<3, T2, VecAligned>) -> Vector<3, bool, VecAligned> {
                |vec, other| T::vec3_le_mask(vec, other)
            }
            for (Vector<4, T, VecAligned>, Vector<4, T2, VecAligned>) -> Vector<4, bool, VecAligned> {
                |vec, other| T::vec4_le_mask(vec, other)
            }
            else {
                Vector::from_fn(|i| self.index(i) <= other.index(i))
            }
        }
    }

    /// Returns a vector of booleans where each component is `true` if the corresponding component of `self` is greater than the corresponding component of `other`.
    #[inline(always)]
    pub fn gt_mask<T2: Scalar>(self, other: Vector<N, T2, impl VecAlignment>) -> Vector<N, bool, A>
    where
        T: PartialOrd<T2>,
    {
        specialize! {
            (self: Vector<N, T, A>, other: Vector<N, T2, _>) -> Vector<N, bool, A>:

            for (Vector<2, T, VecAligned>, Vector<2, T2, VecAligned>) -> Vector<2, bool, VecAligned> {
                |vec, other| T::vec2_gt_mask(vec, other)
            }
            for (Vector<3, T, VecAligned>, Vector<3, T2, VecAligned>) -> Vector<3, bool, VecAligned> {
                |vec, other| T::vec3_gt_mask(vec, other)
            }
            for (Vector<4, T, VecAligned>, Vector<4, T2, VecAligned>) -> Vector<4, bool, VecAligned> {
                |vec, other| T::vec4_gt_mask(vec, other)
            }
            else {
                Vector::from_fn(|i| self.index(i) > other.index(i))
            }
        }
    }

    /// Returns a vector of booleans where each component is `true` if the corresponding component of `self` is greater than or equal to the corresponding component of `other`.
    #[inline(always)]
    pub fn ge_mask<T2: Scalar>(self, other: Vector<N, T2, impl VecAlignment>) -> Vector<N, bool, A>
    where
        T: PartialOrd<T2>,
    {
        specialize! {
            (self: Vector<N, T, A>, other: Vector<N, T2, _>) -> Vector<N, bool, A>:

            for (Vector<2, T, VecAligned>, Vector<2, T2, VecAligned>) -> Vector<2, bool, VecAligned> {
                |vec, other| T::vec2_ge_mask(vec, other)
            }
            for (Vector<3, T, VecAligned>, Vector<3, T2, VecAligned>) -> Vector<3, bool, VecAligned> {
                |vec, other| T::vec3_ge_mask(vec, other)
            }
            for (Vector<4, T, VecAligned>, Vector<4, T2, VecAligned>) -> Vector<4, bool, VecAligned> {
                |vec, other| T::vec4_ge_mask(vec, other)
            }
            else {
                Vector::from_fn(|i| self.index(i) >= other.index(i))
            }
        }
    }

    /// Returns the sum of the components of the vector.
    #[inline(always)]
    pub fn sum(self) -> T
    where
        T: Add<Output = T>,
    {
        specialize! {
            (self: Vector<N, T, A>) -> T:

            for (Vector<2, T, VecAligned>) -> T {
                |vec| T::vec2_sum(vec)
            }
            for (Vector<3, T, VecAligned>) -> T {
                |vec| T::vec3_sum(vec)
            }
            for (Vector<4, T, VecAligned>) -> T {
                |vec| T::vec4_sum(vec)
            }
            else {
                self.reduce(|a, b| a + b)
            }
        }
    }

    /// Returns the product of the components of the vector.
    #[inline(always)]
    pub fn product(self) -> T
    where
        T: Mul<Output = T>,
    {
        specialize! {
            (self: Vector<N, T, A>) -> T:

            for (Vector<2, T, VecAligned>) -> T {
                |vec| T::vec2_product(vec)
            }
            for (Vector<3, T, VecAligned>) -> T {
                |vec| T::vec3_product(vec)
            }
            for (Vector<4, T, VecAligned>) -> T {
                |vec| T::vec4_product(vec)
            }
            else {
                self.reduce(|a, b| a * b)
            }
        }
    }

    /// Returns the square of the magnitude of the vector.
    #[inline(always)]
    pub fn mag_sq(self) -> T
    where
        T: Add<Output = T> + Mul<Output = T>,
    {
        (self * self).sum()
    }

    /// Returns the dot product of `self` and `other`.
    #[inline(always)]
    pub fn dot(self, other: Vector<N, T, impl VecAlignment>) -> T
    where
        T: Add<Output = T> + Mul<Output = T>,
    {
        (self * other).sum()
    }
}

impl<const N: usize, T: Scalar> Vector<N, T, VecPacked>
where
    Usize<N>: VecLen,
{
    /// Converts an array reference to a vector reference.
    #[inline(always)]
    pub const fn from_array_ref(array: &[T; N]) -> &Self {
        unsafe { transmute::<&[T; N], &Vector<N, T, VecPacked>>(array) }
    }

    /// Converts a mutable array reference to a mutable vector reference.
    #[inline(always)]
    pub const fn from_mut_array(array: &mut [T; N]) -> &mut Self {
        unsafe { transmute::<&mut [T; N], &mut Vector<N, T, VecPacked>>(array) }
    }

    /// Converts a vector reference to an array reference.
    #[inline(always)]
    pub const fn as_array_ref(&self) -> &[T; N] {
        &self.0
    }

    /// Converts a mutable vector reference to a mutable array reference.
    #[inline(always)]
    pub const fn as_mut_array(&mut self) -> &mut [T; N] {
        &mut self.0
    }

    /// Returns a pointer to the first element of the vector.
    #[inline(always)]
    pub const fn as_ptr(&self) -> *const T {
        self.0.as_ptr()
    }

    /// Returns a mutable pointer to the first element of the vector.
    #[inline(always)]
    pub const fn as_mut_ptr(&mut self) -> *mut T {
        self.0.as_mut_ptr()
    }

    /// Returns an iterator over the references to the components of the vector.
    #[inline(always)]
    pub fn iter_ref(&self) -> <&[T; N] as IntoIterator>::IntoIter {
        self.into_iter()
    }

    /// Returns an iterator over the mutable references to the components of the vector.
    #[inline(always)]
    pub fn iter_mut(&mut self) -> <&mut [T; N] as IntoIterator>::IntoIter {
        self.into_iter()
    }
}

impl<T: Scalar, A: VecAlignment> Vector<2, T, A> {
    /// Returns `self` rotated 90 degrees counter-clockwise.
    #[inline(always)]
    pub fn perp(self) -> Self
    where
        T: Neg<Output = T>,
    {
        vec2g!(-self.y(), self.x())
    }

    /// Returns `self` rotated 90 degrees clockwise.
    #[inline(always)]
    pub fn perp_cw(self) -> Self
    where
        T: Neg<Output = T>,
    {
        vec2g!(self.y(), -self.x())
    }

    /// Returns the perpendicular dot product of `self` and `other`.
    #[inline(always)]
    pub fn perp_dot(self, other: Vector<2, T, impl VecAlignment>) -> T
    where
        T: Mul<Output = T> + Sub<Output = T>,
    {
        self.x() * other.y() - self.y() * other.x()
    }

    /// Returns the `x` (1st) component of `self`.
    #[inline(always)]
    pub fn x(self) -> T {
        self.index(0)
    }

    /// Returns the `y` (2nd) component of `self`.
    #[inline(always)]
    pub fn y(self) -> T {
        self.index(1)
    }

    /// Returns `self` but with the `x` (1st) component set to `value`.
    #[inline(always)]
    pub fn with_x(self, value: T) -> Self {
        let mut output = self;
        output.set(0, value);
        output
    }

    /// Returns `self` but with the `y` (2nd) component set to `value`.
    #[inline(always)]
    pub fn with_y(self, value: T) -> Self {
        let mut output = self;
        output.set(1, value);
        output
    }

    /// Sets the `x` (1st) component of `self` to `value`.
    #[inline(always)]
    pub fn set_x(&mut self, value: T) {
        *self = self.with_x(value);
    }

    /// Sets the `y` (2nd) component of `self` to `value`.
    #[inline(always)]
    pub fn set_y(&mut self, value: T) {
        *self = self.with_y(value);
    }

    /// Returns `self` but with:
    /// - `self[X_DST]` set to the `x` (1st) component of `value`
    /// - `self[Y_DST]` set to the `y` (2nd) component of `value`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn with_shuffle_2<const X_DST: usize, const Y_DST: usize>(
        self,
        value: Vector<2, T, impl VecAlignment>,
    ) -> Self {
        specialize! {
            (self: Vector<2, T, A>, value: Vector<2, T, _>) -> Vector<2, T, A>:

            for (Vector<2, T, VecAligned>, Vector<2, T, VecAligned>) -> Vector<2, T, VecAligned> {
                |vec, value| T::vec2_with_shuffle_2::<X_DST, Y_DST>(vec, value)
            }
            else {
                let mut output = self;
                output.set(X_DST, value.x());
                output.set(Y_DST, value.y());

                output
            }
        }
    }
}

impl<T: Scalar, A: VecAlignment> Vector<3, T, A> {
    /// Returns the cross product of `self` and `other`.
    #[inline(always)]
    pub fn cross(self, other: Vector<3, T, impl VecAlignment>) -> Self
    where
        T: Mul<Output = T> + Sub<Output = T>,
    {
        self.yzx() * other.zxy() - self.zxy() * other.yzx()
    }

    /// Returns the `x` (1st) component of `self`.
    #[inline(always)]
    pub fn x(self) -> T {
        self.index(0)
    }

    /// Returns the `y` (2nd) component of `self`.
    #[inline(always)]
    pub fn y(self) -> T {
        self.index(1)
    }

    /// Returns the `z` (3rd) component of `self`.
    #[inline(always)]
    pub fn z(self) -> T {
        self.index(2)
    }

    /// Returns `self` but with the `x` (1st) component set to `value`.
    #[inline(always)]
    pub fn with_x(self, value: T) -> Self {
        let mut output = self;
        output.set(0, value);
        output
    }

    /// Returns `self` but with the `y` (2nd) component set to `value`.
    #[inline(always)]
    pub fn with_y(self, value: T) -> Self {
        let mut output = self;
        output.set(1, value);
        output
    }

    /// Returns `self` but with the `z` (3rd) component set to `value`.
    #[inline(always)]
    pub fn with_z(self, value: T) -> Self {
        let mut output = self;
        output.set(2, value);
        output
    }

    /// Sets the `x` (1st) component of `self` to `value`.
    #[inline(always)]
    pub fn set_x(&mut self, value: T) {
        *self = self.with_x(value);
    }

    /// Sets the `y` (2nd) component of `self` to `value`.
    #[inline(always)]
    pub fn set_y(&mut self, value: T) {
        *self = self.with_y(value);
    }

    /// Sets the `z` (3rd) component of `self` to `value`.
    #[inline(always)]
    pub fn set_z(&mut self, value: T) {
        *self = self.with_z(value);
    }

    /// Returns `self` but with:
    /// - `self[X_DST]` set to the `x` (1st) component of `value`
    /// - `self[Y_DST]` set to the `y` (2nd) component of `value`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn with_shuffle_2<const X_DST: usize, const Y_DST: usize>(
        self,
        value: Vector<2, T, impl VecAlignment>,
    ) -> Self {
        specialize! {
            (self: Vector<3, T, A>, value: Vector<2, T, _>) -> Vector<3, T, A>:

            for (Vector<3, T, VecAligned>, Vector<2, T, VecAligned>) -> Vector<3, T, VecAligned> {
                |vec, value| T::vec3_with_shuffle_2::<X_DST, Y_DST>(vec, value)
            }
            else {
                let mut output = self;
                output.set(X_DST, value.x());
                output.set(Y_DST, value.y());

                output
            }
        }
    }

    /// Returns `self` but with:
    /// - `self[X_DST]` set to the `x` (1st) component of `value`
    /// - `self[Y_DST]` set to the `y` (2nd) component of `value`
    /// - `self[Z_DST]` set to the `z` (3rd) component of `value`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn with_shuffle_3<const X_DST: usize, const Y_DST: usize, const Z_DST: usize>(
        self,
        value: Vector<3, T, impl VecAlignment>,
    ) -> Self {
        specialize! {
            (self: Vector<3, T, A>, value: Vector<3, T, _>) -> Vector<3, T, A>:

            for (Vector<3, T, VecAligned>, Vector<3, T, VecAligned>) -> Vector<3, T, VecAligned> {
                |vec, value| T::vec3_with_shuffle_3::<X_DST, Y_DST, Z_DST>(vec, value)
            }
            else {
                let mut output = self;
                output.set(X_DST, value.x());
                output.set(Y_DST, value.y());
                output.set(Z_DST, value.z());

                output
            }
        }
    }
}

impl<T: Scalar, A: VecAlignment> Vector<4, T, A> {
    /// Returns the `x` (1st) component of `self`.
    #[inline(always)]
    pub fn x(self) -> T {
        self.index(0)
    }

    /// Returns the `y` (2nd) component of `self`.
    #[inline(always)]
    pub fn y(self) -> T {
        self.index(1)
    }

    /// Returns the `z` (3rd) component of `self`.
    #[inline(always)]
    pub fn z(self) -> T {
        self.index(2)
    }

    /// Returns the `w` (4th) component of `self`.
    #[inline(always)]
    pub fn w(self) -> T {
        self.index(3)
    }

    /// Returns `self` but with the `x` (1st) component set to `value`.
    #[inline(always)]
    pub fn with_x(self, value: T) -> Self {
        let mut output = self;
        output.set(0, value);
        output
    }

    /// Returns `self` but with the `y` (2nd) component set to `value`.
    #[inline(always)]
    pub fn with_y(self, value: T) -> Self {
        let mut output = self;
        output.set(1, value);
        output
    }

    /// Returns `self` but with the `z` (3rd) component set to `value`.
    #[inline(always)]
    pub fn with_z(self, value: T) -> Self {
        let mut output = self;
        output.set(2, value);
        output
    }

    /// Returns `self` but with the `w` (4th) component set to `value`.
    #[inline(always)]
    pub fn with_w(self, value: T) -> Self {
        let mut output = self;
        output.set(3, value);
        output
    }

    /// Sets the `x` (1st) component of `self` to `value`.
    #[inline(always)]
    pub fn set_x(&mut self, value: T) {
        *self = self.with_x(value);
    }

    /// Sets the `y` (2nd) component of `self` to `value`.
    #[inline(always)]
    pub fn set_y(&mut self, value: T) {
        *self = self.with_y(value);
    }

    /// Sets the `z` (3rd) component of `self` to `value`.
    #[inline(always)]
    pub fn set_z(&mut self, value: T) {
        *self = self.with_z(value);
    }

    /// Sets the `w` (4th) component of `self` to `value`.
    #[inline(always)]
    pub fn set_w(&mut self, value: T) {
        *self = self.with_w(value);
    }

    /// Returns `self` but with:
    /// - `self[X_DST]` set to the `x` (1st) component of `value`
    /// - `self[Y_DST]` set to the `y` (2nd) component of `value`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn with_shuffle_2<const X_DST: usize, const Y_DST: usize>(
        self,
        value: Vector<2, T, impl VecAlignment>,
    ) -> Self {
        specialize! {
            (self: Vector<4, T, A>, value: Vector<2, T, _>) -> Vector<4, T, A>:

            for (Vector<4, T, VecAligned>, Vector<2, T, VecAligned>) -> Vector<4, T, VecAligned> {
                |vec, value| T::vec4_with_shuffle_2::<X_DST, Y_DST>(vec, value)
            }
            else {
                let mut output = self;
                output.set(X_DST, value.x());
                output.set(Y_DST, value.y());

                output
            }
        }
    }

    /// Returns `self` but with:
    /// - `self[X_DST]` set to the `x` (1st) component of `value`
    /// - `self[Y_DST]` set to the `y` (2nd) component of `value`
    /// - `self[Z_DST]` set to the `z` (3rd) component of `value`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn with_shuffle_3<const X_DST: usize, const Y_DST: usize, const Z_DST: usize>(
        self,
        value: Vector<3, T, impl VecAlignment>,
    ) -> Self {
        specialize! {
            (self: Vector<4, T, A>, value: Vector<3, T, _>) -> Vector<4, T, A>:

            for (Vector<4, T, VecAligned>, Vector<3, T, VecAligned>) -> Vector<4, T, VecAligned> {
                |vec, value| T::vec4_with_shuffle_3::<X_DST, Y_DST, Z_DST>(vec, value)
            }
            else {
                let mut output = self;
                output.set(X_DST, value.x());
                output.set(Y_DST, value.y());
                output.set(Z_DST, value.z());

                output
            }
        }
    }

    /// Returns `self` but with:
    /// - `self[X_DST]` set to the `x` (1st) component of `value`
    /// - `self[Y_DST]` set to the `y` (2nd) component of `value`
    /// - `self[Z_DST]` set to the `z` (3rd) component of `value`
    /// - `self[W_DST]` set to the `w` (4th) component of `value`
    ///
    /// Out of bounds indices are compile time errors.
    #[inline(always)]
    pub fn with_shuffle_4<
        const X_DST: usize,
        const Y_DST: usize,
        const Z_DST: usize,
        const W_DST: usize,
    >(
        self,
        value: Vector<4, T, impl VecAlignment>,
    ) -> Self {
        specialize! {
            (self: Vector<4, T, A>, value: Vector<4, T, _>) -> Vector<4, T, A>:

            for (Vector<4, T, VecAligned>, Vector<4, T, VecAligned>) -> Vector<4, T, VecAligned> {
                |vec, value| T::vec4_with_shuffle_4::<X_DST, Y_DST, Z_DST, W_DST>(vec, value)
            }
            else {
                let mut output = self;
                output.set(X_DST, value.x());
                output.set(Y_DST, value.y());
                output.set(Z_DST, value.z());
                output.set(W_DST, value.w());

                output
            }
        }
    }
}

impl<T: Scalar> Vector<2, T, VecPacked> {
    /// Returns a reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_ref(&self) -> &T {
        &self.0[0]
    }

    /// Returns a reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_ref(&self) -> &T {
        &self.0[1]
    }

    /// Returns a mutable reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_mut(&mut self) -> &mut T {
        &mut self.0[0]
    }

    /// Returns a mutable reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_mut(&mut self) -> &mut T {
        &mut self.0[1]
    }
}

impl<T: Scalar> Vector<3, T, VecPacked> {
    /// Returns a reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_ref(&self) -> &T {
        &self.0[0]
    }

    /// Returns a reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_ref(&self) -> &T {
        &self.0[1]
    }

    /// Returns a reference to the `z` (3rd) component of `self`.
    #[inline(always)]
    pub const fn z_ref(&self) -> &T {
        &self.0[2]
    }

    /// Returns a mutable reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_mut(&mut self) -> &mut T {
        &mut self.0[0]
    }

    /// Returns a mutable reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_mut(&mut self) -> &mut T {
        &mut self.0[1]
    }

    /// Returns a mutable reference to the `z` (3rd) component of `self`.
    #[inline(always)]
    pub const fn z_mut(&mut self) -> &mut T {
        &mut self.0[2]
    }
}

impl<T: Scalar> Vector<4, T, VecPacked> {
    /// Returns a reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_ref(&self) -> &T {
        &self.0[0]
    }

    /// Returns a reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_ref(&self) -> &T {
        &self.0[1]
    }

    /// Returns a reference to the `z` (3rd) component of `self`.
    #[inline(always)]
    pub const fn z_ref(&self) -> &T {
        &self.0[2]
    }

    /// Returns a reference to the `w` (4th) component of `self`.
    #[inline(always)]
    pub const fn w_ref(&self) -> &T {
        &self.0[3]
    }

    /// Returns a mutable reference to the `x` (1st) component of `self`.
    #[inline(always)]
    pub const fn x_mut(&mut self) -> &mut T {
        &mut self.0[0]
    }

    /// Returns a mutable reference to the `y` (2nd) component of `self`.
    #[inline(always)]
    pub const fn y_mut(&mut self) -> &mut T {
        &mut self.0[1]
    }

    /// Returns a mutable reference to the `z` (3rd) component of `self`.
    #[inline(always)]
    pub const fn z_mut(&mut self) -> &mut T {
        &mut self.0[2]
    }

    /// Returns a mutable reference to the `w` (4th) component of `self`.
    #[inline(always)]
    pub const fn w_mut(&mut self) -> &mut T {
        &mut self.0[3]
    }
}

impl<const N: usize, T: Scalar, A: VecAlignment> Clone for Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    #[inline(always)]
    fn clone(&self) -> Self {
        *self
    }
}

impl<const N: usize, T: Scalar, A: VecAlignment> Copy for Vector<N, T, A> where Usize<N>: VecLen {}

impl<const N: usize, T: Scalar, A: VecAlignment> IntoIterator for Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    type Item = T;
    type IntoIter = <[T; N] as IntoIterator>::IntoIter;

    #[inline(always)]
    fn into_iter(self) -> Self::IntoIter {
        self.as_array().into_iter()
    }
}

impl<'a, const N: usize, T: Scalar> IntoIterator for &'a Vector<N, T, VecPacked>
where
    Usize<N>: VecLen,
{
    type Item = &'a T;
    type IntoIter = <&'a [T; N] as IntoIterator>::IntoIter;

    #[inline(always)]
    fn into_iter(self) -> Self::IntoIter {
        self.as_array_ref().into_iter()
    }
}

impl<'a, const N: usize, T: Scalar> IntoIterator for &'a mut Vector<N, T, VecPacked>
where
    Usize<N>: VecLen,
{
    type Item = &'a mut T;
    type IntoIter = <&'a mut [T; N] as IntoIterator>::IntoIter;

    #[inline(always)]
    fn into_iter(self) -> Self::IntoIter {
        self.as_mut_array().into_iter()
    }
}

impl<const N: usize, T: Scalar, I: SliceIndex<[T]>> Index<I> for Vector<N, T, VecPacked>
where
    Usize<N>: VecLen,
{
    type Output = I::Output;

    #[inline(always)]
    fn index(&self, index: I) -> &Self::Output {
        &self.0[index]
    }
}

impl<const N: usize, T: Scalar, I: SliceIndex<[T]>> IndexMut<I> for Vector<N, T, VecPacked>
where
    Usize<N>: VecLen,
{
    #[inline(always)]
    fn index_mut(&mut self, index: I) -> &mut Self::Output {
        &mut self.0[index]
    }
}

impl<const N: usize, T: Scalar + PartialEq<T2>, A: VecAlignment, T2: Scalar, A2: VecAlignment>
    PartialEq<Vector<N, T2, A2>> for Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    #[inline(always)]
    fn eq(&self, other: &Vector<N, T2, A2>) -> bool {
        specialize! {
            ((*self): Vector<N, T, A>, (*other): Vector<N, T2, A2>) -> bool:

            for (Vector<2, T, VecAligned>, Vector<2, T2, VecAligned>) -> bool {
                |vec, other| T::vec2_eq(vec, other)
            }
            for (Vector<3, T, VecAligned>, Vector<3, T2, VecAligned>) -> bool {
                |vec, other| T::vec3_eq(vec, other)
            }
            for (Vector<4, T, VecAligned>, Vector<4, T2, VecAligned>) -> bool {
                |vec, other| T::vec4_eq(vec, other)
            }
            else {
                self.iter().zip(*other).all(|(a, b)| a == b)
            }
        }
    }

    #[inline(always)]
    fn ne(&self, other: &Vector<N, T2, A2>) -> bool {
        specialize! {
            ((*self): Vector<N, T, A>, (*other): Vector<N, T2, A2>) -> bool:

            for (Vector<2, T, VecAligned>, Vector<2, T2, VecAligned>) -> bool {
                |vec, other| T::vec2_ne(vec, other)
            }
            for (Vector<3, T, VecAligned>, Vector<3, T2, VecAligned>) -> bool {
                |vec, other| T::vec3_ne(vec, other)
            }
            for (Vector<4, T, VecAligned>, Vector<4, T2, VecAligned>) -> bool {
                |vec, other| T::vec4_ne(vec, other)
            }
            else {
                self.iter().zip(*other).any(|(a, b)| a != b)
            }
        }
    }
}

impl<const N: usize, T: Scalar + Eq, A: VecAlignment> Eq for Vector<N, T, A> where Usize<N>: VecLen {}

impl<const N: usize, T: Scalar + Hash, A: VecAlignment> Hash for Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    #[inline(always)]
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.as_array().hash(state)
    }
}

impl<const N: usize, T: Scalar + Default, A: VecAlignment> Default for Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    #[inline(always)]
    fn default() -> Self {
        Self::splat(T::default())
    }
}

impl<const N: usize, T: Scalar + Debug, A: VecAlignment> Debug for Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "(")?;

        for i in 0..N {
            if i != 0 {
                write!(f, ", ")?;
            }

            write!(f, "{:?}", self.index(i))?;
        }

        write!(f, ")")?;

        Ok(())
    }
}

impl<const N: usize, T: Scalar + Display, A: VecAlignment> Display for Vector<N, T, A>
where
    Usize<N>: VecLen,
{
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "(")?;

        for i in 0..N {
            if i != 0 {
                write!(f, ", ")?;
            }

            write!(f, "{}", self.index(i))?;
        }

        write!(f, ")")?;

        Ok(())
    }
}
