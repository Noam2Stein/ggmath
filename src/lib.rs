#![deny(missing_docs)]
#![doc = include_str!("../README.md")]

// This crate is automatically generated by the local `codegen` tool.
// Changes to the code should be made there, not here.

mod primitives;
pub use primitives::*;

#[cfg(feature = "vector")]
pub mod vector;
#[cfg(feature = "vector")]
pub use vector::*;

#[cfg(feature = "matrix")]
pub mod matrix;
#[cfg(feature = "matrix")]
pub use matrix::*;

#[cfg(feature = "quaternion")]
pub mod quaternion;
#[cfg(feature = "quaternion")]
pub use quaternion::*;

#[cfg(feature = "aabb")]
pub mod aabb;
#[cfg(feature = "aabb")]
pub use aabb::*;

#[doc(hidden)]
pub mod _hidden_ {
    pub use paste::*;
}

/// Is used to implement traits for specific numbers, with the pattern `where Usize<VAL>: Trait`.
pub struct Usize<const VAL: usize>;

/// The base trait for mathamatical types.
///
/// Makes sure a type represents data that is always valid and can be copied and sent anywhere.
/// Is automatically implemented for types that implement its supertraits.
pub trait Construct: Sized + Send + Sync + Copy + 'static + std::panic::UnwindSafe + std::panic::RefUnwindSafe {}

impl<T: Sized + Send + Sync + Copy + 'static + std::panic::UnwindSafe + std::panic::RefUnwindSafe>
    Construct for T
{
}
