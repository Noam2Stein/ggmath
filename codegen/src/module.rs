use std::{
    fs::{DirBuilder, File},
    io::Write,
    mem::forget,
    ops::{Deref, DerefMut},
    path::{Path, PathBuf},
};

use super::*;

#[derive(Debug)]
pub struct Mod {
    path: PathBuf,
}

#[derive(Debug)]
pub struct ModDir {
    inner: Mod,
}

impl Mod {
    pub fn finish(self, text: impl Into<String>) {
        DirBuilder::new()
            .recursive(true)
            .create(self.path.parent().unwrap())
            .expect("failed to create module directory");

        let mut file = File::create(&self.path).expect("failed to create module file");

        writedoc!(
            file,
            r#"
            // This file is automatically generated.
            // To edit this file edit the codegen crate instead.
            
            {}
            "#,
            text.into()
        )
        .expect("failed to write module file");

        forget(self);
    }
}

impl ModDir {
    pub fn root() -> Self {
        Self {
            inner: Mod {
                path: Path::new(OUT_DIR).join("mod.rs"),
            },
        }
    }

    pub fn submod(&self, name: &str) -> Mod {
        Mod {
            path: self.path.parent().unwrap().join(name).with_extension("rs"),
        }
    }

    pub fn submod_dir(&self, name: &str) -> ModDir {
        Self {
            inner: Mod {
                path: self.path.parent().unwrap().join(name).join("mod.rs"),
            },
        }
    }

    pub fn finish(self, text: impl Into<String>) {
        self.inner.finish(text);
    }
}

impl Deref for ModDir {
    type Target = Mod;

    fn deref(&self) -> &Self::Target {
        &self.inner
    }
}
impl DerefMut for ModDir {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.inner
    }
}

impl Drop for Mod {
    fn drop(&mut self) {
        DirBuilder::new()
            .recursive(true)
            .create(self.path.parent().unwrap())
            .expect("failed to create module directory");

        let mut file = File::create(&self.path).expect("failed to create module file");

        writedoc!(
            file,
            r#"
            // This file is automatically generated.
            // To edit this file edit the codegen crate instead.
            
            compile_error!("module has been dropped");
            "#
        )
        .expect("failed to write module file");
    }
}
